// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AES_encryption_sub_bytes.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AES_encryption_sub_bytes::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AES_encryption_sub_bytes::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> AES_encryption_sub_bytes::ap_ST_st1_fsm_0 = "1";
const sc_lv<5> AES_encryption_sub_bytes::ap_ST_st2_fsm_1 = "10";
const sc_lv<5> AES_encryption_sub_bytes::ap_ST_st3_fsm_2 = "100";
const sc_lv<5> AES_encryption_sub_bytes::ap_ST_st4_fsm_3 = "1000";
const sc_lv<5> AES_encryption_sub_bytes::ap_ST_st5_fsm_4 = "10000";
const sc_lv<32> AES_encryption_sub_bytes::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> AES_encryption_sub_bytes::ap_const_lv1_1 = "1";
const sc_lv<32> AES_encryption_sub_bytes::ap_const_lv32_1 = "1";
const sc_lv<1> AES_encryption_sub_bytes::ap_const_lv1_0 = "0";
const sc_lv<32> AES_encryption_sub_bytes::ap_const_lv32_2 = "10";
const sc_lv<32> AES_encryption_sub_bytes::ap_const_lv32_3 = "11";
const sc_lv<3> AES_encryption_sub_bytes::ap_const_lv3_0 = "000";
const sc_lv<32> AES_encryption_sub_bytes::ap_const_lv32_4 = "100";
const sc_lv<3> AES_encryption_sub_bytes::ap_const_lv3_4 = "100";
const sc_lv<3> AES_encryption_sub_bytes::ap_const_lv3_1 = "1";
const sc_lv<2> AES_encryption_sub_bytes::ap_const_lv2_0 = "00";

AES_encryption_sub_bytes::AES_encryption_sub_bytes(sc_module_name name) : sc_module(name), mVcdFile(0) {
    s_box_U = new AES_encryption_aes_key_expansion_s_box("s_box_U");
    s_box_U->clk(ap_clk);
    s_box_U->reset(ap_rst);
    s_box_U->address0(s_box_address0);
    s_box_U->ce0(s_box_ce0);
    s_box_U->q0(s_box_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_67_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_67_p2 );

    SC_METHOD(thread_ap_sig_22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_64);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_78);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_95);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_22 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_49 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_64 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_78 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_95 );

    SC_METHOD(thread_exitcond1_fu_67_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_reg_45 );

    SC_METHOD(thread_exitcond_fu_91_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( j_reg_56 );

    SC_METHOD(thread_i_1_fu_73_p2);
    sensitive << ( i_reg_45 );

    SC_METHOD(thread_j_1_fu_97_p2);
    sensitive << ( j_reg_56 );

    SC_METHOD(thread_s_box_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_8_fu_117_p1 );

    SC_METHOD(thread_s_box_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( state_addr_reg_143 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_7_fu_112_p1 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_state_d0);
    sensitive << ( s_box_q0 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_tmp_3_fu_83_p3);
    sensitive << ( tmp_fu_79_p1 );

    SC_METHOD(thread_tmp_5_cast_fu_103_p1);
    sensitive << ( j_reg_56 );

    SC_METHOD(thread_tmp_6_fu_107_p2);
    sensitive << ( tmp_3_reg_130 );
    sensitive << ( tmp_5_cast_fu_103_p1 );

    SC_METHOD(thread_tmp_7_fu_112_p1);
    sensitive << ( tmp_6_fu_107_p2 );

    SC_METHOD(thread_tmp_8_fu_117_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_tmp_fu_79_p1);
    sensitive << ( i_reg_45 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_67_p2 );
    sensitive << ( exitcond_fu_91_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AES_encryption_sub_bytes_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_22, "ap_sig_22");
    sc_trace(mVcdFile, s_box_address0, "s_box_address0");
    sc_trace(mVcdFile, s_box_ce0, "s_box_ce0");
    sc_trace(mVcdFile, s_box_q0, "s_box_q0");
    sc_trace(mVcdFile, i_1_fu_73_p2, "i_1_fu_73_p2");
    sc_trace(mVcdFile, i_1_reg_125, "i_1_reg_125");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_49, "ap_sig_49");
    sc_trace(mVcdFile, tmp_3_fu_83_p3, "tmp_3_fu_83_p3");
    sc_trace(mVcdFile, tmp_3_reg_130, "tmp_3_reg_130");
    sc_trace(mVcdFile, exitcond1_fu_67_p2, "exitcond1_fu_67_p2");
    sc_trace(mVcdFile, j_1_fu_97_p2, "j_1_fu_97_p2");
    sc_trace(mVcdFile, j_1_reg_138, "j_1_reg_138");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_64, "ap_sig_64");
    sc_trace(mVcdFile, state_addr_reg_143, "state_addr_reg_143");
    sc_trace(mVcdFile, exitcond_fu_91_p2, "exitcond_fu_91_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_78, "ap_sig_78");
    sc_trace(mVcdFile, i_reg_45, "i_reg_45");
    sc_trace(mVcdFile, j_reg_56, "j_reg_56");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_95, "ap_sig_95");
    sc_trace(mVcdFile, tmp_7_fu_112_p1, "tmp_7_fu_112_p1");
    sc_trace(mVcdFile, tmp_8_fu_117_p1, "tmp_8_fu_117_p1");
    sc_trace(mVcdFile, tmp_fu_79_p1, "tmp_fu_79_p1");
    sc_trace(mVcdFile, tmp_5_cast_fu_103_p1, "tmp_5_cast_fu_103_p1");
    sc_trace(mVcdFile, tmp_6_fu_107_p2, "tmp_6_fu_107_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

AES_encryption_sub_bytes::~AES_encryption_sub_bytes() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete s_box_U;
}

void AES_encryption_sub_bytes::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_91_p2.read()))) {
        i_reg_45 = i_1_reg_125.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_45 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_67_p2.read(), ap_const_lv1_0))) {
        j_reg_56 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        j_reg_56 = j_1_reg_138.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        i_1_reg_125 = i_1_fu_73_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        j_1_reg_138 = j_1_fu_97_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_91_p2.read()))) {
        state_addr_reg_143 =  (sc_lv<4>) (tmp_7_fu_112_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(exitcond1_fu_67_p2.read(), ap_const_lv1_0))) {
        tmp_3_reg_130 = tmp_3_fu_83_p3.read();
    }
}

void AES_encryption_sub_bytes::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !esl_seteq<1,1,1>(exitcond1_fu_67_p2.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AES_encryption_sub_bytes::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AES_encryption_sub_bytes::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond1_fu_67_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AES_encryption_sub_bytes::thread_ap_sig_22() {
    ap_sig_22 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void AES_encryption_sub_bytes::thread_ap_sig_49() {
    ap_sig_49 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void AES_encryption_sub_bytes::thread_ap_sig_64() {
    ap_sig_64 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void AES_encryption_sub_bytes::thread_ap_sig_78() {
    ap_sig_78 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void AES_encryption_sub_bytes::thread_ap_sig_95() {
    ap_sig_95 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void AES_encryption_sub_bytes::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_22.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void AES_encryption_sub_bytes::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_49.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void AES_encryption_sub_bytes::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_64.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void AES_encryption_sub_bytes::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_78.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void AES_encryption_sub_bytes::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_95.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void AES_encryption_sub_bytes::thread_exitcond1_fu_67_p2() {
    exitcond1_fu_67_p2 = (!i_reg_45.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_45.read() == ap_const_lv3_4);
}

void AES_encryption_sub_bytes::thread_exitcond_fu_91_p2() {
    exitcond_fu_91_p2 = (!j_reg_56.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_56.read() == ap_const_lv3_4);
}

void AES_encryption_sub_bytes::thread_i_1_fu_73_p2() {
    i_1_fu_73_p2 = (!i_reg_45.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_45.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void AES_encryption_sub_bytes::thread_j_1_fu_97_p2() {
    j_1_fu_97_p2 = (!j_reg_56.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_reg_56.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void AES_encryption_sub_bytes::thread_s_box_address0() {
    s_box_address0 =  (sc_lv<8>) (tmp_8_fu_117_p1.read());
}

void AES_encryption_sub_bytes::thread_s_box_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        s_box_ce0 = ap_const_logic_1;
    } else {
        s_box_ce0 = ap_const_logic_0;
    }
}

void AES_encryption_sub_bytes::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        state_address0 = state_addr_reg_143.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        state_address0 =  (sc_lv<4>) (tmp_7_fu_112_p1.read());
    } else {
        state_address0 = "XXXX";
    }
}

void AES_encryption_sub_bytes::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void AES_encryption_sub_bytes::thread_state_d0() {
    state_d0 = s_box_q0.read();
}

void AES_encryption_sub_bytes::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        state_we0 = ap_const_logic_1;
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void AES_encryption_sub_bytes::thread_tmp_3_fu_83_p3() {
    tmp_3_fu_83_p3 = esl_concat<2,2>(tmp_fu_79_p1.read(), ap_const_lv2_0);
}

void AES_encryption_sub_bytes::thread_tmp_5_cast_fu_103_p1() {
    tmp_5_cast_fu_103_p1 = esl_zext<4,3>(j_reg_56.read());
}

void AES_encryption_sub_bytes::thread_tmp_6_fu_107_p2() {
    tmp_6_fu_107_p2 = (!tmp_3_reg_130.read().is_01() || !tmp_5_cast_fu_103_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(tmp_3_reg_130.read()) + sc_biguint<4>(tmp_5_cast_fu_103_p1.read()));
}

void AES_encryption_sub_bytes::thread_tmp_7_fu_112_p1() {
    tmp_7_fu_112_p1 = esl_zext<64,4>(tmp_6_fu_107_p2.read());
}

void AES_encryption_sub_bytes::thread_tmp_8_fu_117_p1() {
    tmp_8_fu_117_p1 = esl_zext<64,8>(state_q0.read());
}

void AES_encryption_sub_bytes::thread_tmp_fu_79_p1() {
    tmp_fu_79_p1 = i_reg_45.read().range(2-1, 0);
}

void AES_encryption_sub_bytes::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond1_fu_67_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_91_p2.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

