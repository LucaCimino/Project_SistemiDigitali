-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_encryption_add_round_key is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    w_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_ce0 : OUT STD_LOGIC;
    w_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    w_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_ce1 : OUT STD_LOGIC;
    w_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    r : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of AES_encryption_add_round_key is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_22 : BOOLEAN;
    signal reg_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_56 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_63 : BOOLEAN;
    signal c_1_fu_148_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_1_reg_265 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_77 : BOOLEAN;
    signal state_addr_reg_270 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_166_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_reg_275 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_fu_176_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_39_reg_282 : STD_LOGIC_VECTOR (2 downto 0);
    signal state_addr_12_reg_287 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_13_reg_303 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_14_reg_314 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_118 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_111 : BOOLEAN;
    signal tmp_s_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_202_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_135_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_fu_163_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_159_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_41_fu_187_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_209_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_46_fu_222_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_76_cast3_fu_232_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_50_fu_240_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                c_reg_118 <= c_1_reg_265;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                c_reg_118 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                reg_130 <= state_q1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                reg_130 <= state_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                c_1_reg_265 <= c_1_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_142_p2 = ap_const_lv1_0))) then
                    state_addr_12_reg_287(2 downto 0) <= tmp_40_fu_182_p1(4 - 1 downto 0)(2 downto 0);
                    state_addr_reg_270(2 downto 0) <= tmp_s_fu_154_p1(4 - 1 downto 0)(2 downto 0);
                    tmp_36_reg_275(7 downto 2) <= tmp_36_fu_166_p4(7 downto 2);
                tmp_39_reg_282 <= tmp_39_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                    state_addr_13_reg_303(2 downto 0) <= tmp_45_fu_217_p1(4 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                state_addr_14_reg_314 <= tmp_49_fu_235_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    state_addr_reg_270(3) <= '0';
    tmp_36_reg_275(1 downto 0) <= "00";
    state_addr_12_reg_287(3) <= '0';
    state_addr_13_reg_303(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_142_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_142_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_142_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_142_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_142_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_142_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_111 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_56_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_56 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_63_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_63 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_77_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_77 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_22)
    begin
        if (ap_sig_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_77)
    begin
        if (ap_sig_77) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_56)
    begin
        if (ap_sig_56) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_63)
    begin
        if (ap_sig_63) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_111)
    begin
        if (ap_sig_111) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_148_p2 <= std_logic_vector(unsigned(c_reg_118) + unsigned(ap_const_lv3_1));
    exitcond_fu_142_p2 <= "1" when (c_reg_118 = ap_const_lv3_4) else "0";
    grp_fu_135_p2 <= (w_q0 xor reg_130);

    state_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, state_addr_reg_270, state_addr_12_reg_287, state_addr_13_reg_303, ap_sig_cseq_ST_st5_fsm_4, tmp_s_fu_154_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            state_address0 <= state_addr_13_reg_303;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            state_address0 <= state_addr_reg_270;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            state_address0 <= state_addr_12_reg_287;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            state_address0 <= tmp_s_fu_154_p1(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, state_addr_14_reg_314, ap_sig_cseq_ST_st5_fsm_4, tmp_40_fu_182_p1, tmp_45_fu_217_p1, tmp_49_fu_235_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            state_address1 <= state_addr_14_reg_314;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            state_address1 <= tmp_49_fu_235_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            state_address1 <= tmp_45_fu_217_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            state_address1 <= tmp_40_fu_182_p1(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, tmp_43_fu_202_p2, grp_fu_135_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            state_d0 <= grp_fu_135_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            state_d0 <= tmp_43_fu_202_p2;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;

    state_d1 <= (w_q1 xor state_q1);

    state_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            state_we1 <= ap_const_logic_1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_36_fu_166_p4 <= ((tmp_57_fu_163_p1 & tmp_fu_159_p1) & ap_const_lv2_0);
    tmp_37_fu_198_p1 <= std_logic_vector(resize(unsigned(tmp_36_reg_275),64));
    tmp_39_fu_176_p2 <= (c_reg_118 xor ap_const_lv3_4);
    tmp_40_fu_182_p1 <= std_logic_vector(resize(unsigned(tmp_39_fu_176_p2),64));
    tmp_41_fu_187_p2 <= (tmp_36_fu_166_p4 or ap_const_lv8_1);
    tmp_42_fu_193_p1 <= std_logic_vector(resize(unsigned(tmp_41_fu_187_p2),64));
    tmp_43_fu_202_p2 <= (w_q0 xor state_q1);
    tmp_44_fu_209_p3 <= (ap_const_lv1_1 & c_reg_118);
    tmp_45_fu_217_p1 <= std_logic_vector(resize(unsigned(tmp_44_fu_209_p3),64));
    tmp_46_fu_222_p2 <= (tmp_36_reg_275 or ap_const_lv8_2);
    tmp_47_fu_227_p1 <= std_logic_vector(resize(unsigned(tmp_46_fu_222_p2),64));
    tmp_49_fu_235_p1 <= std_logic_vector(resize(unsigned(tmp_76_cast3_fu_232_p1),64));
    tmp_50_fu_240_p2 <= (tmp_36_reg_275 or ap_const_lv8_3);
    tmp_51_fu_245_p1 <= std_logic_vector(resize(unsigned(tmp_50_fu_240_p2),64));
    tmp_57_fu_163_p1 <= r(4 - 1 downto 0);
        tmp_76_cast3_fu_232_p1 <= std_logic_vector(resize(signed(tmp_39_reg_282),4));

    tmp_fu_159_p1 <= c_reg_118(2 - 1 downto 0);
    tmp_s_fu_154_p1 <= std_logic_vector(resize(unsigned(c_reg_118),64));

    w_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1, tmp_42_fu_193_p1, tmp_37_fu_198_p1, tmp_47_fu_227_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            w_address0 <= tmp_47_fu_227_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            w_address0 <= tmp_37_fu_198_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            w_address0 <= tmp_42_fu_193_p1(8 - 1 downto 0);
        else 
            w_address0 <= "XXXXXXXX";
        end if; 
    end process;

    w_address1 <= tmp_51_fu_245_p1(8 - 1 downto 0);

    w_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1))) then 
            w_ce0 <= ap_const_logic_1;
        else 
            w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_ce1_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            w_ce1 <= ap_const_logic_1;
        else 
            w_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
