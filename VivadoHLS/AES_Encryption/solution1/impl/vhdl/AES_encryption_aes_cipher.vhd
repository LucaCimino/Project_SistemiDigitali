-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_encryption_aes_cipher is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_ce1 : OUT STD_LOGIC;
    out_r_we1 : OUT STD_LOGIC;
    out_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_ce0 : OUT STD_LOGIC;
    w_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    w_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_ce1 : OUT STD_LOGIC;
    w_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of AES_encryption_aes_cipher is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_38 : BOOLEAN;
    signal i_7_fu_270_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_478 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_79 : BOOLEAN;
    signal exitcond4_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_98_1_fu_281_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_98_1_reg_488 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_296_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_reg_498 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_98 : BOOLEAN;
    signal r_cast3_cast_fu_367_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_cast3_cast_reg_517 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_111 : BOOLEAN;
    signal r_1_fu_372_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_1_reg_522 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_8_fu_384_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_8_reg_530 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_122 : BOOLEAN;
    signal tmp_33_fu_394_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_33_reg_535 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_1_fu_423_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_108_1_reg_551 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_140 : BOOLEAN;
    signal state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_ce0 : STD_LOGIC;
    signal state_we0 : STD_LOGIC;
    signal state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_ce1 : STD_LOGIC;
    signal state_we1 : STD_LOGIC;
    signal state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_encryption_mix_columns_fu_237_ap_start : STD_LOGIC;
    signal grp_AES_encryption_mix_columns_fu_237_ap_done : STD_LOGIC;
    signal grp_AES_encryption_mix_columns_fu_237_ap_idle : STD_LOGIC;
    signal grp_AES_encryption_mix_columns_fu_237_ap_ready : STD_LOGIC;
    signal grp_AES_encryption_mix_columns_fu_237_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_encryption_mix_columns_fu_237_state_ce0 : STD_LOGIC;
    signal grp_AES_encryption_mix_columns_fu_237_state_we0 : STD_LOGIC;
    signal grp_AES_encryption_mix_columns_fu_237_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_encryption_add_round_key_fu_242_ap_start : STD_LOGIC;
    signal grp_AES_encryption_add_round_key_fu_242_ap_done : STD_LOGIC;
    signal grp_AES_encryption_add_round_key_fu_242_ap_idle : STD_LOGIC;
    signal grp_AES_encryption_add_round_key_fu_242_ap_ready : STD_LOGIC;
    signal grp_AES_encryption_add_round_key_fu_242_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_encryption_add_round_key_fu_242_state_ce0 : STD_LOGIC;
    signal grp_AES_encryption_add_round_key_fu_242_state_we0 : STD_LOGIC;
    signal grp_AES_encryption_add_round_key_fu_242_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_encryption_add_round_key_fu_242_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_encryption_add_round_key_fu_242_state_ce1 : STD_LOGIC;
    signal grp_AES_encryption_add_round_key_fu_242_state_we1 : STD_LOGIC;
    signal grp_AES_encryption_add_round_key_fu_242_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_encryption_add_round_key_fu_242_w_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_encryption_add_round_key_fu_242_w_ce0 : STD_LOGIC;
    signal grp_AES_encryption_add_round_key_fu_242_w_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_encryption_add_round_key_fu_242_w_ce1 : STD_LOGIC;
    signal grp_AES_encryption_add_round_key_fu_242_r : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_AES_encryption_shift_rows_fu_252_ap_start : STD_LOGIC;
    signal grp_AES_encryption_shift_rows_fu_252_ap_done : STD_LOGIC;
    signal grp_AES_encryption_shift_rows_fu_252_ap_idle : STD_LOGIC;
    signal grp_AES_encryption_shift_rows_fu_252_ap_ready : STD_LOGIC;
    signal grp_AES_encryption_shift_rows_fu_252_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_encryption_shift_rows_fu_252_state_ce0 : STD_LOGIC;
    signal grp_AES_encryption_shift_rows_fu_252_state_we0 : STD_LOGIC;
    signal grp_AES_encryption_shift_rows_fu_252_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AES_encryption_sub_bytes_fu_257_ap_start : STD_LOGIC;
    signal grp_AES_encryption_sub_bytes_fu_257_ap_done : STD_LOGIC;
    signal grp_AES_encryption_sub_bytes_fu_257_ap_idle : STD_LOGIC;
    signal grp_AES_encryption_sub_bytes_fu_257_ap_ready : STD_LOGIC;
    signal grp_AES_encryption_sub_bytes_fu_257_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AES_encryption_sub_bytes_fu_257_state_ce0 : STD_LOGIC;
    signal grp_AES_encryption_sub_bytes_fu_257_state_we0 : STD_LOGIC;
    signal grp_AES_encryption_sub_bytes_fu_257_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_201 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_228 : BOOLEAN;
    signal r_reg_213 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_238 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_248 : BOOLEAN;
    signal i_1_reg_225 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_258 : BOOLEAN;
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_266 : BOOLEAN;
    signal ap_reg_grp_AES_encryption_mix_columns_fu_237_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_275 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_282 : BOOLEAN;
    signal ap_reg_grp_AES_encryption_add_round_key_fu_242_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_294 : BOOLEAN;
    signal ap_reg_grp_AES_encryption_shift_rows_fu_252_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_308 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_315 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_323 : BOOLEAN;
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_330 : BOOLEAN;
    signal ap_reg_grp_AES_encryption_sub_bytes_fu_257_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_340 : BOOLEAN;
    signal exitcond2_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_353 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_360 : BOOLEAN;
    signal tmp_31_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_99_1_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_101_1_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_99_2_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_99_3_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_101_2_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_101_3_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_106_1_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_109_1_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_106_2_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_106_3_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_109_2_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_109_3_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_292_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_100_s_fu_309_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_98_s_fu_320_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_98_3_cast7_fu_333_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_100_1_fu_341_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_100_2_fu_351_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_45_fu_390_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_105_s_fu_407_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_105_1_fu_434_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_105_2_fu_444_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_108_s_fu_454_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_108_3_cast6_fu_467_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component AES_encryption_mix_columns IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_encryption_add_round_key IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        w_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        w_ce0 : OUT STD_LOGIC;
        w_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        w_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        w_ce1 : OUT STD_LOGIC;
        w_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        r : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component AES_encryption_shift_rows IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_encryption_sub_bytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AES_encryption_aes_cipher_state IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    state_U : component AES_encryption_aes_cipher_state
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_address0,
        ce0 => state_ce0,
        we0 => state_we0,
        d0 => state_d0,
        q0 => state_q0,
        address1 => state_address1,
        ce1 => state_ce1,
        we1 => state_we1,
        d1 => state_d1,
        q1 => state_q1);

    grp_AES_encryption_mix_columns_fu_237 : component AES_encryption_mix_columns
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AES_encryption_mix_columns_fu_237_ap_start,
        ap_done => grp_AES_encryption_mix_columns_fu_237_ap_done,
        ap_idle => grp_AES_encryption_mix_columns_fu_237_ap_idle,
        ap_ready => grp_AES_encryption_mix_columns_fu_237_ap_ready,
        state_address0 => grp_AES_encryption_mix_columns_fu_237_state_address0,
        state_ce0 => grp_AES_encryption_mix_columns_fu_237_state_ce0,
        state_we0 => grp_AES_encryption_mix_columns_fu_237_state_we0,
        state_d0 => grp_AES_encryption_mix_columns_fu_237_state_d0,
        state_q0 => state_q0);

    grp_AES_encryption_add_round_key_fu_242 : component AES_encryption_add_round_key
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AES_encryption_add_round_key_fu_242_ap_start,
        ap_done => grp_AES_encryption_add_round_key_fu_242_ap_done,
        ap_idle => grp_AES_encryption_add_round_key_fu_242_ap_idle,
        ap_ready => grp_AES_encryption_add_round_key_fu_242_ap_ready,
        state_address0 => grp_AES_encryption_add_round_key_fu_242_state_address0,
        state_ce0 => grp_AES_encryption_add_round_key_fu_242_state_ce0,
        state_we0 => grp_AES_encryption_add_round_key_fu_242_state_we0,
        state_d0 => grp_AES_encryption_add_round_key_fu_242_state_d0,
        state_q0 => state_q0,
        state_address1 => grp_AES_encryption_add_round_key_fu_242_state_address1,
        state_ce1 => grp_AES_encryption_add_round_key_fu_242_state_ce1,
        state_we1 => grp_AES_encryption_add_round_key_fu_242_state_we1,
        state_d1 => grp_AES_encryption_add_round_key_fu_242_state_d1,
        state_q1 => state_q1,
        w_address0 => grp_AES_encryption_add_round_key_fu_242_w_address0,
        w_ce0 => grp_AES_encryption_add_round_key_fu_242_w_ce0,
        w_q0 => w_q0,
        w_address1 => grp_AES_encryption_add_round_key_fu_242_w_address1,
        w_ce1 => grp_AES_encryption_add_round_key_fu_242_w_ce1,
        w_q1 => w_q1,
        r => grp_AES_encryption_add_round_key_fu_242_r);

    grp_AES_encryption_shift_rows_fu_252 : component AES_encryption_shift_rows
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AES_encryption_shift_rows_fu_252_ap_start,
        ap_done => grp_AES_encryption_shift_rows_fu_252_ap_done,
        ap_idle => grp_AES_encryption_shift_rows_fu_252_ap_idle,
        ap_ready => grp_AES_encryption_shift_rows_fu_252_ap_ready,
        state_address0 => grp_AES_encryption_shift_rows_fu_252_state_address0,
        state_ce0 => grp_AES_encryption_shift_rows_fu_252_state_ce0,
        state_we0 => grp_AES_encryption_shift_rows_fu_252_state_we0,
        state_d0 => grp_AES_encryption_shift_rows_fu_252_state_d0,
        state_q0 => state_q0);

    grp_AES_encryption_sub_bytes_fu_257 : component AES_encryption_sub_bytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AES_encryption_sub_bytes_fu_257_ap_start,
        ap_done => grp_AES_encryption_sub_bytes_fu_257_ap_done,
        ap_idle => grp_AES_encryption_sub_bytes_fu_257_ap_idle,
        ap_ready => grp_AES_encryption_sub_bytes_fu_257_ap_ready,
        state_address0 => grp_AES_encryption_sub_bytes_fu_257_state_address0,
        state_ce0 => grp_AES_encryption_sub_bytes_fu_257_state_ce0,
        state_we0 => grp_AES_encryption_sub_bytes_fu_257_state_we0,
        state_d0 => grp_AES_encryption_sub_bytes_fu_257_state_d0,
        state_q0 => state_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_AES_encryption_add_round_key_fu_242_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_AES_encryption_add_round_key_fu_242_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_264_p2 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
                    ap_reg_grp_AES_encryption_add_round_key_fu_242_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_AES_encryption_add_round_key_fu_242_ap_ready)) then 
                    ap_reg_grp_AES_encryption_add_round_key_fu_242_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_AES_encryption_mix_columns_fu_237_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_AES_encryption_mix_columns_fu_237_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                    ap_reg_grp_AES_encryption_mix_columns_fu_237_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_AES_encryption_mix_columns_fu_237_ap_ready)) then 
                    ap_reg_grp_AES_encryption_mix_columns_fu_237_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_AES_encryption_shift_rows_fu_252_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_AES_encryption_shift_rows_fu_252_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
                    ap_reg_grp_AES_encryption_shift_rows_fu_252_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_AES_encryption_shift_rows_fu_252_ap_ready)) then 
                    ap_reg_grp_AES_encryption_shift_rows_fu_252_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_AES_encryption_sub_bytes_fu_257_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_AES_encryption_sub_bytes_fu_257_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_361_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond2_fu_361_p2))))) then 
                    ap_reg_grp_AES_encryption_sub_bytes_fu_257_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_AES_encryption_sub_bytes_fu_257_ap_ready)) then 
                    ap_reg_grp_AES_encryption_sub_bytes_fu_257_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                i_1_reg_225 <= i_8_reg_530;
            elsif ((not((ap_const_logic_0 = grp_AES_encryption_add_round_key_fu_242_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
                i_1_reg_225 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                i_reg_201 <= i_7_reg_478;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_201 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_logic_0 = grp_AES_encryption_add_round_key_fu_242_ap_done))) then
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                    r_reg_213 <= r_1_reg_522;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                    r_reg_213 <= ap_const_lv4_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_7_reg_478 <= i_7_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                i_8_reg_530 <= i_8_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                r_1_reg_522 <= r_1_fu_372_p2;
                    r_cast3_cast_reg_517(3 downto 0) <= r_cast3_cast_fu_367_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                tmp_108_1_reg_551 <= tmp_108_1_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_lv1_0 = exitcond1_fu_378_p2))) then
                    tmp_33_reg_535(3 downto 2) <= tmp_33_fu_394_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_264_p2 = ap_const_lv1_0))) then
                tmp_98_1_reg_488 <= tmp_98_1_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                    tmp_s_reg_498(3 downto 2) <= tmp_s_fu_296_p3(3 downto 2);
            end if;
        end if;
    end process;
    tmp_s_reg_498(1 downto 0) <= "00";
    r_cast3_cast_reg_517(5 downto 4) <= "00";
    tmp_33_reg_535(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond4_fu_264_p2, exitcond1_fu_378_p2, grp_AES_encryption_mix_columns_fu_237_ap_done, grp_AES_encryption_add_round_key_fu_242_ap_done, grp_AES_encryption_shift_rows_fu_252_ap_done, grp_AES_encryption_sub_bytes_fu_257_ap_done, exitcond2_fu_361_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond4_fu_264_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_logic_0 = grp_AES_encryption_add_round_key_fu_242_ap_done))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_361_p2))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_logic_0 = grp_AES_encryption_sub_bytes_fu_257_ap_done))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_logic_0 = grp_AES_encryption_shift_rows_fu_252_ap_done))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_logic_0 = grp_AES_encryption_mix_columns_fu_237_ap_done))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                if (not((ap_const_logic_0 = grp_AES_encryption_add_round_key_fu_242_ap_done))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st14_fsm_13 => 
                if (not((ap_const_logic_0 = grp_AES_encryption_sub_bytes_fu_257_ap_done))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                if (not((ap_const_logic_0 = grp_AES_encryption_shift_rows_fu_252_ap_done))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                if (not((ap_const_logic_0 = grp_AES_encryption_add_round_key_fu_242_ap_done))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st19_fsm_18 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_378_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st19_fsm_18, exitcond1_fu_378_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((ap_const_lv1_0 = exitcond1_fu_378_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st19_fsm_18, exitcond1_fu_378_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((ap_const_lv1_0 = exitcond1_fu_378_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_111 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_122_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_122 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_140_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_140 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_228_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_228 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_238_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_238 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_248_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_248 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_258_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_258 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_266_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_266 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_275_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_275 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_282_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_282 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_294_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_294 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_308_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_308 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_315_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_315 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_323_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_323 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_330_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_330 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_340_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_340 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_353_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_353 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_360_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_360 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_38_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_38 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_79 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_98 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_275)
    begin
        if (ap_sig_275) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_282)
    begin
        if (ap_sig_282) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_111)
    begin
        if (ap_sig_111) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_248)
    begin
        if (ap_sig_248) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_360)
    begin
        if (ap_sig_360) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_315)
    begin
        if (ap_sig_315) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_330)
    begin
        if (ap_sig_330) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_294)
    begin
        if (ap_sig_294) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_258)
    begin
        if (ap_sig_258) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_122)
    begin
        if (ap_sig_122) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_38)
    begin
        if (ap_sig_38) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_140)
    begin
        if (ap_sig_140) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_266)
    begin
        if (ap_sig_266) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_79)
    begin
        if (ap_sig_79) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_98)
    begin
        if (ap_sig_98) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_228)
    begin
        if (ap_sig_228) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_238)
    begin
        if (ap_sig_238) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_340)
    begin
        if (ap_sig_340) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_353)
    begin
        if (ap_sig_353) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_308)
    begin
        if (ap_sig_308) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_323)
    begin
        if (ap_sig_323) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_378_p2 <= "1" when (i_1_reg_225 = ap_const_lv3_4) else "0";
    exitcond2_fu_361_p2 <= "1" when (r_reg_213 = ap_const_lv4_A) else "0";
    exitcond4_fu_264_p2 <= "1" when (i_reg_201 = ap_const_lv3_4) else "0";
    grp_AES_encryption_add_round_key_fu_242_ap_start <= ap_reg_grp_AES_encryption_add_round_key_fu_242_ap_start;

    grp_AES_encryption_add_round_key_fu_242_r_assign_proc : process(r_cast3_cast_reg_517, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_AES_encryption_add_round_key_fu_242_r <= ap_const_lv6_A;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_AES_encryption_add_round_key_fu_242_r <= r_cast3_cast_reg_517;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_AES_encryption_add_round_key_fu_242_r <= ap_const_lv6_0;
        else 
            grp_AES_encryption_add_round_key_fu_242_r <= "XXXXXX";
        end if; 
    end process;

    grp_AES_encryption_mix_columns_fu_237_ap_start <= ap_reg_grp_AES_encryption_mix_columns_fu_237_ap_start;
    grp_AES_encryption_shift_rows_fu_252_ap_start <= ap_reg_grp_AES_encryption_shift_rows_fu_252_ap_start;
    grp_AES_encryption_sub_bytes_fu_257_ap_start <= ap_reg_grp_AES_encryption_sub_bytes_fu_257_ap_start;
    i_7_fu_270_p2 <= std_logic_vector(unsigned(i_reg_201) + unsigned(ap_const_lv3_1));
    i_8_fu_384_p2 <= std_logic_vector(unsigned(i_1_reg_225) + unsigned(ap_const_lv3_1));

    in_r_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, tmp_31_fu_276_p1, tmp_99_2_fu_328_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            in_r_address0 <= tmp_99_2_fu_328_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            in_r_address0 <= tmp_31_fu_276_p1(4 - 1 downto 0);
        else 
            in_r_address0 <= "XXXX";
        end if; 
    end process;


    in_r_address1_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, tmp_99_1_fu_287_p1, tmp_99_3_fu_336_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            in_r_address1 <= tmp_99_3_fu_336_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            in_r_address1 <= tmp_99_1_fu_287_p1(4 - 1 downto 0);
        else 
            in_r_address1 <= "XXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_r_ce1_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            in_r_ce1 <= ap_const_logic_1;
        else 
            in_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_address0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st21_fsm_20, tmp_35_fu_418_p1, tmp_109_2_fu_462_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            out_r_address0 <= tmp_109_2_fu_462_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            out_r_address0 <= tmp_35_fu_418_p1(4 - 1 downto 0);
        else 
            out_r_address0 <= "XXXX";
        end if; 
    end process;


    out_r_address1_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st21_fsm_20, tmp_109_1_fu_429_p1, tmp_109_3_fu_470_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            out_r_address1 <= tmp_109_3_fu_470_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            out_r_address1 <= tmp_109_1_fu_429_p1(4 - 1 downto 0);
        else 
            out_r_address1 <= "XXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st21_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_ce1_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st21_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then 
            out_r_ce1 <= ap_const_logic_1;
        else 
            out_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= state_q0;
    out_r_d1 <= state_q1;

    out_r_we0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st21_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_we1_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st21_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then 
            out_r_we1 <= ap_const_logic_1;
        else 
            out_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    r_1_fu_372_p2 <= std_logic_vector(unsigned(r_reg_213) + unsigned(ap_const_lv4_1));
    r_cast3_cast_fu_367_p1 <= std_logic_vector(resize(unsigned(r_reg_213),6));

    state_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st20_fsm_19, grp_AES_encryption_mix_columns_fu_237_state_address0, grp_AES_encryption_add_round_key_fu_242_state_address0, grp_AES_encryption_shift_rows_fu_252_state_address0, grp_AES_encryption_sub_bytes_fu_257_state_address0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st14_fsm_13, tmp_32_fu_304_p1, tmp_101_2_fu_346_p1, tmp_34_fu_402_p1, tmp_106_2_fu_439_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            state_address0 <= tmp_101_2_fu_346_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            state_address0 <= tmp_32_fu_304_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            state_address0 <= tmp_106_2_fu_439_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            state_address0 <= tmp_34_fu_402_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            state_address0 <= grp_AES_encryption_sub_bytes_fu_257_state_address0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            state_address0 <= grp_AES_encryption_shift_rows_fu_252_state_address0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            state_address0 <= grp_AES_encryption_add_round_key_fu_242_state_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            state_address0 <= grp_AES_encryption_mix_columns_fu_237_state_address0;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st20_fsm_19, grp_AES_encryption_add_round_key_fu_242_state_address1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17, tmp_101_1_fu_315_p1, tmp_101_3_fu_356_p1, tmp_106_1_fu_413_p1, tmp_106_3_fu_449_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            state_address1 <= tmp_101_3_fu_356_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            state_address1 <= tmp_101_1_fu_315_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            state_address1 <= tmp_106_3_fu_449_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            state_address1 <= tmp_106_1_fu_413_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            state_address1 <= grp_AES_encryption_add_round_key_fu_242_state_address1;
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st20_fsm_19, grp_AES_encryption_mix_columns_fu_237_state_ce0, grp_AES_encryption_add_round_key_fu_242_state_ce0, grp_AES_encryption_shift_rows_fu_252_state_ce0, grp_AES_encryption_sub_bytes_fu_257_state_ce0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            state_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            state_ce0 <= grp_AES_encryption_sub_bytes_fu_257_state_ce0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            state_ce0 <= grp_AES_encryption_shift_rows_fu_252_state_ce0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            state_ce0 <= grp_AES_encryption_add_round_key_fu_242_state_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            state_ce0 <= grp_AES_encryption_mix_columns_fu_237_state_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st20_fsm_19, grp_AES_encryption_add_round_key_fu_242_state_ce1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            state_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            state_ce1 <= grp_AES_encryption_add_round_key_fu_242_state_ce1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(in_r_q0, ap_sig_cseq_ST_st3_fsm_2, grp_AES_encryption_mix_columns_fu_237_state_d0, grp_AES_encryption_add_round_key_fu_242_state_d0, grp_AES_encryption_shift_rows_fu_252_state_d0, grp_AES_encryption_sub_bytes_fu_257_state_d0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            state_d0 <= in_r_q0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            state_d0 <= grp_AES_encryption_sub_bytes_fu_257_state_d0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            state_d0 <= grp_AES_encryption_shift_rows_fu_252_state_d0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            state_d0 <= grp_AES_encryption_add_round_key_fu_242_state_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            state_d0 <= grp_AES_encryption_mix_columns_fu_237_state_d0;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(in_r_q1, ap_sig_cseq_ST_st3_fsm_2, grp_AES_encryption_add_round_key_fu_242_state_d1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            state_d1 <= in_r_q1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            state_d1 <= grp_AES_encryption_add_round_key_fu_242_state_d1;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, grp_AES_encryption_mix_columns_fu_237_state_we0, grp_AES_encryption_add_round_key_fu_242_state_we0, grp_AES_encryption_shift_rows_fu_252_state_we0, grp_AES_encryption_sub_bytes_fu_257_state_we0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            state_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            state_we0 <= grp_AES_encryption_sub_bytes_fu_257_state_we0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            state_we0 <= grp_AES_encryption_shift_rows_fu_252_state_we0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            state_we0 <= grp_AES_encryption_add_round_key_fu_242_state_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            state_we0 <= grp_AES_encryption_mix_columns_fu_237_state_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, grp_AES_encryption_add_round_key_fu_242_state_we1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            state_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            state_we1 <= grp_AES_encryption_add_round_key_fu_242_state_we1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_1_fu_341_p2 <= (tmp_s_reg_498 or ap_const_lv4_2);
    tmp_100_2_fu_351_p2 <= (tmp_s_reg_498 or ap_const_lv4_3);
    tmp_100_s_fu_309_p2 <= (tmp_s_fu_296_p3 or ap_const_lv4_1);
    tmp_101_1_fu_315_p1 <= std_logic_vector(resize(unsigned(tmp_100_s_fu_309_p2),64));
    tmp_101_2_fu_346_p1 <= std_logic_vector(resize(unsigned(tmp_100_1_fu_341_p2),64));
    tmp_101_3_fu_356_p1 <= std_logic_vector(resize(unsigned(tmp_100_2_fu_351_p2),64));
    tmp_105_1_fu_434_p2 <= (tmp_33_reg_535 or ap_const_lv4_2);
    tmp_105_2_fu_444_p2 <= (tmp_33_reg_535 or ap_const_lv4_3);
    tmp_105_s_fu_407_p2 <= (tmp_33_fu_394_p3 or ap_const_lv4_1);
    tmp_106_1_fu_413_p1 <= std_logic_vector(resize(unsigned(tmp_105_s_fu_407_p2),64));
    tmp_106_2_fu_439_p1 <= std_logic_vector(resize(unsigned(tmp_105_1_fu_434_p2),64));
    tmp_106_3_fu_449_p1 <= std_logic_vector(resize(unsigned(tmp_105_2_fu_444_p2),64));
    tmp_108_1_fu_423_p2 <= (i_1_reg_225 xor ap_const_lv3_4);
        tmp_108_3_cast6_fu_467_p1 <= std_logic_vector(resize(signed(tmp_108_1_reg_551),4));

    tmp_108_s_fu_454_p3 <= (ap_const_lv1_1 & i_1_reg_225);
    tmp_109_1_fu_429_p1 <= std_logic_vector(resize(unsigned(tmp_108_1_fu_423_p2),64));
    tmp_109_2_fu_462_p1 <= std_logic_vector(resize(unsigned(tmp_108_s_fu_454_p3),64));
    tmp_109_3_fu_470_p1 <= std_logic_vector(resize(unsigned(tmp_108_3_cast6_fu_467_p1),64));
    tmp_31_fu_276_p1 <= std_logic_vector(resize(unsigned(i_reg_201),64));
    tmp_32_fu_304_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_296_p3),64));
    tmp_33_fu_394_p3 <= (tmp_45_fu_390_p1 & ap_const_lv2_0);
    tmp_34_fu_402_p1 <= std_logic_vector(resize(unsigned(tmp_33_fu_394_p3),64));
    tmp_35_fu_418_p1 <= std_logic_vector(resize(unsigned(i_1_reg_225),64));
    tmp_45_fu_390_p1 <= i_1_reg_225(2 - 1 downto 0);
    tmp_98_1_fu_281_p2 <= (i_reg_201 xor ap_const_lv3_4);
        tmp_98_3_cast7_fu_333_p1 <= std_logic_vector(resize(signed(tmp_98_1_reg_488),4));

    tmp_98_s_fu_320_p3 <= (ap_const_lv1_1 & i_reg_201);
    tmp_99_1_fu_287_p1 <= std_logic_vector(resize(unsigned(tmp_98_1_fu_281_p2),64));
    tmp_99_2_fu_328_p1 <= std_logic_vector(resize(unsigned(tmp_98_s_fu_320_p3),64));
    tmp_99_3_fu_336_p1 <= std_logic_vector(resize(unsigned(tmp_98_3_cast7_fu_333_p1),64));
    tmp_fu_292_p1 <= i_reg_201(2 - 1 downto 0);
    tmp_s_fu_296_p3 <= (tmp_fu_292_p1 & ap_const_lv2_0);
    w_address0 <= grp_AES_encryption_add_round_key_fu_242_w_address0;
    w_address1 <= grp_AES_encryption_add_round_key_fu_242_w_address1;
    w_ce0 <= grp_AES_encryption_add_round_key_fu_242_w_ce0;
    w_ce1 <= grp_AES_encryption_add_round_key_fu_242_w_ce1;
end behav;
