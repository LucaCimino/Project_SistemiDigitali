// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AES_encryption_aes_cipher (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        in_r_address1,
        in_r_ce1,
        in_r_q1,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        out_r_address1,
        out_r_ce1,
        out_r_we1,
        out_r_d1,
        w_address0,
        w_ce0,
        w_q0,
        w_address1,
        w_ce1,
        w_q1
);

parameter    ap_ST_st1_fsm_0 = 21'b1;
parameter    ap_ST_st2_fsm_1 = 21'b10;
parameter    ap_ST_st3_fsm_2 = 21'b100;
parameter    ap_ST_st4_fsm_3 = 21'b1000;
parameter    ap_ST_st5_fsm_4 = 21'b10000;
parameter    ap_ST_st6_fsm_5 = 21'b100000;
parameter    ap_ST_st7_fsm_6 = 21'b1000000;
parameter    ap_ST_st8_fsm_7 = 21'b10000000;
parameter    ap_ST_st9_fsm_8 = 21'b100000000;
parameter    ap_ST_st10_fsm_9 = 21'b1000000000;
parameter    ap_ST_st11_fsm_10 = 21'b10000000000;
parameter    ap_ST_st12_fsm_11 = 21'b100000000000;
parameter    ap_ST_st13_fsm_12 = 21'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 21'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 21'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 21'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 21'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 21'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 21'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 21'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 21'b100000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv6_A = 6'b1010;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_2 = 4'b10;
parameter    ap_const_lv4_3 = 4'b11;
parameter    ap_const_lv4_A = 4'b1010;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] in_r_address0;
output   in_r_ce0;
input  [7:0] in_r_q0;
output  [3:0] in_r_address1;
output   in_r_ce1;
input  [7:0] in_r_q1;
output  [3:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [7:0] out_r_d0;
output  [3:0] out_r_address1;
output   out_r_ce1;
output   out_r_we1;
output  [7:0] out_r_d1;
output  [7:0] w_address0;
output   w_ce0;
input  [7:0] w_q0;
output  [7:0] w_address1;
output   w_ce1;
input  [7:0] w_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] in_r_address0;
reg in_r_ce0;
reg[3:0] in_r_address1;
reg in_r_ce1;
reg[3:0] out_r_address0;
reg out_r_ce0;
reg out_r_we0;
reg[3:0] out_r_address1;
reg out_r_ce1;
reg out_r_we1;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_38;
wire   [2:0] i_7_fu_270_p2;
reg   [2:0] i_7_reg_478;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_79;
wire   [0:0] exitcond4_fu_264_p2;
wire   [2:0] tmp_98_1_fu_281_p2;
reg   [2:0] tmp_98_1_reg_488;
wire   [3:0] tmp_s_fu_296_p3;
reg   [3:0] tmp_s_reg_498;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_98;
wire   [5:0] r_cast3_cast_fu_367_p1;
reg   [5:0] r_cast3_cast_reg_517;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_111;
wire   [3:0] r_1_fu_372_p2;
reg   [3:0] r_1_reg_522;
wire   [2:0] i_8_fu_384_p2;
reg   [2:0] i_8_reg_530;
reg    ap_sig_cseq_ST_st19_fsm_18;
reg    ap_sig_122;
wire   [3:0] tmp_33_fu_394_p3;
reg   [3:0] tmp_33_reg_535;
wire   [0:0] exitcond1_fu_378_p2;
wire   [2:0] tmp_108_1_fu_423_p2;
reg   [2:0] tmp_108_1_reg_551;
reg    ap_sig_cseq_ST_st20_fsm_19;
reg    ap_sig_140;
reg   [3:0] state_address0;
reg    state_ce0;
reg    state_we0;
reg   [7:0] state_d0;
wire   [7:0] state_q0;
reg   [3:0] state_address1;
reg    state_ce1;
reg    state_we1;
reg   [7:0] state_d1;
wire   [7:0] state_q1;
wire    grp_AES_encryption_mix_columns_fu_237_ap_start;
wire    grp_AES_encryption_mix_columns_fu_237_ap_done;
wire    grp_AES_encryption_mix_columns_fu_237_ap_idle;
wire    grp_AES_encryption_mix_columns_fu_237_ap_ready;
wire   [3:0] grp_AES_encryption_mix_columns_fu_237_state_address0;
wire    grp_AES_encryption_mix_columns_fu_237_state_ce0;
wire    grp_AES_encryption_mix_columns_fu_237_state_we0;
wire   [7:0] grp_AES_encryption_mix_columns_fu_237_state_d0;
wire    grp_AES_encryption_add_round_key_fu_242_ap_start;
wire    grp_AES_encryption_add_round_key_fu_242_ap_done;
wire    grp_AES_encryption_add_round_key_fu_242_ap_idle;
wire    grp_AES_encryption_add_round_key_fu_242_ap_ready;
wire   [3:0] grp_AES_encryption_add_round_key_fu_242_state_address0;
wire    grp_AES_encryption_add_round_key_fu_242_state_ce0;
wire    grp_AES_encryption_add_round_key_fu_242_state_we0;
wire   [7:0] grp_AES_encryption_add_round_key_fu_242_state_d0;
wire   [3:0] grp_AES_encryption_add_round_key_fu_242_state_address1;
wire    grp_AES_encryption_add_round_key_fu_242_state_ce1;
wire    grp_AES_encryption_add_round_key_fu_242_state_we1;
wire   [7:0] grp_AES_encryption_add_round_key_fu_242_state_d1;
wire   [7:0] grp_AES_encryption_add_round_key_fu_242_w_address0;
wire    grp_AES_encryption_add_round_key_fu_242_w_ce0;
wire   [7:0] grp_AES_encryption_add_round_key_fu_242_w_address1;
wire    grp_AES_encryption_add_round_key_fu_242_w_ce1;
reg   [5:0] grp_AES_encryption_add_round_key_fu_242_r;
wire    grp_AES_encryption_shift_rows_fu_252_ap_start;
wire    grp_AES_encryption_shift_rows_fu_252_ap_done;
wire    grp_AES_encryption_shift_rows_fu_252_ap_idle;
wire    grp_AES_encryption_shift_rows_fu_252_ap_ready;
wire   [3:0] grp_AES_encryption_shift_rows_fu_252_state_address0;
wire    grp_AES_encryption_shift_rows_fu_252_state_ce0;
wire    grp_AES_encryption_shift_rows_fu_252_state_we0;
wire   [7:0] grp_AES_encryption_shift_rows_fu_252_state_d0;
wire    grp_AES_encryption_sub_bytes_fu_257_ap_start;
wire    grp_AES_encryption_sub_bytes_fu_257_ap_done;
wire    grp_AES_encryption_sub_bytes_fu_257_ap_idle;
wire    grp_AES_encryption_sub_bytes_fu_257_ap_ready;
wire   [3:0] grp_AES_encryption_sub_bytes_fu_257_state_address0;
wire    grp_AES_encryption_sub_bytes_fu_257_state_ce0;
wire    grp_AES_encryption_sub_bytes_fu_257_state_we0;
wire   [7:0] grp_AES_encryption_sub_bytes_fu_257_state_d0;
reg   [2:0] i_reg_201;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_228;
reg   [3:0] r_reg_213;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_238;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_248;
reg   [2:0] i_1_reg_225;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_258;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_266;
reg    ap_reg_grp_AES_encryption_mix_columns_fu_237_ap_start;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_275;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_282;
reg    ap_reg_grp_AES_encryption_add_round_key_fu_242_ap_start;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_294;
reg    ap_reg_grp_AES_encryption_shift_rows_fu_252_ap_start;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_308;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_315;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_323;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_330;
reg    ap_reg_grp_AES_encryption_sub_bytes_fu_257_ap_start;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_340;
wire   [0:0] exitcond2_fu_361_p2;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_353;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_360;
wire   [63:0] tmp_31_fu_276_p1;
wire   [63:0] tmp_99_1_fu_287_p1;
wire   [63:0] tmp_32_fu_304_p1;
wire   [63:0] tmp_101_1_fu_315_p1;
wire   [63:0] tmp_99_2_fu_328_p1;
wire   [63:0] tmp_99_3_fu_336_p1;
wire   [63:0] tmp_101_2_fu_346_p1;
wire   [63:0] tmp_101_3_fu_356_p1;
wire   [63:0] tmp_34_fu_402_p1;
wire   [63:0] tmp_106_1_fu_413_p1;
wire   [63:0] tmp_35_fu_418_p1;
wire   [63:0] tmp_109_1_fu_429_p1;
wire   [63:0] tmp_106_2_fu_439_p1;
wire   [63:0] tmp_106_3_fu_449_p1;
wire   [63:0] tmp_109_2_fu_462_p1;
wire   [63:0] tmp_109_3_fu_470_p1;
wire   [1:0] tmp_fu_292_p1;
wire   [3:0] tmp_100_s_fu_309_p2;
wire   [3:0] tmp_98_s_fu_320_p3;
wire  signed [3:0] tmp_98_3_cast7_fu_333_p1;
wire   [3:0] tmp_100_1_fu_341_p2;
wire   [3:0] tmp_100_2_fu_351_p2;
wire   [1:0] tmp_45_fu_390_p1;
wire   [3:0] tmp_105_s_fu_407_p2;
wire   [3:0] tmp_105_1_fu_434_p2;
wire   [3:0] tmp_105_2_fu_444_p2;
wire   [3:0] tmp_108_s_fu_454_p3;
wire  signed [3:0] tmp_108_3_cast6_fu_467_p1;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'b1;
#0 ap_reg_grp_AES_encryption_mix_columns_fu_237_ap_start = 1'b0;
#0 ap_reg_grp_AES_encryption_add_round_key_fu_242_ap_start = 1'b0;
#0 ap_reg_grp_AES_encryption_shift_rows_fu_252_ap_start = 1'b0;
#0 ap_reg_grp_AES_encryption_sub_bytes_fu_257_ap_start = 1'b0;
end

AES_encryption_aes_cipher_state #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
state_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(state_address0),
    .ce0(state_ce0),
    .we0(state_we0),
    .d0(state_d0),
    .q0(state_q0),
    .address1(state_address1),
    .ce1(state_ce1),
    .we1(state_we1),
    .d1(state_d1),
    .q1(state_q1)
);

AES_encryption_mix_columns grp_AES_encryption_mix_columns_fu_237(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AES_encryption_mix_columns_fu_237_ap_start),
    .ap_done(grp_AES_encryption_mix_columns_fu_237_ap_done),
    .ap_idle(grp_AES_encryption_mix_columns_fu_237_ap_idle),
    .ap_ready(grp_AES_encryption_mix_columns_fu_237_ap_ready),
    .state_address0(grp_AES_encryption_mix_columns_fu_237_state_address0),
    .state_ce0(grp_AES_encryption_mix_columns_fu_237_state_ce0),
    .state_we0(grp_AES_encryption_mix_columns_fu_237_state_we0),
    .state_d0(grp_AES_encryption_mix_columns_fu_237_state_d0),
    .state_q0(state_q0)
);

AES_encryption_add_round_key grp_AES_encryption_add_round_key_fu_242(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AES_encryption_add_round_key_fu_242_ap_start),
    .ap_done(grp_AES_encryption_add_round_key_fu_242_ap_done),
    .ap_idle(grp_AES_encryption_add_round_key_fu_242_ap_idle),
    .ap_ready(grp_AES_encryption_add_round_key_fu_242_ap_ready),
    .state_address0(grp_AES_encryption_add_round_key_fu_242_state_address0),
    .state_ce0(grp_AES_encryption_add_round_key_fu_242_state_ce0),
    .state_we0(grp_AES_encryption_add_round_key_fu_242_state_we0),
    .state_d0(grp_AES_encryption_add_round_key_fu_242_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_AES_encryption_add_round_key_fu_242_state_address1),
    .state_ce1(grp_AES_encryption_add_round_key_fu_242_state_ce1),
    .state_we1(grp_AES_encryption_add_round_key_fu_242_state_we1),
    .state_d1(grp_AES_encryption_add_round_key_fu_242_state_d1),
    .state_q1(state_q1),
    .w_address0(grp_AES_encryption_add_round_key_fu_242_w_address0),
    .w_ce0(grp_AES_encryption_add_round_key_fu_242_w_ce0),
    .w_q0(w_q0),
    .w_address1(grp_AES_encryption_add_round_key_fu_242_w_address1),
    .w_ce1(grp_AES_encryption_add_round_key_fu_242_w_ce1),
    .w_q1(w_q1),
    .r(grp_AES_encryption_add_round_key_fu_242_r)
);

AES_encryption_shift_rows grp_AES_encryption_shift_rows_fu_252(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AES_encryption_shift_rows_fu_252_ap_start),
    .ap_done(grp_AES_encryption_shift_rows_fu_252_ap_done),
    .ap_idle(grp_AES_encryption_shift_rows_fu_252_ap_idle),
    .ap_ready(grp_AES_encryption_shift_rows_fu_252_ap_ready),
    .state_address0(grp_AES_encryption_shift_rows_fu_252_state_address0),
    .state_ce0(grp_AES_encryption_shift_rows_fu_252_state_ce0),
    .state_we0(grp_AES_encryption_shift_rows_fu_252_state_we0),
    .state_d0(grp_AES_encryption_shift_rows_fu_252_state_d0),
    .state_q0(state_q0)
);

AES_encryption_sub_bytes grp_AES_encryption_sub_bytes_fu_257(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AES_encryption_sub_bytes_fu_257_ap_start),
    .ap_done(grp_AES_encryption_sub_bytes_fu_257_ap_done),
    .ap_idle(grp_AES_encryption_sub_bytes_fu_257_ap_idle),
    .ap_ready(grp_AES_encryption_sub_bytes_fu_257_ap_ready),
    .state_address0(grp_AES_encryption_sub_bytes_fu_257_state_address0),
    .state_ce0(grp_AES_encryption_sub_bytes_fu_257_state_ce0),
    .state_we0(grp_AES_encryption_sub_bytes_fu_257_state_we0),
    .state_d0(grp_AES_encryption_sub_bytes_fu_257_state_d0),
    .state_q0(state_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_AES_encryption_add_round_key_fu_242_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st12_fsm_11) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond4_fu_264_p2 == 1'b0)) | (1'b1 == ap_sig_cseq_ST_st17_fsm_16))) begin
            ap_reg_grp_AES_encryption_add_round_key_fu_242_ap_start <= 1'b1;
        end else if ((1'b1 == grp_AES_encryption_add_round_key_fu_242_ap_ready)) begin
            ap_reg_grp_AES_encryption_add_round_key_fu_242_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_AES_encryption_mix_columns_fu_237_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
            ap_reg_grp_AES_encryption_mix_columns_fu_237_ap_start <= 1'b1;
        end else if ((1'b1 == grp_AES_encryption_mix_columns_fu_237_ap_ready)) begin
            ap_reg_grp_AES_encryption_mix_columns_fu_237_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_AES_encryption_shift_rows_fu_252_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st8_fsm_7) | (1'b1 == ap_sig_cseq_ST_st15_fsm_14))) begin
            ap_reg_grp_AES_encryption_shift_rows_fu_252_ap_start <= 1'b1;
        end else if ((1'b1 == grp_AES_encryption_shift_rows_fu_252_ap_ready)) begin
            ap_reg_grp_AES_encryption_shift_rows_fu_252_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_AES_encryption_sub_bytes_fu_257_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond2_fu_361_p2)) | ((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond2_fu_361_p2)))) begin
            ap_reg_grp_AES_encryption_sub_bytes_fu_257_ap_start <= 1'b1;
        end else if ((1'b1 == grp_AES_encryption_sub_bytes_fu_257_ap_ready)) begin
            ap_reg_grp_AES_encryption_sub_bytes_fu_257_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        i_1_reg_225 <= i_8_reg_530;
    end else if ((~(1'b0 == grp_AES_encryption_add_round_key_fu_242_ap_done) & (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        i_1_reg_225 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        i_reg_201 <= i_7_reg_478;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_201 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (~(1'b0 == grp_AES_encryption_add_round_key_fu_242_ap_done)) begin
        if ((1'b1 == ap_sig_cseq_ST_st13_fsm_12)) begin
            r_reg_213 <= r_1_reg_522;
        end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
            r_reg_213 <= ap_const_lv4_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_7_reg_478 <= i_7_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        i_8_reg_530 <= i_8_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        r_1_reg_522 <= r_1_fu_372_p2;
        r_cast3_cast_reg_517[3 : 0] <= r_cast3_cast_fu_367_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        tmp_108_1_reg_551 <= tmp_108_1_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st19_fsm_18) & (1'b0 == exitcond1_fu_378_p2))) begin
        tmp_33_reg_535[3 : 2] <= tmp_33_fu_394_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond4_fu_264_p2 == 1'b0))) begin
        tmp_98_1_reg_488 <= tmp_98_1_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        tmp_s_reg_498[3 : 2] <= tmp_s_fu_296_p3[3 : 2];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st19_fsm_18) & ~(1'b0 == exitcond1_fu_378_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st19_fsm_18) & ~(1'b0 == exitcond1_fu_378_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_275) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_282) begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_111) begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_248) begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_360) begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_315) begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_330) begin
        ap_sig_cseq_ST_st16_fsm_15 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_294) begin
        ap_sig_cseq_ST_st17_fsm_16 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_258) begin
        ap_sig_cseq_ST_st18_fsm_17 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_122) begin
        ap_sig_cseq_ST_st19_fsm_18 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_18 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_38) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_140) begin
        ap_sig_cseq_ST_st20_fsm_19 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st20_fsm_19 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_266) begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_79) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_98) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_228) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_238) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_340) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_353) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_308) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_323) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        grp_AES_encryption_add_round_key_fu_242_r = ap_const_lv6_A;
    end else if ((1'b1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        grp_AES_encryption_add_round_key_fu_242_r = r_cast3_cast_reg_517;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        grp_AES_encryption_add_round_key_fu_242_r = ap_const_lv6_0;
    end else begin
        grp_AES_encryption_add_round_key_fu_242_r = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        in_r_address0 = tmp_99_2_fu_328_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        in_r_address0 = tmp_31_fu_276_p1;
    end else begin
        in_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        in_r_address1 = tmp_99_3_fu_336_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        in_r_address1 = tmp_99_1_fu_287_p1;
    end else begin
        in_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        in_r_ce1 = 1'b1;
    end else begin
        in_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        out_r_address0 = tmp_109_2_fu_462_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        out_r_address0 = tmp_35_fu_418_p1;
    end else begin
        out_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        out_r_address1 = tmp_109_3_fu_470_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        out_r_address1 = tmp_109_1_fu_429_p1;
    end else begin
        out_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st20_fsm_19) | (1'b1 == ap_sig_cseq_ST_st21_fsm_20))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st20_fsm_19) | (1'b1 == ap_sig_cseq_ST_st21_fsm_20))) begin
        out_r_ce1 = 1'b1;
    end else begin
        out_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st20_fsm_19) | (1'b1 == ap_sig_cseq_ST_st21_fsm_20))) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st20_fsm_19) | (1'b1 == ap_sig_cseq_ST_st21_fsm_20))) begin
        out_r_we1 = 1'b1;
    end else begin
        out_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        state_address0 = tmp_101_2_fu_346_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        state_address0 = tmp_32_fu_304_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        state_address0 = tmp_106_2_fu_439_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        state_address0 = tmp_34_fu_402_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        state_address0 = grp_AES_encryption_sub_bytes_fu_257_state_address0;
    end else if (((1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        state_address0 = grp_AES_encryption_shift_rows_fu_252_state_address0;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        state_address0 = grp_AES_encryption_add_round_key_fu_242_state_address0;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        state_address0 = grp_AES_encryption_mix_columns_fu_237_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        state_address1 = tmp_101_3_fu_356_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        state_address1 = tmp_101_1_fu_315_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        state_address1 = tmp_106_3_fu_449_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        state_address1 = tmp_106_1_fu_413_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        state_address1 = grp_AES_encryption_add_round_key_fu_242_state_address1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st19_fsm_18) | (1'b1 == ap_sig_cseq_ST_st20_fsm_19) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        state_ce0 = 1'b1;
    end else if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        state_ce0 = grp_AES_encryption_sub_bytes_fu_257_state_ce0;
    end else if (((1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        state_ce0 = grp_AES_encryption_shift_rows_fu_252_state_ce0;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        state_ce0 = grp_AES_encryption_add_round_key_fu_242_state_ce0;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        state_ce0 = grp_AES_encryption_mix_columns_fu_237_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st19_fsm_18) | (1'b1 == ap_sig_cseq_ST_st20_fsm_19) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        state_ce1 = 1'b1;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        state_ce1 = grp_AES_encryption_add_round_key_fu_242_state_ce1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        state_d0 = in_r_q0;
    end else if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        state_d0 = grp_AES_encryption_sub_bytes_fu_257_state_d0;
    end else if (((1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        state_d0 = grp_AES_encryption_shift_rows_fu_252_state_d0;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        state_d0 = grp_AES_encryption_add_round_key_fu_242_state_d0;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        state_d0 = grp_AES_encryption_mix_columns_fu_237_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        state_d1 = in_r_q1;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        state_d1 = grp_AES_encryption_add_round_key_fu_242_state_d1;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        state_we0 = 1'b1;
    end else if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        state_we0 = grp_AES_encryption_sub_bytes_fu_257_state_we0;
    end else if (((1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        state_we0 = grp_AES_encryption_shift_rows_fu_252_state_we0;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        state_we0 = grp_AES_encryption_add_round_key_fu_242_state_we0;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        state_we0 = grp_AES_encryption_mix_columns_fu_237_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        state_we1 = 1'b1;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        state_we1 = grp_AES_encryption_add_round_key_fu_242_state_we1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond4_fu_264_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st5_fsm_4 : begin
            if (~(1'b0 == grp_AES_encryption_add_round_key_fu_242_ap_done)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st6_fsm_5 : begin
            if (~(1'b0 == exitcond2_fu_361_p2)) begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : begin
            if (~(1'b0 == grp_AES_encryption_sub_bytes_fu_257_ap_done)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            if (~(1'b0 == grp_AES_encryption_shift_rows_fu_252_ap_done)) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            if (~(1'b0 == grp_AES_encryption_mix_columns_fu_237_ap_done)) begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            if (~(1'b0 == grp_AES_encryption_add_round_key_fu_242_ap_done)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st13_fsm_12;
            end
        end
        ap_ST_st14_fsm_13 : begin
            if (~(1'b0 == grp_AES_encryption_sub_bytes_fu_257_ap_done)) begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            if (~(1'b0 == grp_AES_encryption_shift_rows_fu_252_ap_done)) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            if (~(1'b0 == grp_AES_encryption_add_round_key_fu_242_ap_done)) begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end else begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end
        end
        ap_ST_st19_fsm_18 : begin
            if (~(1'b0 == exitcond1_fu_378_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st20_fsm_19;
            end
        end
        ap_ST_st20_fsm_19 : begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_111 = (1'b1 == ap_CS_fsm[ap_const_lv32_B]);
end

always @ (*) begin
    ap_sig_122 = (1'b1 == ap_CS_fsm[ap_const_lv32_12]);
end

always @ (*) begin
    ap_sig_140 = (1'b1 == ap_CS_fsm[ap_const_lv32_13]);
end

always @ (*) begin
    ap_sig_228 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_238 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_248 = (1'b1 == ap_CS_fsm[ap_const_lv32_C]);
end

always @ (*) begin
    ap_sig_258 = (1'b1 == ap_CS_fsm[ap_const_lv32_11]);
end

always @ (*) begin
    ap_sig_266 = (1'b1 == ap_CS_fsm[ap_const_lv32_14]);
end

always @ (*) begin
    ap_sig_275 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_282 = (1'b1 == ap_CS_fsm[ap_const_lv32_A]);
end

always @ (*) begin
    ap_sig_294 = (1'b1 == ap_CS_fsm[ap_const_lv32_10]);
end

always @ (*) begin
    ap_sig_308 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_315 = (1'b1 == ap_CS_fsm[ap_const_lv32_E]);
end

always @ (*) begin
    ap_sig_323 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_330 = (1'b1 == ap_CS_fsm[ap_const_lv32_F]);
end

always @ (*) begin
    ap_sig_340 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_353 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_360 = (1'b1 == ap_CS_fsm[ap_const_lv32_D]);
end

always @ (*) begin
    ap_sig_38 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_79 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_98 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign exitcond1_fu_378_p2 = ((i_1_reg_225 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign exitcond2_fu_361_p2 = ((r_reg_213 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign exitcond4_fu_264_p2 = ((i_reg_201 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign grp_AES_encryption_add_round_key_fu_242_ap_start = ap_reg_grp_AES_encryption_add_round_key_fu_242_ap_start;

assign grp_AES_encryption_mix_columns_fu_237_ap_start = ap_reg_grp_AES_encryption_mix_columns_fu_237_ap_start;

assign grp_AES_encryption_shift_rows_fu_252_ap_start = ap_reg_grp_AES_encryption_shift_rows_fu_252_ap_start;

assign grp_AES_encryption_sub_bytes_fu_257_ap_start = ap_reg_grp_AES_encryption_sub_bytes_fu_257_ap_start;

assign i_7_fu_270_p2 = (i_reg_201 + ap_const_lv3_1);

assign i_8_fu_384_p2 = (i_1_reg_225 + ap_const_lv3_1);

assign out_r_d0 = state_q0;

assign out_r_d1 = state_q1;

assign r_1_fu_372_p2 = (r_reg_213 + ap_const_lv4_1);

assign r_cast3_cast_fu_367_p1 = r_reg_213;

assign tmp_100_1_fu_341_p2 = (tmp_s_reg_498 | ap_const_lv4_2);

assign tmp_100_2_fu_351_p2 = (tmp_s_reg_498 | ap_const_lv4_3);

assign tmp_100_s_fu_309_p2 = (tmp_s_fu_296_p3 | ap_const_lv4_1);

assign tmp_101_1_fu_315_p1 = tmp_100_s_fu_309_p2;

assign tmp_101_2_fu_346_p1 = tmp_100_1_fu_341_p2;

assign tmp_101_3_fu_356_p1 = tmp_100_2_fu_351_p2;

assign tmp_105_1_fu_434_p2 = (tmp_33_reg_535 | ap_const_lv4_2);

assign tmp_105_2_fu_444_p2 = (tmp_33_reg_535 | ap_const_lv4_3);

assign tmp_105_s_fu_407_p2 = (tmp_33_fu_394_p3 | ap_const_lv4_1);

assign tmp_106_1_fu_413_p1 = tmp_105_s_fu_407_p2;

assign tmp_106_2_fu_439_p1 = tmp_105_1_fu_434_p2;

assign tmp_106_3_fu_449_p1 = tmp_105_2_fu_444_p2;

assign tmp_108_1_fu_423_p2 = (i_1_reg_225 ^ ap_const_lv3_4);

assign tmp_108_3_cast6_fu_467_p1 = $signed(tmp_108_1_reg_551);

assign tmp_108_s_fu_454_p3 = {{1'b1}, {i_1_reg_225}};

assign tmp_109_1_fu_429_p1 = tmp_108_1_fu_423_p2;

assign tmp_109_2_fu_462_p1 = tmp_108_s_fu_454_p3;

assign tmp_109_3_fu_470_p1 = $unsigned(tmp_108_3_cast6_fu_467_p1);

assign tmp_31_fu_276_p1 = i_reg_201;

assign tmp_32_fu_304_p1 = tmp_s_fu_296_p3;

assign tmp_33_fu_394_p3 = {{tmp_45_fu_390_p1}, {ap_const_lv2_0}};

assign tmp_34_fu_402_p1 = tmp_33_fu_394_p3;

assign tmp_35_fu_418_p1 = i_1_reg_225;

assign tmp_45_fu_390_p1 = i_1_reg_225[1:0];

assign tmp_98_1_fu_281_p2 = (i_reg_201 ^ ap_const_lv3_4);

assign tmp_98_3_cast7_fu_333_p1 = $signed(tmp_98_1_reg_488);

assign tmp_98_s_fu_320_p3 = {{1'b1}, {i_reg_201}};

assign tmp_99_1_fu_287_p1 = tmp_98_1_fu_281_p2;

assign tmp_99_2_fu_328_p1 = tmp_98_s_fu_320_p3;

assign tmp_99_3_fu_336_p1 = $unsigned(tmp_98_3_cast7_fu_333_p1);

assign tmp_fu_292_p1 = i_reg_201[1:0];

assign tmp_s_fu_296_p3 = {{tmp_fu_292_p1}, {ap_const_lv2_0}};

assign w_address0 = grp_AES_encryption_add_round_key_fu_242_w_address0;

assign w_address1 = grp_AES_encryption_add_round_key_fu_242_w_address1;

assign w_ce0 = grp_AES_encryption_add_round_key_fu_242_w_ce0;

assign w_ce1 = grp_AES_encryption_add_round_key_fu_242_w_ce1;

always @ (posedge ap_clk) begin
    tmp_s_reg_498[1:0] <= 2'b00;
    r_cast3_cast_reg_517[5:4] <= 2'b00;
    tmp_33_reg_535[1:0] <= 2'b00;
end

endmodule //AES_encryption_aes_cipher
