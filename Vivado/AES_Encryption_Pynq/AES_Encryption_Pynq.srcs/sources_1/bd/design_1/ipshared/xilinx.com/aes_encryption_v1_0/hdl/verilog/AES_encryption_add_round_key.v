// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AES_encryption_add_round_key (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        w_address0,
        w_ce0,
        w_q0,
        w_address1,
        w_ce1,
        w_q1,
        r
);

parameter    ap_ST_st1_fsm_0 = 5'b1;
parameter    ap_ST_st2_fsm_1 = 5'b10;
parameter    ap_ST_st3_fsm_2 = 5'b100;
parameter    ap_ST_st4_fsm_3 = 5'b1000;
parameter    ap_ST_st5_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv8_2 = 8'b10;
parameter    ap_const_lv8_3 = 8'b11;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [7:0] w_address0;
output   w_ce0;
input  [7:0] w_q0;
output  [7:0] w_address1;
output   w_ce1;
input  [7:0] w_q1;
input  [5:0] r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] w_address0;
reg w_ce0;
reg w_ce1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_22;
reg   [7:0] reg_130;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_56;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_63;
wire   [2:0] c_1_fu_148_p2;
reg   [2:0] c_1_reg_265;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_77;
reg   [3:0] state_addr_reg_270;
wire   [0:0] exitcond_fu_142_p2;
wire   [7:0] tmp_36_fu_166_p4;
reg   [7:0] tmp_36_reg_275;
wire   [2:0] tmp_39_fu_176_p2;
reg   [2:0] tmp_39_reg_282;
reg   [3:0] state_addr_12_reg_287;
reg   [3:0] state_addr_13_reg_303;
reg   [3:0] state_addr_14_reg_314;
reg   [2:0] c_reg_118;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_111;
wire   [63:0] tmp_s_fu_154_p1;
wire   [63:0] tmp_40_fu_182_p1;
wire   [63:0] tmp_42_fu_193_p1;
wire   [63:0] tmp_37_fu_198_p1;
wire   [63:0] tmp_45_fu_217_p1;
wire   [63:0] tmp_47_fu_227_p1;
wire   [63:0] tmp_49_fu_235_p1;
wire   [63:0] tmp_51_fu_245_p1;
wire   [7:0] tmp_43_fu_202_p2;
wire   [7:0] grp_fu_135_p2;
wire   [3:0] tmp_57_fu_163_p1;
wire   [1:0] tmp_fu_159_p1;
wire   [7:0] tmp_41_fu_187_p2;
wire   [3:0] tmp_44_fu_209_p3;
wire   [7:0] tmp_46_fu_222_p2;
wire  signed [3:0] tmp_76_cast3_fu_232_p1;
wire   [7:0] tmp_50_fu_240_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        c_reg_118 <= c_1_reg_265;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        c_reg_118 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        reg_130 <= state_q1;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        reg_130 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        c_1_reg_265 <= c_1_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_142_p2 == 1'b0))) begin
        state_addr_12_reg_287[2 : 0] <= tmp_40_fu_182_p1[2 : 0];
        state_addr_reg_270[2 : 0] <= tmp_s_fu_154_p1[2 : 0];
        tmp_36_reg_275[7 : 2] <= tmp_36_fu_166_p4[7 : 2];
        tmp_39_reg_282 <= tmp_39_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        state_addr_13_reg_303[2 : 0] <= tmp_45_fu_217_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        state_addr_14_reg_314 <= tmp_49_fu_235_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_142_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_142_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_77) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_56) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_63) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_111) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        state_address0 = state_addr_13_reg_303;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        state_address0 = state_addr_reg_270;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        state_address0 = state_addr_12_reg_287;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        state_address0 = tmp_s_fu_154_p1;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        state_address1 = state_addr_14_reg_314;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        state_address1 = tmp_49_fu_235_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        state_address1 = tmp_45_fu_217_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        state_address1 = tmp_40_fu_182_p1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        state_d0 = grp_fu_135_p2;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        state_d0 = tmp_43_fu_202_p2;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        w_address0 = tmp_47_fu_227_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        w_address0 = tmp_37_fu_198_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        w_address0 = tmp_42_fu_193_p1;
    end else begin
        w_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st2_fsm_1))) begin
        w_ce0 = 1'b1;
    end else begin
        w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        w_ce1 = 1'b1;
    end else begin
        w_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond_fu_142_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_111 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_22 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_56 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_63 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_77 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign c_1_fu_148_p2 = (c_reg_118 + ap_const_lv3_1);

assign exitcond_fu_142_p2 = ((c_reg_118 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign grp_fu_135_p2 = (w_q0 ^ reg_130);

assign state_d1 = (w_q1 ^ state_q1);

assign tmp_36_fu_166_p4 = {{{tmp_57_fu_163_p1}, {tmp_fu_159_p1}}, {ap_const_lv2_0}};

assign tmp_37_fu_198_p1 = tmp_36_reg_275;

assign tmp_39_fu_176_p2 = (c_reg_118 ^ ap_const_lv3_4);

assign tmp_40_fu_182_p1 = tmp_39_fu_176_p2;

assign tmp_41_fu_187_p2 = (tmp_36_fu_166_p4 | ap_const_lv8_1);

assign tmp_42_fu_193_p1 = tmp_41_fu_187_p2;

assign tmp_43_fu_202_p2 = (w_q0 ^ state_q1);

assign tmp_44_fu_209_p3 = {{1'b1}, {c_reg_118}};

assign tmp_45_fu_217_p1 = tmp_44_fu_209_p3;

assign tmp_46_fu_222_p2 = (tmp_36_reg_275 | ap_const_lv8_2);

assign tmp_47_fu_227_p1 = tmp_46_fu_222_p2;

assign tmp_49_fu_235_p1 = $unsigned(tmp_76_cast3_fu_232_p1);

assign tmp_50_fu_240_p2 = (tmp_36_reg_275 | ap_const_lv8_3);

assign tmp_51_fu_245_p1 = tmp_50_fu_240_p2;

assign tmp_57_fu_163_p1 = r[3:0];

assign tmp_76_cast3_fu_232_p1 = $signed(tmp_39_reg_282);

assign tmp_fu_159_p1 = c_reg_118[1:0];

assign tmp_s_fu_154_p1 = c_reg_118;

assign w_address1 = tmp_51_fu_245_p1;

always @ (posedge ap_clk) begin
    state_addr_reg_270[3] <= 1'b0;
    tmp_36_reg_275[1:0] <= 2'b00;
    state_addr_12_reg_287[3] <= 1'b0;
    state_addr_13_reg_303[3] <= 1'b1;
end

endmodule //AES_encryption_add_round_key
