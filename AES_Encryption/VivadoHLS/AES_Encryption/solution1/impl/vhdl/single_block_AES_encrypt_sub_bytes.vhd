-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity single_block_AES_encrypt_sub_bytes is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    state_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_4_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_5_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_6_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_7_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_8_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_9_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_10_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_11_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_12_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_13_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_14_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_15_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of single_block_AES_encrypt_sub_bytes is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_18 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal s_box_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce0 : STD_LOGIC;
    signal s_box_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce1 : STD_LOGIC;
    signal s_box_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce2 : STD_LOGIC;
    signal s_box_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce3 : STD_LOGIC;
    signal s_box_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address4 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce4 : STD_LOGIC;
    signal s_box_q4 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address5 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce5 : STD_LOGIC;
    signal s_box_q5 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address6 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce6 : STD_LOGIC;
    signal s_box_q6 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address7 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce7 : STD_LOGIC;
    signal s_box_q7 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address8 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce8 : STD_LOGIC;
    signal s_box_q8 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address9 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce9 : STD_LOGIC;
    signal s_box_q9 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address10 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce10 : STD_LOGIC;
    signal s_box_q10 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address11 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce11 : STD_LOGIC;
    signal s_box_q11 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address12 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce12 : STD_LOGIC;
    signal s_box_q12 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address13 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce13 : STD_LOGIC;
    signal s_box_q13 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address14 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce14 : STD_LOGIC;
    signal s_box_q14 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_address15 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_box_ce15 : STD_LOGIC;
    signal s_box_q15 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_0_1_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_0_2_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_0_3_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_1_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_1_1_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_1_2_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_1_3_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_2_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_2_1_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_2_2_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_2_3_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_3_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_3_1_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_3_2_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_3_3_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;

    component single_block_AES_encrypt_sub_bytes_s_box IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address4 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address5 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address6 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address7 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address8 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address9 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address10 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address11 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address12 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address13 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address14 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address15 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    s_box_U : component single_block_AES_encrypt_sub_bytes_s_box
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => s_box_address0,
        ce0 => s_box_ce0,
        q0 => s_box_q0,
        address1 => s_box_address1,
        ce1 => s_box_ce1,
        q1 => s_box_q1,
        address2 => s_box_address2,
        ce2 => s_box_ce2,
        q2 => s_box_q2,
        address3 => s_box_address3,
        ce3 => s_box_ce3,
        q3 => s_box_q3,
        address4 => s_box_address4,
        ce4 => s_box_ce4,
        q4 => s_box_q4,
        address5 => s_box_address5,
        ce5 => s_box_ce5,
        q5 => s_box_q5,
        address6 => s_box_address6,
        ce6 => s_box_ce6,
        q6 => s_box_q6,
        address7 => s_box_address7,
        ce7 => s_box_ce7,
        q7 => s_box_q7,
        address8 => s_box_address8,
        ce8 => s_box_ce8,
        q8 => s_box_q8,
        address9 => s_box_address9,
        ce9 => s_box_ce9,
        q9 => s_box_q9,
        address10 => s_box_address10,
        ce10 => s_box_ce10,
        q10 => s_box_q10,
        address11 => s_box_address11,
        ce11 => s_box_ce11,
        q11 => s_box_q11,
        address12 => s_box_address12,
        ce12 => s_box_ce12,
        q12 => s_box_q12,
        address13 => s_box_address13,
        ce13 => s_box_ce13,
        q13 => s_box_q13,
        address14 => s_box_address14,
        ce14 => s_box_ce14,
        q14 => s_box_q14,
        address15 => s_box_address15,
        ce15 => s_box_ce15,
        q15 => s_box_q15);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)) or not((ap_const_logic_1 = ap_ce)))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_ce, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_ce)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_ppiten_pp0_it0 <= ap_start;
    ap_return_0 <= s_box_q0;
    ap_return_1 <= s_box_q1;
    ap_return_10 <= s_box_q10;
    ap_return_11 <= s_box_q11;
    ap_return_12 <= s_box_q12;
    ap_return_13 <= s_box_q13;
    ap_return_14 <= s_box_q14;
    ap_return_15 <= s_box_q15;
    ap_return_2 <= s_box_q2;
    ap_return_3 <= s_box_q3;
    ap_return_4 <= s_box_q4;
    ap_return_5 <= s_box_q5;
    ap_return_6 <= s_box_q6;
    ap_return_7 <= s_box_q7;
    ap_return_8 <= s_box_q8;
    ap_return_9 <= s_box_q9;

    ap_sig_18_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_18 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_18)
    begin
        if (ap_sig_18) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    s_box_address0 <= tmp_8_fu_313_p1(8 - 1 downto 0);
    s_box_address1 <= tmp_8_0_1_fu_318_p1(8 - 1 downto 0);
    s_box_address10 <= tmp_8_2_2_fu_363_p1(8 - 1 downto 0);
    s_box_address11 <= tmp_8_2_3_fu_368_p1(8 - 1 downto 0);
    s_box_address12 <= tmp_8_3_fu_373_p1(8 - 1 downto 0);
    s_box_address13 <= tmp_8_3_1_fu_378_p1(8 - 1 downto 0);
    s_box_address14 <= tmp_8_3_2_fu_383_p1(8 - 1 downto 0);
    s_box_address15 <= tmp_8_3_3_fu_388_p1(8 - 1 downto 0);
    s_box_address2 <= tmp_8_0_2_fu_323_p1(8 - 1 downto 0);
    s_box_address3 <= tmp_8_0_3_fu_328_p1(8 - 1 downto 0);
    s_box_address4 <= tmp_8_1_fu_333_p1(8 - 1 downto 0);
    s_box_address5 <= tmp_8_1_1_fu_338_p1(8 - 1 downto 0);
    s_box_address6 <= tmp_8_1_2_fu_343_p1(8 - 1 downto 0);
    s_box_address7 <= tmp_8_1_3_fu_348_p1(8 - 1 downto 0);
    s_box_address8 <= tmp_8_2_fu_353_p1(8 - 1 downto 0);
    s_box_address9 <= tmp_8_2_1_fu_358_p1(8 - 1 downto 0);

    s_box_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce0 <= ap_const_logic_1;
        else 
            s_box_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce1 <= ap_const_logic_1;
        else 
            s_box_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce10_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce10 <= ap_const_logic_1;
        else 
            s_box_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce11_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce11 <= ap_const_logic_1;
        else 
            s_box_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce12_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce12 <= ap_const_logic_1;
        else 
            s_box_ce12 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce13_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce13 <= ap_const_logic_1;
        else 
            s_box_ce13 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce14_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce14 <= ap_const_logic_1;
        else 
            s_box_ce14 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce15_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce15 <= ap_const_logic_1;
        else 
            s_box_ce15 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce2_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce2 <= ap_const_logic_1;
        else 
            s_box_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce3_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce3 <= ap_const_logic_1;
        else 
            s_box_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce4_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce4 <= ap_const_logic_1;
        else 
            s_box_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce5_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce5 <= ap_const_logic_1;
        else 
            s_box_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce6_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce6 <= ap_const_logic_1;
        else 
            s_box_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce7_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce7 <= ap_const_logic_1;
        else 
            s_box_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce8_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce8 <= ap_const_logic_1;
        else 
            s_box_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    s_box_ce9_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce))) then 
            s_box_ce9 <= ap_const_logic_1;
        else 
            s_box_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_8_0_1_fu_318_p1 <= std_logic_vector(resize(unsigned(state_1_read),64));
    tmp_8_0_2_fu_323_p1 <= std_logic_vector(resize(unsigned(state_2_read),64));
    tmp_8_0_3_fu_328_p1 <= std_logic_vector(resize(unsigned(state_3_read),64));
    tmp_8_1_1_fu_338_p1 <= std_logic_vector(resize(unsigned(state_5_read),64));
    tmp_8_1_2_fu_343_p1 <= std_logic_vector(resize(unsigned(state_6_read),64));
    tmp_8_1_3_fu_348_p1 <= std_logic_vector(resize(unsigned(state_7_read),64));
    tmp_8_1_fu_333_p1 <= std_logic_vector(resize(unsigned(state_4_read),64));
    tmp_8_2_1_fu_358_p1 <= std_logic_vector(resize(unsigned(state_9_read),64));
    tmp_8_2_2_fu_363_p1 <= std_logic_vector(resize(unsigned(state_10_read),64));
    tmp_8_2_3_fu_368_p1 <= std_logic_vector(resize(unsigned(state_11_read),64));
    tmp_8_2_fu_353_p1 <= std_logic_vector(resize(unsigned(state_8_read),64));
    tmp_8_3_1_fu_378_p1 <= std_logic_vector(resize(unsigned(state_13_read),64));
    tmp_8_3_2_fu_383_p1 <= std_logic_vector(resize(unsigned(state_14_read),64));
    tmp_8_3_3_fu_388_p1 <= std_logic_vector(resize(unsigned(state_15_read),64));
    tmp_8_3_fu_373_p1 <= std_logic_vector(resize(unsigned(state_12_read),64));
    tmp_8_fu_313_p1 <= std_logic_vector(resize(unsigned(state_0_read),64));
end behav;
