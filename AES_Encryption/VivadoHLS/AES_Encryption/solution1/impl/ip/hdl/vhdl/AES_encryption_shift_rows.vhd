-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_encryption_shift_rows is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of AES_encryption_shift_rows is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_23 : BOOLEAN;
    signal indvars_iv_cast_fu_93_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_cast_reg_199 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_43 : BOOLEAN;
    signal tmp_4_fu_103_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_207 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond2_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_107_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_reg_212 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_reg_217 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_1_reg_222 : STD_LOGIC_VECTOR (3 downto 0);
    signal s_1_fu_140_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal s_1_reg_230 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_64 : BOOLEAN;
    signal i_fu_146_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_240 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_78 : BOOLEAN;
    signal tmp_8_fu_158_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_reg_248 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_87 : BOOLEAN;
    signal exitcond_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_176_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_258 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvars_iv_reg_59 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_reg_71 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_82 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_114 : BOOLEAN;
    signal tmp_1_fu_115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_120_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal s_cast_fu_131_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_cast_fu_162_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_166_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_fu_182_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_187_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    indvars_iv_reg_59_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvars_iv_reg_59 <= ap_const_lv3_1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond1_fu_135_p2)))) then 
                indvars_iv_reg_59 <= i_fu_146_p2;
            end if; 
        end if;
    end process;

    k_reg_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                k_reg_82 <= k_1_reg_258;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                k_reg_82 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    s_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_97_p2 = ap_const_lv1_0))) then 
                s_reg_71 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_152_p2)))) then 
                s_reg_71 <= s_1_reg_230;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                    indvars_iv_cast_reg_199(2 downto 0) <= indvars_iv_cast_fu_93_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_fu_152_p2))) then
                k_1_reg_258 <= k_1_fu_176_p2;
                tmp_8_reg_248 <= tmp_8_fu_158_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                s_1_reg_230 <= s_1_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_97_p2 = ap_const_lv1_0))) then
                    state_addr_1_reg_222(3 downto 2) <= tmp_3_fu_126_p1(4 - 1 downto 0)(3 downto 2);
                    state_addr_reg_217(3 downto 2) <= tmp_1_fu_115_p1(4 - 1 downto 0)(3 downto 2);
                tmp_4_reg_207 <= tmp_4_fu_103_p1;
                    tmp_s_reg_212(3 downto 2) <= tmp_s_fu_107_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_reg_240 <= state_q0;
            end if;
        end if;
    end process;
    indvars_iv_cast_reg_199(3) <= '0';
    tmp_s_reg_212(1 downto 0) <= "00";
    state_addr_reg_217(1 downto 0) <= "00";
    state_addr_1_reg_222(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_97_p2, exitcond1_fu_135_p2, exitcond_fu_152_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond2_fu_97_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_135_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond_fu_152_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_97_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_97_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_97_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond2_fu_97_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_114_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_114 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_43_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_43 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_64_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_64 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_78_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_78 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_87_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_87 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_23)
    begin
        if (ap_sig_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_43)
    begin
        if (ap_sig_43) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_64)
    begin
        if (ap_sig_64) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_78)
    begin
        if (ap_sig_78) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_87)
    begin
        if (ap_sig_87) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_114)
    begin
        if (ap_sig_114) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_135_p2 <= "1" when (s_cast_fu_131_p1 = indvars_iv_cast_reg_199) else "0";
    exitcond2_fu_97_p2 <= "1" when (indvars_iv_reg_59 = ap_const_lv3_4) else "0";
    exitcond_fu_152_p2 <= "1" when (k_reg_82 = ap_const_lv3_4) else "0";
    i_fu_146_p2 <= std_logic_vector(unsigned(indvars_iv_reg_59) + unsigned(ap_const_lv3_1));
    indvars_iv_cast_fu_93_p1 <= std_logic_vector(resize(unsigned(indvars_iv_reg_59),4));
    k_1_fu_176_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(k_reg_82));
    s_1_fu_140_p2 <= std_logic_vector(unsigned(s_reg_71) + unsigned(ap_const_lv2_1));
    s_cast_fu_131_p1 <= std_logic_vector(resize(unsigned(s_reg_71),4));

    state_address0_assign_proc : process(state_addr_reg_217, state_addr_1_reg_222, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, exitcond_fu_152_p2, ap_sig_cseq_ST_st6_fsm_5, tmp_7_fu_171_p1, tmp_5_fu_194_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            state_address0 <= tmp_5_fu_194_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_152_p2)))) then 
            state_address0 <= state_addr_1_reg_222;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_fu_152_p2))) then 
            state_address0 <= tmp_7_fu_171_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            state_address0 <= state_addr_reg_217;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, exitcond_fu_152_p2, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_fu_152_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_152_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(state_q0, tmp_reg_240, ap_sig_cseq_ST_st5_fsm_4, exitcond_fu_152_p2, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            state_d0 <= state_q0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_152_p2)))) then 
            state_d0 <= tmp_reg_240;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, exitcond_fu_152_p2, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_152_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_182_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(tmp_8_reg_248));
    tmp_1_fu_115_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_107_p3),64));
    tmp_2_fu_120_p2 <= (tmp_s_fu_107_p3 or ap_const_lv4_3);
    tmp_3_fu_126_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_120_p2),64));
    tmp_4_fu_103_p1 <= indvars_iv_reg_59(2 - 1 downto 0);
    tmp_5_cast_fu_162_p1 <= std_logic_vector(resize(unsigned(k_reg_82),4));
    tmp_5_fu_194_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_187_p3),64));
    tmp_6_fu_166_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_162_p1) + unsigned(tmp_s_reg_212));
    tmp_7_fu_171_p1 <= std_logic_vector(resize(unsigned(tmp_6_fu_166_p2),64));
    tmp_8_fu_158_p1 <= k_reg_82(2 - 1 downto 0);
    tmp_9_fu_187_p3 <= (tmp_4_reg_207 & tmp1_fu_182_p2);
    tmp_s_fu_107_p3 <= (tmp_4_fu_103_p1 & ap_const_lv2_0);
end behav;
