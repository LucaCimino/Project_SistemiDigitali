

================================================================
== Vivado HLS Report for 'single_block_AES_encrypt_aes_key_expansion'
================================================================
* Date:           Thu Feb 08 15:38:57 2024

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        AES_Encryption
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      5.33|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------+-----+-----+----------+-----------+-----------+------+----------+
        |                 |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        |    Loop Name    | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +-----------------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1         |    ?|    ?|         ?|          -|          -|    40|    no    |
        | + Loop 1.1      |    3|    3|         1|          -|          -|     3|    no    |
        | + Loop 1.2      |    8|    8|         2|          -|          -|     4|    no    |
        | + Loop 1.3      |    ?|    ?|        10|          -|          -|     ?|    no    |
        |  ++ Loop 1.3.1  |    8|    8|         1|          -|          -|     8|    no    |
        +-----------------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 22
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / (!exitcond)
10 --> 
	11  / true
11 --> 
	12  / (tmp_40)
	19  / (!tmp_40)
12 --> 
	12  / (!exitcond_i2)
	13  / (exitcond_i2)
13 --> 
	14  / (!exitcond_i)
	15  / (exitcond_i & !tmp_41)
	17  / (exitcond_i & tmp_41)
14 --> 
	13  / true
15 --> 
	16  / (!icmp & !icmp1)
	17  / (icmp) | (icmp1)
16 --> 
	15  / (exitcond_i1)
	16  / (!exitcond_i1)
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	9  / true
* FSM state operations: 

 <State 1>: 2.71ns
ST_1: w_addr [1/1] 0.00ns
.preheader.preheader:0  %w_addr = getelementptr [176 x i8]* %w, i64 0, i64 0

ST_1: stg_24 [1/1] 2.71ns
.preheader.preheader:1  store i8 99, i8* %w_addr, align 1

ST_1: w_addr_1 [1/1] 0.00ns
.preheader.preheader:2  %w_addr_1 = getelementptr [176 x i8]* %w, i64 0, i64 1

ST_1: stg_26 [1/1] 2.71ns
.preheader.preheader:3  store i8 -45, i8* %w_addr_1, align 1


 <State 2>: 2.71ns
ST_2: w_addr_2 [1/1] 0.00ns
.preheader.preheader:4  %w_addr_2 = getelementptr [176 x i8]* %w, i64 0, i64 2

ST_2: stg_28 [1/1] 2.71ns
.preheader.preheader:5  store i8 113, i8* %w_addr_2, align 1

ST_2: w_addr_3 [1/1] 0.00ns
.preheader.preheader:6  %w_addr_3 = getelementptr [176 x i8]* %w, i64 0, i64 3

ST_2: stg_30 [1/1] 2.71ns
.preheader.preheader:7  store i8 -29, i8* %w_addr_3, align 1


 <State 3>: 2.71ns
ST_3: w_addr_4 [1/1] 0.00ns
.preheader.preheader:8  %w_addr_4 = getelementptr [176 x i8]* %w, i64 0, i64 4

ST_3: stg_32 [1/1] 2.71ns
.preheader.preheader:9  store i8 107, i8* %w_addr_4, align 1

ST_3: w_addr_5 [1/1] 0.00ns
.preheader.preheader:10  %w_addr_5 = getelementptr [176 x i8]* %w, i64 0, i64 5

ST_3: stg_34 [1/1] 2.71ns
.preheader.preheader:11  store i8 -78, i8* %w_addr_5, align 1


 <State 4>: 2.71ns
ST_4: w_addr_6 [1/1] 0.00ns
.preheader.preheader:12  %w_addr_6 = getelementptr [176 x i8]* %w, i64 0, i64 6

ST_4: stg_36 [1/1] 2.71ns
.preheader.preheader:13  store i8 18, i8* %w_addr_6, align 1

ST_4: w_addr_7 [1/1] 0.00ns
.preheader.preheader:14  %w_addr_7 = getelementptr [176 x i8]* %w, i64 0, i64 7

ST_4: stg_38 [1/1] 2.71ns
.preheader.preheader:15  store i8 -123, i8* %w_addr_7, align 1


 <State 5>: 2.71ns
ST_5: w_addr_8 [1/1] 0.00ns
.preheader.preheader:16  %w_addr_8 = getelementptr [176 x i8]* %w, i64 0, i64 8

ST_5: stg_40 [1/1] 2.71ns
.preheader.preheader:17  store i8 -25, i8* %w_addr_8, align 1

ST_5: w_addr_9 [1/1] 0.00ns
.preheader.preheader:18  %w_addr_9 = getelementptr [176 x i8]* %w, i64 0, i64 9

ST_5: stg_42 [1/1] 2.71ns
.preheader.preheader:19  store i8 103, i8* %w_addr_9, align 1


 <State 6>: 2.71ns
ST_6: w_addr_10 [1/1] 0.00ns
.preheader.preheader:20  %w_addr_10 = getelementptr [176 x i8]* %w, i64 0, i64 10

ST_6: stg_44 [1/1] 2.71ns
.preheader.preheader:21  store i8 -46, i8* %w_addr_10, align 1

ST_6: w_addr_11 [1/1] 0.00ns
.preheader.preheader:22  %w_addr_11 = getelementptr [176 x i8]* %w, i64 0, i64 11

ST_6: stg_46 [1/1] 2.71ns
.preheader.preheader:23  store i8 -1, i8* %w_addr_11, align 1


 <State 7>: 2.71ns
ST_7: w_addr_12 [1/1] 0.00ns
.preheader.preheader:24  %w_addr_12 = getelementptr [176 x i8]* %w, i64 0, i64 12

ST_7: stg_48 [1/1] 2.71ns
.preheader.preheader:25  store i8 17, i8* %w_addr_12, align 1

ST_7: w_addr_13 [1/1] 0.00ns
.preheader.preheader:26  %w_addr_13 = getelementptr [176 x i8]* %w, i64 0, i64 13

ST_7: stg_50 [1/1] 2.71ns
.preheader.preheader:27  store i8 21, i8* %w_addr_13, align 1


 <State 8>: 2.71ns
ST_8: w_addr_14 [1/1] 0.00ns
.preheader.preheader:28  %w_addr_14 = getelementptr [176 x i8]* %w, i64 0, i64 14

ST_8: stg_52 [1/1] 2.71ns
.preheader.preheader:29  store i8 -29, i8* %w_addr_14, align 1

ST_8: w_addr_15 [1/1] 0.00ns
.preheader.preheader:30  %w_addr_15 = getelementptr [176 x i8]* %w, i64 0, i64 15

ST_8: stg_54 [1/1] 2.71ns
.preheader.preheader:31  store i8 -85, i8* %w_addr_15, align 1

ST_8: stg_55 [1/1] 1.57ns
.preheader.preheader:32  br label %.preheader


 <State 9>: 4.43ns
ST_9: i_1 [1/1] 0.00ns
.preheader:0  %i_1 = phi i6 [ %i, %._crit_edge ], [ 4, %.preheader.preheader ]

ST_9: exitcond [1/1] 1.94ns
.preheader:1  %exitcond = icmp eq i6 %i_1, -20

ST_9: empty [1/1] 0.00ns
.preheader:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 40, i64 40, i64 40)

ST_9: stg_59 [1/1] 0.00ns
.preheader:3  br i1 %exitcond, label %5, label %0

ST_9: tmp_30 [1/1] 0.00ns
:0  %tmp_30 = call i8 @_ssdm_op_BitConcatenate.i8.i6.i2(i6 %i_1, i2 0)

ST_9: tmp_31 [1/1] 1.72ns
:1  %tmp_31 = add i8 -4, %tmp_30

ST_9: tmp_32 [1/1] 0.00ns
:2  %tmp_32 = zext i8 %tmp_31 to i64

ST_9: w_addr_16 [1/1] 0.00ns
:3  %w_addr_16 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_32

ST_9: tmp_29 [2/2] 2.71ns
:4  %tmp_29 = load i8* %w_addr_16, align 1

ST_9: tmp_33 [1/1] 1.72ns
:5  %tmp_33 = add i8 -3, %tmp_30

ST_9: tmp_34 [1/1] 0.00ns
:6  %tmp_34 = zext i8 %tmp_33 to i64

ST_9: w_addr_17 [1/1] 0.00ns
:7  %w_addr_17 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_34

ST_9: tmp_1 [2/2] 2.71ns
:8  %tmp_1 = load i8* %w_addr_17, align 1

ST_9: stg_69 [1/1] 0.00ns
:0  ret void


 <State 10>: 4.43ns
ST_10: tmp_29 [1/2] 2.71ns
:4  %tmp_29 = load i8* %w_addr_16, align 1

ST_10: tmp_1 [1/2] 2.71ns
:8  %tmp_1 = load i8* %w_addr_17, align 1

ST_10: tmp_35 [1/1] 1.72ns
:9  %tmp_35 = add i8 -2, %tmp_30

ST_10: tmp_36 [1/1] 0.00ns
:10  %tmp_36 = zext i8 %tmp_35 to i64

ST_10: w_addr_18 [1/1] 0.00ns
:11  %w_addr_18 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_36

ST_10: tmp_2 [2/2] 2.71ns
:12  %tmp_2 = load i8* %w_addr_18, align 1

ST_10: tmp_37 [1/1] 1.72ns
:13  %tmp_37 = add i8 -1, %tmp_30

ST_10: tmp_38 [1/1] 0.00ns
:14  %tmp_38 = zext i8 %tmp_37 to i64

ST_10: w_addr_19 [1/1] 0.00ns
:15  %w_addr_19 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_38

ST_10: tmp_3_1 [2/2] 2.71ns
:16  %tmp_3_1 = load i8* %w_addr_19, align 1


 <State 11>: 4.28ns
ST_11: tmp_2 [1/2] 2.71ns
:12  %tmp_2 = load i8* %w_addr_18, align 1

ST_11: tmp_3_1 [1/2] 2.71ns
:16  %tmp_3_1 = load i8* %w_addr_19, align 1

ST_11: tmp_21 [1/1] 0.00ns
:17  %tmp_21 = trunc i6 %i_1 to i2

ST_11: tmp_40 [1/1] 1.36ns
:18  %tmp_40 = icmp eq i2 %tmp_21, 0

ST_11: stg_84 [1/1] 1.57ns
:19  br i1 %tmp_40, label %.preheader49, label %._crit_edge


 <State 12>: 4.10ns
ST_12: write_flag_i [1/1] 0.00ns
.preheader49:0  %write_flag_i = phi i1 [ %write_flag_1_i, %_ifconv.i ], [ false, %0 ]

ST_12: w_3_read_assign_2 [1/1] 0.00ns
.preheader49:1  %w_3_read_assign_2 = phi i8 [ %w_3_read_assign_3, %_ifconv.i ], [ undef, %0 ]

ST_12: tmp_2_1 [1/1] 0.00ns
.preheader49:2  %tmp_2_1 = phi i8 [ %w_3_read_assign_5, %_ifconv.i ], [ %tmp_2, %0 ]

ST_12: tmp_1_1 [1/1] 0.00ns
.preheader49:3  %tmp_1_1 = phi i8 [ %w_3_read_assign_7, %_ifconv.i ], [ %tmp_1, %0 ]

ST_12: i_i2 [1/1] 0.00ns
.preheader49:4  %i_i2 = phi i2 [ %i_5, %_ifconv.i ], [ 0, %0 ]

ST_12: exitcond_i2 [1/1] 1.36ns
.preheader49:5  %exitcond_i2 = icmp eq i2 %i_i2, -1

ST_12: empty_1294 [1/1] 0.00ns
.preheader49:6  %empty_1294 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 3, i64 3, i64 3)

ST_12: i_5 [1/1] 0.80ns
.preheader49:7  %i_5 = add i2 %i_i2, 1

ST_12: stg_93 [1/1] 0.00ns
.preheader49:8  br i1 %exitcond_i2, label %rot_word.exit, label %_ifconv.i

ST_12: sel_tmp_i [1/1] 1.36ns
_ifconv.i:0  %sel_tmp_i = icmp eq i2 %i_i2, 1

ST_12: w_3_read_assign [1/1] 0.00ns (grouped into LUT with out node w_3_read_assign_1)
_ifconv.i:1  %w_3_read_assign = select i1 %sel_tmp_i, i8 %tmp_2_1, i8 %tmp_3_1

ST_12: sel_tmp2_i [1/1] 1.36ns
_ifconv.i:2  %sel_tmp2_i = icmp eq i2 %i_i2, 0

ST_12: w_3_read_assign_1 [1/1] 1.37ns (out node of the LUT)
_ifconv.i:3  %w_3_read_assign_1 = select i1 %sel_tmp2_i, i8 %tmp_1_1, i8 %w_3_read_assign

ST_12: write_flag_1_i [1/1] 1.37ns
_ifconv.i:4  %write_flag_1_i = or i1 %sel_tmp2_i, %write_flag_i

ST_12: w_3_read_assign_3 [1/1] 1.37ns
_ifconv.i:5  %w_3_read_assign_3 = select i1 %sel_tmp2_i, i8 %tmp_1_1, i8 %w_3_read_assign_2

ST_12: w_3_read_assign_4 [1/1] 0.00ns (grouped into LUT with out node w_3_read_assign_5)
_ifconv.i:6  %w_3_read_assign_4 = select i1 %sel_tmp_i, i8 %tmp_2_1, i8 %w_3_read_assign_1

ST_12: w_3_read_assign_5 [1/1] 1.37ns (out node of the LUT)
_ifconv.i:7  %w_3_read_assign_5 = select i1 %sel_tmp2_i, i8 %tmp_2_1, i8 %w_3_read_assign_4

ST_12: w_3_read_assign_6 [1/1] 0.00ns (grouped into LUT with out node w_3_read_assign_7)
_ifconv.i:8  %w_3_read_assign_6 = select i1 %sel_tmp_i, i8 %w_3_read_assign_1, i8 %tmp_1_1

ST_12: w_3_read_assign_7 [1/1] 1.37ns (out node of the LUT)
_ifconv.i:9  %w_3_read_assign_7 = select i1 %sel_tmp2_i, i8 %tmp_1_1, i8 %w_3_read_assign_6

ST_12: stg_104 [1/1] 0.00ns
_ifconv.i:10  br label %.preheader49

ST_12: tmp_0_1 [1/1] 1.37ns
rot_word.exit:0  %tmp_0_1 = select i1 %write_flag_i, i8 %w_3_read_assign_2, i8 %tmp_29

ST_12: stg_106 [1/1] 1.57ns
rot_word.exit:1  br label %1


 <State 13>: 3.96ns
ST_13: a_3_read_assign [1/1] 0.00ns
:0  %a_3_read_assign = phi i8 [ %tmp_29, %rot_word.exit ], [ %tmp_3, %_ifconv ]

ST_13: a_2_read_assign [1/1] 0.00ns
:1  %a_2_read_assign = phi i8 [ %tmp_2_1, %rot_word.exit ], [ %tmp_3_4, %_ifconv ]

ST_13: tmp_3_3 [1/1] 0.00ns
:2  %tmp_3_3 = phi i8 [ %tmp_1_1, %rot_word.exit ], [ %tmp_3_7, %_ifconv ]

ST_13: tmp_3_6 [1/1] 0.00ns
:3  %tmp_3_6 = phi i8 [ %tmp_0_1, %rot_word.exit ], [ %tmp_3_8, %_ifconv ]

ST_13: i_i [1/1] 0.00ns
:4  %i_i = phi i3 [ 0, %rot_word.exit ], [ %i_6, %_ifconv ]

ST_13: exitcond_i [1/1] 1.62ns
:5  %exitcond_i = icmp eq i3 %i_i, -4

ST_13: empty_1295 [1/1] 0.00ns
:6  %empty_1295 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)

ST_13: i_6 [1/1] 0.80ns
:7  %i_6 = add i3 %i_i, 1

ST_13: stg_115 [1/1] 0.00ns
:8  br i1 %exitcond_i, label %sub_word.exit, label %_ifconv

ST_13: tmp_22 [1/1] 0.00ns
_ifconv:0  %tmp_22 = trunc i3 %i_i to i2

ST_13: tmp [1/1] 1.57ns
_ifconv:1  %tmp = call i8 @_ssdm_op_Mux.ap_auto.4i8.i2(i8 %tmp_3_6, i8 %tmp_3_3, i8 %a_2_read_assign, i8 %a_3_read_assign, i2 %tmp_22)

ST_13: tmp_1_i [1/1] 0.00ns
_ifconv:2  %tmp_1_i = zext i8 %tmp to i64

ST_13: s_box_addr [1/1] 0.00ns
_ifconv:3  %s_box_addr = getelementptr inbounds [256 x i8]* @s_box, i64 0, i64 %tmp_1_i

ST_13: tmp_3_11 [2/2] 2.39ns
_ifconv:4  %tmp_3_11 = load i8* %s_box_addr, align 1

ST_13: i_assign [1/1] 0.00ns
sub_word.exit:0  %i_assign = call i4 @_ssdm_op_PartSelect.i4.i6.i32.i32(i6 %i_1, i32 2, i32 5)

ST_13: i_assign_cast1 [1/1] 0.00ns
sub_word.exit:1  %i_assign_cast1 = zext i4 %i_assign to i8

ST_13: tmp_41 [1/1] 1.88ns
sub_word.exit:2  %tmp_41 = icmp eq i4 %i_assign, 1

ST_13: stg_124 [1/1] 0.00ns
sub_word.exit:3  br i1 %tmp_41, label %2, label %3

ST_13: tmp_23 [1/1] 0.00ns
:0  %tmp_23 = call i3 @_ssdm_op_PartSelect.i3.i6.i32.i32(i6 %i_1, i32 3, i32 5)

ST_13: icmp [1/1] 1.62ns
:1  %icmp = icmp eq i3 %tmp_23, 0

ST_13: stg_127 [1/1] 1.57ns
:2  br i1 %icmp, label %.loopexit.i, label %.preheader.i

ST_13: stg_128 [1/1] 2.39ns
:0  store i8 1, i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 0), align 1

ST_13: stg_129 [1/1] 0.00ns
:1  br label %Rcon.exit


 <State 14>: 4.10ns
ST_14: tmp_3_11 [1/2] 2.39ns
_ifconv:4  %tmp_3_11 = load i8* %s_box_addr, align 1

ST_14: sel_tmp [1/1] 1.36ns
_ifconv:5  %sel_tmp = icmp eq i2 %tmp_22, -2

ST_14: sel_tmp8 [1/1] 1.36ns
_ifconv:6  %sel_tmp8 = icmp eq i2 %tmp_22, 1

ST_14: sel_tmp2 [1/1] 1.36ns
_ifconv:7  %sel_tmp2 = icmp eq i2 %tmp_22, 0

ST_14: or_cond [1/1] 1.37ns
_ifconv:8  %or_cond = or i1 %sel_tmp2, %sel_tmp8

ST_14: newSel [1/1] 0.00ns (grouped into LUT with out node tmp_3)
_ifconv:9  %newSel = select i1 %sel_tmp, i8 %a_3_read_assign, i8 %tmp_3_11

ST_14: tmp_3 [1/1] 1.37ns (out node of the LUT)
_ifconv:10  %tmp_3 = select i1 %or_cond, i8 %a_3_read_assign, i8 %newSel

ST_14: newSel5 [1/1] 0.00ns (grouped into LUT with out node tmp_3_4)
_ifconv:11  %newSel5 = select i1 %sel_tmp, i8 %tmp_3_11, i8 %a_2_read_assign

ST_14: tmp_3_4 [1/1] 1.37ns (out node of the LUT)
_ifconv:12  %tmp_3_4 = select i1 %or_cond, i8 %a_2_read_assign, i8 %newSel5

ST_14: tmp_3_5 [1/1] 0.00ns (grouped into LUT with out node tmp_3_7)
_ifconv:13  %tmp_3_5 = select i1 %sel_tmp8, i8 %tmp_3_11, i8 %tmp_3_3

ST_14: tmp_3_7 [1/1] 1.37ns (out node of the LUT)
_ifconv:14  %tmp_3_7 = select i1 %sel_tmp2, i8 %tmp_3_3, i8 %tmp_3_5

ST_14: tmp_3_8 [1/1] 1.37ns
_ifconv:15  %tmp_3_8 = select i1 %sel_tmp2, i8 %tmp_3_11, i8 %tmp_3_6

ST_14: stg_142 [1/1] 0.00ns
_ifconv:16  br label %1


 <State 15>: 5.26ns
ST_15: a_assign [1/1] 0.00ns
.preheader.i:0  %a_assign = phi i8 [ 2, %3 ], [ %p_i, %.preheader76 ]

ST_15: p_0_in_i [1/1] 0.00ns
.preheader.i:1  %p_0_in_i = phi i8 [ %i_assign_cast1, %3 ], [ %i_assign_1, %.preheader76 ]

ST_15: i_assign_1 [1/1] 1.72ns
.preheader.i:2  %i_assign_1 = add i8 %p_0_in_i, -1

ST_15: tmp_24 [1/1] 0.00ns
.preheader.i:3  %tmp_24 = call i7 @_ssdm_op_PartSelect.i7.i8.i32.i32(i8 %i_assign_1, i32 1, i32 7)

ST_15: icmp1 [1/1] 1.97ns
.preheader.i:4  %icmp1 = icmp eq i7 %tmp_24, 0

ST_15: stg_148 [1/1] 1.57ns
.preheader.i:5  br i1 %icmp1, label %.loopexit.i.loopexit, label %.preheader76

ST_15: stg_149 [1/1] 2.39ns
.loopexit.i.loopexit:0  store i8 %a_assign, i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 0), align 1

ST_15: stg_150 [1/1] 0.00ns
.loopexit.i.loopexit:1  br label %.loopexit.i

ST_15: stg_151 [1/1] 0.00ns
.loopexit.i:0  br label %Rcon.exit


 <State 16>: 1.88ns
ST_16: i_i1 [1/1] 0.00ns
.preheader76:0  %i_i1 = phi i4 [ %i_7, %4 ], [ 0, %.preheader.i ]

ST_16: p_i [1/1] 0.00ns
.preheader76:1  %p_i = phi i8 [ %p_0_i_1298, %4 ], [ 0, %.preheader.i ]

ST_16: p_i_1296 [1/1] 0.00ns
.preheader76:2  %p_i_1296 = phi i5 [ %b_assign, %4 ], [ 2, %.preheader.i ]

ST_16: p_0_i [1/1] 0.00ns
.preheader76:3  %p_0_i = phi i8 [ %a_assign_5, %4 ], [ %a_assign, %.preheader.i ]

ST_16: exitcond_i1 [1/1] 1.88ns
.preheader76:4  %exitcond_i1 = icmp eq i4 %i_i1, -8

ST_16: empty_1297 [1/1] 0.00ns
.preheader76:5  %empty_1297 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8) nounwind

ST_16: i_7 [1/1] 0.80ns
.preheader76:6  %i_7 = add i4 %i_i1, 1

ST_16: stg_159 [1/1] 0.00ns
.preheader76:7  br i1 %exitcond_i1, label %.preheader.i, label %4

ST_16: tmp_25 [1/1] 0.00ns (grouped into LUT with out node p_0_i_1298)
:0  %tmp_25 = trunc i5 %p_i_1296 to i1

ST_16: tmp_10_i [1/1] 0.00ns (grouped into LUT with out node p_0_i_1298)
:1  %tmp_10_i = select i1 %tmp_25, i8 %p_0_i, i8 0

ST_16: p_0_i_1298 [1/1] 1.37ns (out node of the LUT)
:2  %p_0_i_1298 = xor i8 %tmp_10_i, %p_i

ST_16: tmp_26 [1/1] 0.00ns
:3  %tmp_26 = shl i8 %p_0_i, 1

ST_16: tmp_27 [1/1] 0.00ns (grouped into LUT with out node a_assign_5)
:4  %tmp_27 = call i1 @_ssdm_op_BitSelect.i1.i8.i32(i8 %p_0_i, i32 7)

ST_16: a_assign_4 [1/1] 0.00ns (grouped into LUT with out node a_assign_5)
:5  %a_assign_4 = xor i8 %tmp_26, 27

ST_16: a_assign_5 [1/1] 1.37ns (out node of the LUT)
:6  %a_assign_5 = select i1 %tmp_27, i8 %a_assign_4, i8 %tmp_26

ST_16: tmp_28 [1/1] 0.00ns
:7  %tmp_28 = call i4 @_ssdm_op_PartSelect.i4.i5.i32.i32(i5 %p_i_1296, i32 1, i32 4)

ST_16: b_assign [1/1] 0.00ns
:8  %b_assign = zext i4 %tmp_28 to i5

ST_16: stg_169 [1/1] 0.00ns
:9  br label %.preheader76


 <State 17>: 2.39ns
ST_17: R_load_1 [2/2] 2.39ns
Rcon.exit:2  %R_load_1 = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 1), align 1

ST_17: R_load_2 [2/2] 2.39ns
Rcon.exit:4  %R_load_2 = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 2), align 1


 <State 18>: 3.76ns
ST_18: R_load [2/2] 2.39ns
Rcon.exit:0  %R_load = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 0), align 1

ST_18: R_load_1 [1/2] 2.39ns
Rcon.exit:2  %R_load_1 = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 1), align 1

ST_18: tmp_1_3 [1/1] 1.37ns
Rcon.exit:3  %tmp_1_3 = xor i8 %R_load_1, %tmp_3_3

ST_18: R_load_2 [1/2] 2.39ns
Rcon.exit:4  %R_load_2 = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 2), align 1

ST_18: tmp_2_3 [1/1] 1.37ns
Rcon.exit:5  %tmp_2_3 = xor i8 %R_load_2, %a_2_read_assign

ST_18: R_load_3 [2/2] 2.39ns
Rcon.exit:6  %R_load_3 = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 3), align 1


 <State 19>: 5.33ns
ST_19: R_load [1/2] 2.39ns
Rcon.exit:0  %R_load = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 0), align 1

ST_19: tmp_0 [1/1] 1.37ns
Rcon.exit:1  %tmp_0 = xor i8 %R_load, %tmp_3_6

ST_19: R_load_3 [1/2] 2.39ns
Rcon.exit:6  %R_load_3 = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 3), align 1

ST_19: tmp_3_9 [1/1] 1.37ns
Rcon.exit:7  %tmp_3_9 = xor i8 %R_load_3, %a_3_read_assign

ST_19: stg_182 [1/1] 1.57ns
Rcon.exit:8  br label %._crit_edge

ST_19: tmp_46 [1/1] 1.72ns
._crit_edge:4  %tmp_46 = add i8 %tmp_30, -16

ST_19: tmp_47 [1/1] 0.00ns
._crit_edge:5  %tmp_47 = zext i8 %tmp_46 to i64

ST_19: w_addr_20 [1/1] 0.00ns
._crit_edge:6  %w_addr_20 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_47

ST_19: w_load [2/2] 2.71ns
._crit_edge:7  %w_load = load i8* %w_addr_20, align 1

ST_19: tmp_50 [1/1] 1.72ns
._crit_edge:12  %tmp_50 = add i8 %tmp_30, -15

ST_19: tmp_51 [1/1] 0.00ns
._crit_edge:13  %tmp_51 = zext i8 %tmp_50 to i64

ST_19: w_addr_22 [1/1] 0.00ns
._crit_edge:14  %w_addr_22 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_51

ST_19: w_load_1 [2/2] 2.71ns
._crit_edge:15  %w_load_1 = load i8* %w_addr_22, align 1

ST_19: i [1/1] 1.72ns
._crit_edge:39  %i = add i6 %i_1, 1


 <State 20>: 4.43ns
ST_20: tmp_1_s [1/1] 0.00ns (grouped into LUT with out node tmp_52)
._crit_edge:2  %tmp_1_s = phi i8 [ %tmp_1_3, %Rcon.exit ], [ %tmp_1, %0 ]

ST_20: tmp_0_s [1/1] 0.00ns (grouped into LUT with out node tmp_48)
._crit_edge:3  %tmp_0_s = phi i8 [ %tmp_0, %Rcon.exit ], [ %tmp_29, %0 ]

ST_20: w_load [1/2] 2.71ns
._crit_edge:7  %w_load = load i8* %w_addr_20, align 1

ST_20: tmp_48 [1/1] 1.37ns (out node of the LUT)
._crit_edge:8  %tmp_48 = xor i8 %w_load, %tmp_0_s

ST_20: w_load_1 [1/2] 2.71ns
._crit_edge:15  %w_load_1 = load i8* %w_addr_22, align 1

ST_20: tmp_52 [1/1] 1.37ns (out node of the LUT)
._crit_edge:16  %tmp_52 = xor i8 %w_load_1, %tmp_1_s

ST_20: tmp_55 [1/1] 1.72ns
._crit_edge:21  %tmp_55 = add i8 %tmp_30, -14

ST_20: tmp_56 [1/1] 0.00ns
._crit_edge:22  %tmp_56 = zext i8 %tmp_55 to i64

ST_20: w_addr_24 [1/1] 0.00ns
._crit_edge:23  %w_addr_24 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_56

ST_20: w_load_2 [2/2] 2.71ns
._crit_edge:24  %w_load_2 = load i8* %w_addr_24, align 1

ST_20: tmp_60 [1/1] 1.72ns
._crit_edge:30  %tmp_60 = add i8 %tmp_30, -13

ST_20: tmp_61 [1/1] 0.00ns
._crit_edge:31  %tmp_61 = zext i8 %tmp_60 to i64

ST_20: w_addr_26 [1/1] 0.00ns
._crit_edge:32  %w_addr_26 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_61

ST_20: w_load_3 [2/2] 2.71ns
._crit_edge:33  %w_load_3 = load i8* %w_addr_26, align 1


 <State 21>: 4.08ns
ST_21: tmp_3_s [1/1] 0.00ns (grouped into LUT with out node tmp_62)
._crit_edge:0  %tmp_3_s = phi i8 [ %tmp_3_9, %Rcon.exit ], [ %tmp_3_1, %0 ]

ST_21: tmp_2_3_2 [1/1] 0.00ns (grouped into LUT with out node tmp_57)
._crit_edge:1  %tmp_2_3_2 = phi i8 [ %tmp_2_3, %Rcon.exit ], [ %tmp_2, %0 ]

ST_21: tmp_49 [1/1] 0.00ns
._crit_edge:9  %tmp_49 = zext i8 %tmp_30 to i64

ST_21: w_addr_21 [1/1] 0.00ns
._crit_edge:10  %w_addr_21 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_49

ST_21: stg_210 [1/1] 2.71ns
._crit_edge:11  store i8 %tmp_48, i8* %w_addr_21, align 1

ST_21: tmp_53 [1/1] 0.00ns
._crit_edge:17  %tmp_53 = or i8 %tmp_30, 1

ST_21: tmp_54 [1/1] 0.00ns
._crit_edge:18  %tmp_54 = zext i8 %tmp_53 to i64

ST_21: w_addr_23 [1/1] 0.00ns
._crit_edge:19  %w_addr_23 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_54

ST_21: stg_214 [1/1] 2.71ns
._crit_edge:20  store i8 %tmp_52, i8* %w_addr_23, align 1

ST_21: w_load_2 [1/2] 2.71ns
._crit_edge:24  %w_load_2 = load i8* %w_addr_24, align 1

ST_21: tmp_57 [1/1] 1.37ns (out node of the LUT)
._crit_edge:25  %tmp_57 = xor i8 %w_load_2, %tmp_2_3_2

ST_21: w_load_3 [1/2] 2.71ns
._crit_edge:33  %w_load_3 = load i8* %w_addr_26, align 1

ST_21: tmp_62 [1/1] 1.37ns (out node of the LUT)
._crit_edge:34  %tmp_62 = xor i8 %w_load_3, %tmp_3_s


 <State 22>: 2.71ns
ST_22: tmp_58 [1/1] 0.00ns
._crit_edge:26  %tmp_58 = or i8 %tmp_30, 2

ST_22: tmp_59 [1/1] 0.00ns
._crit_edge:27  %tmp_59 = zext i8 %tmp_58 to i64

ST_22: w_addr_25 [1/1] 0.00ns
._crit_edge:28  %w_addr_25 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_59

ST_22: stg_222 [1/1] 2.71ns
._crit_edge:29  store i8 %tmp_57, i8* %w_addr_25, align 1

ST_22: tmp_63 [1/1] 0.00ns
._crit_edge:35  %tmp_63 = or i8 %tmp_30, 3

ST_22: tmp_64 [1/1] 0.00ns
._crit_edge:36  %tmp_64 = zext i8 %tmp_63 to i64

ST_22: w_addr_27 [1/1] 0.00ns
._crit_edge:37  %w_addr_27 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_64

ST_22: stg_226 [1/1] 2.71ns
._crit_edge:38  store i8 %tmp_62, i8* %w_addr_27, align 1

ST_22: stg_227 [1/1] 0.00ns
._crit_edge:40  br label %.preheader



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
