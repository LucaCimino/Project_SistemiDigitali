

================================================================
== Vivado HLS Report for 'single_block_AES_encrypt_add_round_key'
================================================================
* Date:           Thu Feb 08 12:12:15 2024

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        AES_Encryption
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      4.08|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+----------+
    |  Latency  |  Interval | Pipeline |
    | min | max | min | max |   Type   |
    +-----+-----+-----+-----+----------+
    |    8|    8|    8|    8| function |
    +-----+-----+-----+-----+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 1
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 8, depth = 9


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 9
* Pipeline: 1
  Pipeline-0: II = 8, D = 9, States = { 1 2 3 4 5 6 7 8 9 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
* FSM state operations: 

 <State 1>: 3.75ns
ST_1: r_read [1/1] 1.04ns
:0  %r_read = call i5 @_ssdm_op_Read.ap_auto.i5(i5 %r)

ST_1: tmp [1/1] 0.00ns
:17  %tmp = trunc i5 %r_read to i4

ST_1: tmp_s [1/1] 0.00ns
:18  %tmp_s = call i8 @_ssdm_op_BitConcatenate.i8.i4.i4(i4 %tmp, i4 0)

ST_1: tmp_41 [1/1] 0.00ns
:19  %tmp_41 = zext i8 %tmp_s to i64

ST_1: w_addr [1/1] 0.00ns
:20  %w_addr = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_41

ST_1: w_load [2/2] 2.71ns
:21  %w_load = load i8* %w_addr, align 1

ST_1: tmp_42 [1/1] 0.00ns
:23  %tmp_42 = or i8 %tmp_s, 1

ST_1: tmp_43 [1/1] 0.00ns
:24  %tmp_43 = zext i8 %tmp_42 to i64

ST_1: w_addr_28 [1/1] 0.00ns
:25  %w_addr_28 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_43

ST_1: w_load_4 [2/2] 2.71ns
:26  %w_load_4 = load i8* %w_addr_28, align 1


 <State 2>: 2.71ns
ST_2: w_load [1/2] 2.71ns
:21  %w_load = load i8* %w_addr, align 1

ST_2: w_load_4 [1/2] 2.71ns
:26  %w_load_4 = load i8* %w_addr_28, align 1

ST_2: tmp_44 [1/1] 0.00ns
:28  %tmp_44 = or i8 %tmp_s, 2

ST_2: tmp_45 [1/1] 0.00ns
:29  %tmp_45 = zext i8 %tmp_44 to i64

ST_2: w_addr_29 [1/1] 0.00ns
:30  %w_addr_29 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_45

ST_2: w_load_5 [2/2] 2.71ns
:31  %w_load_5 = load i8* %w_addr_29, align 1

ST_2: tmp_46 [1/1] 0.00ns
:33  %tmp_46 = or i8 %tmp_s, 3

ST_2: tmp_47 [1/1] 0.00ns
:34  %tmp_47 = zext i8 %tmp_46 to i64

ST_2: w_addr_30 [1/1] 0.00ns
:35  %w_addr_30 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_47

ST_2: w_load_6 [2/2] 2.71ns
:36  %w_load_6 = load i8* %w_addr_30, align 1


 <State 3>: 2.71ns
ST_3: w_load_5 [1/2] 2.71ns
:31  %w_load_5 = load i8* %w_addr_29, align 1

ST_3: w_load_6 [1/2] 2.71ns
:36  %w_load_6 = load i8* %w_addr_30, align 1

ST_3: tmp_114_s [1/1] 0.00ns
:38  %tmp_114_s = or i8 %tmp_s, 4

ST_3: tmp_115_1 [1/1] 0.00ns
:39  %tmp_115_1 = zext i8 %tmp_114_s to i64

ST_3: w_addr_31 [1/1] 0.00ns
:40  %w_addr_31 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_115_1

ST_3: w_load_1 [2/2] 2.71ns
:41  %w_load_1 = load i8* %w_addr_31, align 1

ST_3: tmp_119_1 [1/1] 0.00ns
:43  %tmp_119_1 = or i8 %tmp_s, 5

ST_3: tmp_120_1 [1/1] 0.00ns
:44  %tmp_120_1 = zext i8 %tmp_119_1 to i64

ST_3: w_addr_32 [1/1] 0.00ns
:45  %w_addr_32 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_120_1

ST_3: w_load_7 [2/2] 2.71ns
:46  %w_load_7 = load i8* %w_addr_32, align 1


 <State 4>: 2.71ns
ST_4: w_load_1 [1/2] 2.71ns
:41  %w_load_1 = load i8* %w_addr_31, align 1

ST_4: w_load_7 [1/2] 2.71ns
:46  %w_load_7 = load i8* %w_addr_32, align 1

ST_4: tmp_124_1 [1/1] 0.00ns
:48  %tmp_124_1 = or i8 %tmp_s, 6

ST_4: tmp_125_1 [1/1] 0.00ns
:49  %tmp_125_1 = zext i8 %tmp_124_1 to i64

ST_4: w_addr_33 [1/1] 0.00ns
:50  %w_addr_33 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_125_1

ST_4: w_load_8 [2/2] 2.71ns
:51  %w_load_8 = load i8* %w_addr_33, align 1

ST_4: tmp_129_1 [1/1] 0.00ns
:53  %tmp_129_1 = or i8 %tmp_s, 7

ST_4: tmp_130_1 [1/1] 0.00ns
:54  %tmp_130_1 = zext i8 %tmp_129_1 to i64

ST_4: w_addr_34 [1/1] 0.00ns
:55  %w_addr_34 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_130_1

ST_4: w_load_9 [2/2] 2.71ns
:56  %w_load_9 = load i8* %w_addr_34, align 1


 <State 5>: 2.71ns
ST_5: w_load_8 [1/2] 2.71ns
:51  %w_load_8 = load i8* %w_addr_33, align 1

ST_5: w_load_9 [1/2] 2.71ns
:56  %w_load_9 = load i8* %w_addr_34, align 1

ST_5: tmp_114_1 [1/1] 0.00ns
:58  %tmp_114_1 = or i8 %tmp_s, 8

ST_5: tmp_115_2 [1/1] 0.00ns
:59  %tmp_115_2 = zext i8 %tmp_114_1 to i64

ST_5: w_addr_35 [1/1] 0.00ns
:60  %w_addr_35 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_115_2

ST_5: w_load_2 [2/2] 2.71ns
:61  %w_load_2 = load i8* %w_addr_35, align 1

ST_5: tmp_119_2 [1/1] 0.00ns
:63  %tmp_119_2 = or i8 %tmp_s, 9

ST_5: tmp_120_2 [1/1] 0.00ns
:64  %tmp_120_2 = zext i8 %tmp_119_2 to i64

ST_5: w_addr_36 [1/1] 0.00ns
:65  %w_addr_36 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_120_2

ST_5: w_load_10 [2/2] 2.71ns
:66  %w_load_10 = load i8* %w_addr_36, align 1


 <State 6>: 2.71ns
ST_6: w_load_2 [1/2] 2.71ns
:61  %w_load_2 = load i8* %w_addr_35, align 1

ST_6: w_load_10 [1/2] 2.71ns
:66  %w_load_10 = load i8* %w_addr_36, align 1

ST_6: tmp_124_2 [1/1] 0.00ns
:68  %tmp_124_2 = or i8 %tmp_s, 10

ST_6: tmp_125_2 [1/1] 0.00ns
:69  %tmp_125_2 = zext i8 %tmp_124_2 to i64

ST_6: w_addr_37 [1/1] 0.00ns
:70  %w_addr_37 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_125_2

ST_6: w_load_11 [2/2] 2.71ns
:71  %w_load_11 = load i8* %w_addr_37, align 1

ST_6: tmp_129_2 [1/1] 0.00ns
:73  %tmp_129_2 = or i8 %tmp_s, 11

ST_6: tmp_130_2 [1/1] 0.00ns
:74  %tmp_130_2 = zext i8 %tmp_129_2 to i64

ST_6: w_addr_38 [1/1] 0.00ns
:75  %w_addr_38 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_130_2

ST_6: w_load_12 [2/2] 2.71ns
:76  %w_load_12 = load i8* %w_addr_38, align 1


 <State 7>: 2.71ns
ST_7: w_load_11 [1/2] 2.71ns
:71  %w_load_11 = load i8* %w_addr_37, align 1

ST_7: w_load_12 [1/2] 2.71ns
:76  %w_load_12 = load i8* %w_addr_38, align 1

ST_7: tmp_114_2 [1/1] 0.00ns
:78  %tmp_114_2 = or i8 %tmp_s, 12

ST_7: tmp_115_3 [1/1] 0.00ns
:79  %tmp_115_3 = zext i8 %tmp_114_2 to i64

ST_7: w_addr_39 [1/1] 0.00ns
:80  %w_addr_39 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_115_3

ST_7: w_load_3 [2/2] 2.71ns
:81  %w_load_3 = load i8* %w_addr_39, align 1

ST_7: tmp_119_3 [1/1] 0.00ns
:83  %tmp_119_3 = or i8 %tmp_s, 13

ST_7: tmp_120_3 [1/1] 0.00ns
:84  %tmp_120_3 = zext i8 %tmp_119_3 to i64

ST_7: w_addr_40 [1/1] 0.00ns
:85  %w_addr_40 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_120_3

ST_7: w_load_13 [2/2] 2.71ns
:86  %w_load_13 = load i8* %w_addr_40, align 1


 <State 8>: 4.08ns
ST_8: state_15_read_4 [1/1] 1.04ns
:1  %state_15_read_4 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_15_read)

ST_8: state_14_read_3 [1/1] 1.04ns
:2  %state_14_read_3 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_14_read)

ST_8: state_13_read_4 [1/1] 1.04ns
:3  %state_13_read_4 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_13_read)

ST_8: state_12_read13 [1/1] 1.04ns
:4  %state_12_read13 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_12_read)

ST_8: state_11_read12 [1/1] 1.04ns
:5  %state_11_read12 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_11_read)

ST_8: state_10_read11 [1/1] 1.04ns
:6  %state_10_read11 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_10_read)

ST_8: state_9_read_4 [1/1] 1.04ns
:7  %state_9_read_4 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_9_read)

ST_8: state_8_read_4 [1/1] 1.04ns
:8  %state_8_read_4 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_8_read)

ST_8: state_7_read_4 [1/1] 1.04ns
:9  %state_7_read_4 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_7_read)

ST_8: state_6_read_4 [1/1] 1.04ns
:10  %state_6_read_4 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_6_read)

ST_8: state_5_read_4 [1/1] 1.04ns
:11  %state_5_read_4 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_5_read)

ST_8: state_4_read_4 [1/1] 1.04ns
:12  %state_4_read_4 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_4_read)

ST_8: state_3_read_3 [1/1] 1.04ns
:13  %state_3_read_3 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_3_read)

ST_8: state_2_read_3 [1/1] 1.04ns
:14  %state_2_read_3 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_2_read)

ST_8: state_1_read_3 [1/1] 1.04ns
:15  %state_1_read_3 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_1_read)

ST_8: state_0_read_3 [1/1] 1.04ns
:16  %state_0_read_3 = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %state_0_read)

ST_8: state_0_write_assign [1/1] 1.37ns
:22  %state_0_write_assign = xor i8 %w_load, %state_0_read_3

ST_8: state_4_write_assign [1/1] 1.37ns
:27  %state_4_write_assign = xor i8 %w_load_4, %state_4_read_4

ST_8: state_8_write_assign [1/1] 1.37ns
:32  %state_8_write_assign = xor i8 %w_load_5, %state_8_read_4

ST_8: state_12_write_assign [1/1] 1.37ns
:37  %state_12_write_assign = xor i8 %w_load_6, %state_12_read13

ST_8: state_1_write_assign [1/1] 1.37ns
:42  %state_1_write_assign = xor i8 %w_load_1, %state_1_read_3

ST_8: state_5_write_assign [1/1] 1.37ns
:47  %state_5_write_assign = xor i8 %w_load_7, %state_5_read_4

ST_8: state_9_write_assign [1/1] 1.37ns
:52  %state_9_write_assign = xor i8 %w_load_8, %state_9_read_4

ST_8: state_13_write_assign [1/1] 1.37ns
:57  %state_13_write_assign = xor i8 %w_load_9, %state_13_read_4

ST_8: state_2_write_assign [1/1] 1.37ns
:62  %state_2_write_assign = xor i8 %w_load_2, %state_2_read_3

ST_8: state_6_write_assign [1/1] 1.37ns
:67  %state_6_write_assign = xor i8 %w_load_10, %state_6_read_4

ST_8: state_10_write_assign [1/1] 1.37ns
:72  %state_10_write_assign = xor i8 %w_load_11, %state_10_read11

ST_8: state_14_write_assign [1/1] 1.37ns
:77  %state_14_write_assign = xor i8 %w_load_12, %state_14_read_3

ST_8: w_load_3 [1/2] 2.71ns
:81  %w_load_3 = load i8* %w_addr_39, align 1

ST_8: state_3_write_assign [1/1] 1.37ns
:82  %state_3_write_assign = xor i8 %w_load_3, %state_3_read_3

ST_8: w_load_13 [1/2] 2.71ns
:86  %w_load_13 = load i8* %w_addr_40, align 1

ST_8: state_7_write_assign [1/1] 1.37ns
:87  %state_7_write_assign = xor i8 %w_load_13, %state_7_read_4

ST_8: tmp_124_3 [1/1] 0.00ns
:88  %tmp_124_3 = or i8 %tmp_s, 14

ST_8: tmp_125_3 [1/1] 0.00ns
:89  %tmp_125_3 = zext i8 %tmp_124_3 to i64

ST_8: w_addr_41 [1/1] 0.00ns
:90  %w_addr_41 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_125_3

ST_8: w_load_14 [2/2] 2.71ns
:91  %w_load_14 = load i8* %w_addr_41, align 1

ST_8: tmp_129_3 [1/1] 0.00ns
:93  %tmp_129_3 = or i8 %tmp_s, 15

ST_8: tmp_130_3 [1/1] 0.00ns
:94  %tmp_130_3 = zext i8 %tmp_129_3 to i64

ST_8: w_addr_42 [1/1] 0.00ns
:95  %w_addr_42 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_130_3

ST_8: w_load_15 [2/2] 2.71ns
:96  %w_load_15 = load i8* %w_addr_42, align 1


 <State 9>: 4.08ns
ST_9: w_load_14 [1/2] 2.71ns
:91  %w_load_14 = load i8* %w_addr_41, align 1

ST_9: state_11_write_assign [1/1] 1.37ns
:92  %state_11_write_assign = xor i8 %w_load_14, %state_11_read12

ST_9: w_load_15 [1/2] 2.71ns
:96  %w_load_15 = load i8* %w_addr_42, align 1

ST_9: state_15_write_assign [1/1] 1.37ns
:97  %state_15_write_assign = xor i8 %w_load_15, %state_15_read_4

ST_9: mrv [1/1] 0.00ns
:98  %mrv = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } undef, i8 %state_0_write_assign, 0

ST_9: mrv_1 [1/1] 0.00ns
:99  %mrv_1 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv, i8 %state_1_write_assign, 1

ST_9: mrv_2 [1/1] 0.00ns
:100  %mrv_2 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_1, i8 %state_2_write_assign, 2

ST_9: mrv_3 [1/1] 0.00ns
:101  %mrv_3 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_2, i8 %state_3_write_assign, 3

ST_9: mrv_4 [1/1] 0.00ns
:102  %mrv_4 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_3, i8 %state_4_write_assign, 4

ST_9: mrv_5 [1/1] 0.00ns
:103  %mrv_5 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_4, i8 %state_5_write_assign, 5

ST_9: mrv_6 [1/1] 0.00ns
:104  %mrv_6 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_5, i8 %state_6_write_assign, 6

ST_9: mrv_7 [1/1] 0.00ns
:105  %mrv_7 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_6, i8 %state_7_write_assign, 7

ST_9: mrv_8 [1/1] 0.00ns
:106  %mrv_8 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_7, i8 %state_8_write_assign, 8

ST_9: mrv_9 [1/1] 0.00ns
:107  %mrv_9 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_8, i8 %state_9_write_assign, 9

ST_9: mrv_10 [1/1] 0.00ns
:108  %mrv_10 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_9, i8 %state_10_write_assign, 10

ST_9: mrv_11 [1/1] 0.00ns
:109  %mrv_11 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_10, i8 %state_11_write_assign, 11

ST_9: mrv_12 [1/1] 0.00ns
:110  %mrv_12 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_11, i8 %state_12_write_assign, 12

ST_9: mrv_13 [1/1] 0.00ns
:111  %mrv_13 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_12, i8 %state_13_write_assign, 13

ST_9: mrv_14 [1/1] 0.00ns
:112  %mrv_14 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_13, i8 %state_14_write_assign, 14

ST_9: mrv_s [1/1] 0.00ns
:113  %mrv_s = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_14, i8 %state_15_write_assign, 15

ST_9: stg_140 [1/1] 0.00ns
:114  ret { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_s



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
