-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity single_block_AES_encrypt_add_round_key is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    state_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_4_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_5_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_6_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_7_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_8_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_9_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_10_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_11_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_12_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_13_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_14_read : IN STD_LOGIC_VECTOR (7 downto 0);
    state_15_read : IN STD_LOGIC_VECTOR (7 downto 0);
    w_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_ce0 : OUT STD_LOGIC;
    w_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    w_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_ce1 : OUT STD_LOGIC;
    w_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    r : IN STD_LOGIC_VECTOR (4 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of single_block_AES_encrypt_add_round_key is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_pp0_stg1_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_pp0_stg2_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_pp0_stg3_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_pp0_stg4_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_pp0_stg5_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_pp0_stg6_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_pp0_stg7_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00001001";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_E : STD_LOGIC_VECTOR (7 downto 0) := "00001110";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_25 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_pp0_stg7_fsm_7 : STD_LOGIC;
    signal ap_sig_45 : BOOLEAN;
    signal tmp_s_fu_319_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_647 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_load_reg_675 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_1 : STD_LOGIC;
    signal ap_sig_112 : BOOLEAN;
    signal w_load_4_reg_680 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_load_5_reg_695 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_2 : STD_LOGIC;
    signal ap_sig_128 : BOOLEAN;
    signal w_load_6_reg_700 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_load_1_reg_715 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_3 : STD_LOGIC;
    signal ap_sig_144 : BOOLEAN;
    signal w_load_7_reg_720 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_load_8_reg_735 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg4_fsm_4 : STD_LOGIC;
    signal ap_sig_160 : BOOLEAN;
    signal w_load_9_reg_740 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_load_2_reg_755 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg5_fsm_5 : STD_LOGIC;
    signal ap_sig_176 : BOOLEAN;
    signal w_load_10_reg_760 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_load_11_reg_775 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg6_fsm_6 : STD_LOGIC;
    signal ap_sig_192 : BOOLEAN;
    signal w_load_12_reg_780 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_15_read_4_reg_795 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_11_read12_reg_800 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_0_write_assign_fu_463_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_0_write_assign_reg_805 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_4_write_assign_fu_468_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_4_write_assign_reg_810 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_8_write_assign_fu_473_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_8_write_assign_reg_815 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_12_write_assign_fu_478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_12_write_assign_reg_820 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_1_write_assign_fu_483_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_1_write_assign_reg_825 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_5_write_assign_fu_488_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_5_write_assign_reg_830 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_9_write_assign_fu_493_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_9_write_assign_reg_835 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_13_write_assign_fu_498_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_13_write_assign_reg_840 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_2_write_assign_fu_503_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_2_write_assign_reg_845 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_6_write_assign_fu_508_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_6_write_assign_reg_850 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_10_write_assign_fu_513_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_10_write_assign_reg_855 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_14_write_assign_fu_518_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_14_write_assign_reg_860 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_3_write_assign_fu_523_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_3_write_assign_reg_865 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_7_write_assign_fu_529_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_7_write_assign_reg_870 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppiten_pp0_iter0_preg : STD_LOGIC := '0';
    signal ap_reg_ptbuf_state_0_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_1_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_2_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_3_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_4_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_5_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_6_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_7_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_8_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_9_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_10_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_11_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_12_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_13_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_14_read : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ptbuf_state_15_read : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_41_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_115_1_fu_368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_120_1_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_125_1_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_1_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_115_2_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_120_2_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_125_2_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_2_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_115_3_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_120_3_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_125_3_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_3_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_315_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_42_fu_332_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_353_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_114_s_fu_363_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_119_1_fu_373_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_124_1_fu_383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_129_1_fu_393_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_114_1_fu_403_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_119_2_fu_413_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_124_2_fu_423_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_129_2_fu_433_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_114_2_fu_443_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_119_3_fu_453_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_124_3_fu_535_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_129_3_fu_545_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_11_write_assign_fu_555_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_15_write_assign_fu_560_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;
    signal ap_sig_pprststart_0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not((not((ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7) and (ap_const_logic_1 = ap_ce))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_iter0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_iter0_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not((not((ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
                    ap_reg_ppiten_pp0_iter0_preg <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                ap_reg_ptbuf_state_0_read <= state_0_read;
                ap_reg_ptbuf_state_10_read <= state_10_read;
                ap_reg_ptbuf_state_11_read <= state_11_read;
                ap_reg_ptbuf_state_12_read <= state_12_read;
                ap_reg_ptbuf_state_13_read <= state_13_read;
                ap_reg_ptbuf_state_14_read <= state_14_read;
                ap_reg_ptbuf_state_15_read <= state_15_read;
                ap_reg_ptbuf_state_1_read <= state_1_read;
                ap_reg_ptbuf_state_2_read <= state_2_read;
                ap_reg_ptbuf_state_3_read <= state_3_read;
                ap_reg_ptbuf_state_4_read <= state_4_read;
                ap_reg_ptbuf_state_5_read <= state_5_read;
                ap_reg_ptbuf_state_6_read <= state_6_read;
                ap_reg_ptbuf_state_7_read <= state_7_read;
                ap_reg_ptbuf_state_8_read <= state_8_read;
                ap_reg_ptbuf_state_9_read <= state_9_read;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7) and (ap_const_logic_1 = ap_ce))) then
                state_0_write_assign_reg_805 <= state_0_write_assign_fu_463_p2;
                state_10_write_assign_reg_855 <= state_10_write_assign_fu_513_p2;
                state_11_read12_reg_800 <= ap_reg_ptbuf_state_11_read;
                state_12_write_assign_reg_820 <= state_12_write_assign_fu_478_p2;
                state_13_write_assign_reg_840 <= state_13_write_assign_fu_498_p2;
                state_14_write_assign_reg_860 <= state_14_write_assign_fu_518_p2;
                state_15_read_4_reg_795 <= ap_reg_ptbuf_state_15_read;
                state_1_write_assign_reg_825 <= state_1_write_assign_fu_483_p2;
                state_2_write_assign_reg_845 <= state_2_write_assign_fu_503_p2;
                state_3_write_assign_reg_865 <= state_3_write_assign_fu_523_p2;
                state_4_write_assign_reg_810 <= state_4_write_assign_fu_468_p2;
                state_5_write_assign_reg_830 <= state_5_write_assign_fu_488_p2;
                state_6_write_assign_reg_850 <= state_6_write_assign_fu_508_p2;
                state_7_write_assign_reg_870 <= state_7_write_assign_fu_529_p2;
                state_8_write_assign_reg_815 <= state_8_write_assign_fu_473_p2;
                state_9_write_assign_reg_835 <= state_9_write_assign_fu_493_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0))))) then
                    tmp_s_reg_647(7 downto 4) <= tmp_s_fu_319_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5))) then
                w_load_10_reg_760 <= w_q1;
                w_load_2_reg_755 <= w_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6))) then
                w_load_11_reg_775 <= w_q0;
                w_load_12_reg_780 <= w_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3))) then
                w_load_1_reg_715 <= w_q0;
                w_load_7_reg_720 <= w_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1))) then
                w_load_4_reg_680 <= w_q1;
                w_load_reg_675 <= w_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2))) then
                w_load_5_reg_695 <= w_q0;
                w_load_6_reg_700 <= w_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4))) then
                w_load_8_reg_735 <= w_q0;
                w_load_9_reg_740 <= w_q1;
            end if;
        end if;
    end process;
    tmp_s_reg_647(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_ce, ap_sig_pprstidle_pp0, ap_sig_pprststart_0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                if ((not((not((ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) and not((ap_const_logic_1 = ap_sig_pprstidle_pp0)) and not((not((not((ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) and (ap_const_logic_1 = ap_sig_pprststart_0))) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_1;
                elsif (((not((not((ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) and (ap_const_logic_1 = ap_sig_pprstidle_pp0)) or (not((not((ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))) and (ap_const_logic_1 = ap_sig_pprststart_0)))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                end if;
            when ap_ST_pp0_stg1_fsm_1 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_1;
                end if;
            when ap_ST_pp0_stg2_fsm_2 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_2;
                end if;
            when ap_ST_pp0_stg3_fsm_3 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_pp0_stg4_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_3;
                end if;
            when ap_ST_pp0_stg4_fsm_4 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_pp0_stg5_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg4_fsm_4;
                end if;
            when ap_ST_pp0_stg5_fsm_5 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_pp0_stg6_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg5_fsm_5;
                end if;
            when ap_ST_pp0_stg6_fsm_6 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_pp0_stg7_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg6_fsm_6;
                end if;
            when ap_ST_pp0_stg7_fsm_7 => 
                if ((ap_const_logic_1 = ap_ce)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg7_fsm_7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_ce)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_iter0_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
            ap_reg_ppiten_pp0_it0 <= ap_start;
        else 
            ap_reg_ppiten_pp0_it0 <= ap_reg_ppiten_pp0_iter0_preg;
        end if; 
    end process;

    ap_return_0 <= state_0_write_assign_reg_805;
    ap_return_1 <= state_1_write_assign_reg_825;
    ap_return_10 <= state_10_write_assign_reg_855;
    ap_return_11 <= state_11_write_assign_fu_555_p2;
    ap_return_12 <= state_12_write_assign_reg_820;
    ap_return_13 <= state_13_write_assign_reg_840;
    ap_return_14 <= state_14_write_assign_reg_860;
    ap_return_15 <= state_15_write_assign_fu_560_p2;
    ap_return_2 <= state_2_write_assign_reg_845;
    ap_return_3 <= state_3_write_assign_reg_865;
    ap_return_4 <= state_4_write_assign_reg_810;
    ap_return_5 <= state_5_write_assign_reg_830;
    ap_return_6 <= state_6_write_assign_reg_850;
    ap_return_7 <= state_7_write_assign_reg_870;
    ap_return_8 <= state_8_write_assign_reg_815;
    ap_return_9 <= state_9_write_assign_reg_835;

    ap_sig_112_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_112 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_128_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_128 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_144_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_144 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_160_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_160 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_176 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_192 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_45_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_45 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_25)
    begin
        if (ap_sig_25) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg1_fsm_1_assign_proc : process(ap_sig_112)
    begin
        if (ap_sig_112) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg2_fsm_2_assign_proc : process(ap_sig_128)
    begin
        if (ap_sig_128) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg3_fsm_3_assign_proc : process(ap_sig_144)
    begin
        if (ap_sig_144) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg4_fsm_4_assign_proc : process(ap_sig_160)
    begin
        if (ap_sig_160) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg5_fsm_5_assign_proc : process(ap_sig_176)
    begin
        if (ap_sig_176) then 
            ap_sig_cseq_ST_pp0_stg5_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg5_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg6_fsm_6_assign_proc : process(ap_sig_192)
    begin
        if (ap_sig_192) then 
            ap_sig_cseq_ST_pp0_stg6_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg6_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp0_stg7_fsm_7_assign_proc : process(ap_sig_45)
    begin
        if (ap_sig_45) then 
            ap_sig_cseq_ST_pp0_stg7_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg7_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_pprstidle_pp0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_0 = ap_reg_ppiten_pp0_it0))) then 
            ap_sig_pprstidle_pp0 <= ap_const_logic_1;
        else 
            ap_sig_pprstidle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_pprststart_0_assign_proc : process(ap_start, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_0 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_start))) then 
            ap_sig_pprststart_0 <= ap_const_logic_1;
        else 
            ap_sig_pprststart_0 <= ap_const_logic_0;
        end if; 
    end process;

    state_0_write_assign_fu_463_p2 <= (w_load_reg_675 xor ap_reg_ptbuf_state_0_read);
    state_10_write_assign_fu_513_p2 <= (w_load_11_reg_775 xor ap_reg_ptbuf_state_10_read);
    state_11_write_assign_fu_555_p2 <= (w_q0 xor state_11_read12_reg_800);
    state_12_write_assign_fu_478_p2 <= (w_load_6_reg_700 xor ap_reg_ptbuf_state_12_read);
    state_13_write_assign_fu_498_p2 <= (w_load_9_reg_740 xor ap_reg_ptbuf_state_13_read);
    state_14_write_assign_fu_518_p2 <= (w_load_12_reg_780 xor ap_reg_ptbuf_state_14_read);
    state_15_write_assign_fu_560_p2 <= (w_q1 xor state_15_read_4_reg_795);
    state_1_write_assign_fu_483_p2 <= (w_load_1_reg_715 xor ap_reg_ptbuf_state_1_read);
    state_2_write_assign_fu_503_p2 <= (w_load_2_reg_755 xor ap_reg_ptbuf_state_2_read);
    state_3_write_assign_fu_523_p2 <= (w_q0 xor ap_reg_ptbuf_state_3_read);
    state_4_write_assign_fu_468_p2 <= (w_load_4_reg_680 xor ap_reg_ptbuf_state_4_read);
    state_5_write_assign_fu_488_p2 <= (w_load_7_reg_720 xor ap_reg_ptbuf_state_5_read);
    state_6_write_assign_fu_508_p2 <= (w_load_10_reg_760 xor ap_reg_ptbuf_state_6_read);
    state_7_write_assign_fu_529_p2 <= (w_q1 xor ap_reg_ptbuf_state_7_read);
    state_8_write_assign_fu_473_p2 <= (w_load_5_reg_695 xor ap_reg_ptbuf_state_8_read);
    state_9_write_assign_fu_493_p2 <= (w_load_8_reg_735 xor ap_reg_ptbuf_state_9_read);
    tmp_114_1_fu_403_p2 <= (tmp_s_reg_647 or ap_const_lv8_8);
    tmp_114_2_fu_443_p2 <= (tmp_s_reg_647 or ap_const_lv8_C);
    tmp_114_s_fu_363_p2 <= (tmp_s_reg_647 or ap_const_lv8_4);
    tmp_115_1_fu_368_p1 <= std_logic_vector(resize(unsigned(tmp_114_s_fu_363_p2),64));
    tmp_115_2_fu_408_p1 <= std_logic_vector(resize(unsigned(tmp_114_1_fu_403_p2),64));
    tmp_115_3_fu_448_p1 <= std_logic_vector(resize(unsigned(tmp_114_2_fu_443_p2),64));
    tmp_119_1_fu_373_p2 <= (tmp_s_reg_647 or ap_const_lv8_5);
    tmp_119_2_fu_413_p2 <= (tmp_s_reg_647 or ap_const_lv8_9);
    tmp_119_3_fu_453_p2 <= (tmp_s_reg_647 or ap_const_lv8_D);
    tmp_120_1_fu_378_p1 <= std_logic_vector(resize(unsigned(tmp_119_1_fu_373_p2),64));
    tmp_120_2_fu_418_p1 <= std_logic_vector(resize(unsigned(tmp_119_2_fu_413_p2),64));
    tmp_120_3_fu_458_p1 <= std_logic_vector(resize(unsigned(tmp_119_3_fu_453_p2),64));
    tmp_124_1_fu_383_p2 <= (tmp_s_reg_647 or ap_const_lv8_6);
    tmp_124_2_fu_423_p2 <= (tmp_s_reg_647 or ap_const_lv8_A);
    tmp_124_3_fu_535_p2 <= (tmp_s_reg_647 or ap_const_lv8_E);
    tmp_125_1_fu_388_p1 <= std_logic_vector(resize(unsigned(tmp_124_1_fu_383_p2),64));
    tmp_125_2_fu_428_p1 <= std_logic_vector(resize(unsigned(tmp_124_2_fu_423_p2),64));
    tmp_125_3_fu_540_p1 <= std_logic_vector(resize(unsigned(tmp_124_3_fu_535_p2),64));
    tmp_129_1_fu_393_p2 <= (tmp_s_reg_647 or ap_const_lv8_7);
    tmp_129_2_fu_433_p2 <= (tmp_s_reg_647 or ap_const_lv8_B);
    tmp_129_3_fu_545_p2 <= (tmp_s_reg_647 or ap_const_lv8_F);
    tmp_130_1_fu_398_p1 <= std_logic_vector(resize(unsigned(tmp_129_1_fu_393_p2),64));
    tmp_130_2_fu_438_p1 <= std_logic_vector(resize(unsigned(tmp_129_2_fu_433_p2),64));
    tmp_130_3_fu_550_p1 <= std_logic_vector(resize(unsigned(tmp_129_3_fu_545_p2),64));
    tmp_41_fu_327_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_319_p3),64));
    tmp_42_fu_332_p2 <= (tmp_s_fu_319_p3 or ap_const_lv8_1);
    tmp_43_fu_338_p1 <= std_logic_vector(resize(unsigned(tmp_42_fu_332_p2),64));
    tmp_44_fu_343_p2 <= (tmp_s_reg_647 or ap_const_lv8_2);
    tmp_45_fu_348_p1 <= std_logic_vector(resize(unsigned(tmp_44_fu_343_p2),64));
    tmp_46_fu_353_p2 <= (tmp_s_reg_647 or ap_const_lv8_3);
    tmp_47_fu_358_p1 <= std_logic_vector(resize(unsigned(tmp_46_fu_353_p2),64));
    tmp_fu_315_p1 <= r(4 - 1 downto 0);
    tmp_s_fu_319_p3 <= (tmp_fu_315_p1 & ap_const_lv4_0);

    w_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, tmp_41_fu_327_p1, tmp_45_fu_348_p1, tmp_115_1_fu_368_p1, tmp_125_1_fu_388_p1, tmp_115_2_fu_408_p1, tmp_125_2_fu_428_p1, tmp_115_3_fu_448_p1, tmp_125_3_fu_540_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7)) then 
                w_address0 <= tmp_125_3_fu_540_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6)) then 
                w_address0 <= tmp_115_3_fu_448_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) then 
                w_address0 <= tmp_125_2_fu_428_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                w_address0 <= tmp_115_2_fu_408_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then 
                w_address0 <= tmp_125_1_fu_388_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then 
                w_address0 <= tmp_115_1_fu_368_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                w_address0 <= tmp_45_fu_348_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                w_address0 <= tmp_41_fu_327_p1(8 - 1 downto 0);
            else 
                w_address0 <= "XXXXXXXX";
            end if;
        else 
            w_address0 <= "XXXXXXXX";
        end if; 
    end process;


    w_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6, tmp_43_fu_338_p1, tmp_47_fu_358_p1, tmp_120_1_fu_378_p1, tmp_130_1_fu_398_p1, tmp_120_2_fu_418_p1, tmp_130_2_fu_438_p1, tmp_120_3_fu_458_p1, tmp_130_3_fu_550_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7)) then 
                w_address1 <= tmp_130_3_fu_550_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6)) then 
                w_address1 <= tmp_120_3_fu_458_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) then 
                w_address1 <= tmp_130_2_fu_438_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) then 
                w_address1 <= tmp_120_2_fu_418_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) then 
                w_address1 <= tmp_130_1_fu_398_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) then 
                w_address1 <= tmp_120_1_fu_378_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) then 
                w_address1 <= tmp_47_fu_358_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0)) then 
                w_address1 <= tmp_43_fu_338_p1(8 - 1 downto 0);
            else 
                w_address1 <= "XXXXXXXX";
            end if;
        else 
            w_address1 <= "XXXXXXXX";
        end if; 
    end process;


    w_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_ce, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            w_ce0 <= ap_const_logic_1;
        else 
            w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_pp0_stg0_fsm_0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg7_fsm_7, ap_ce, ap_sig_cseq_ST_pp0_stg1_fsm_1, ap_sig_cseq_ST_pp0_stg2_fsm_2, ap_sig_cseq_ST_pp0_stg3_fsm_3, ap_sig_cseq_ST_pp0_stg4_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_7) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_6)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_ce) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_start = ap_const_logic_0)))))) then 
            w_ce1 <= ap_const_logic_1;
        else 
            w_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
