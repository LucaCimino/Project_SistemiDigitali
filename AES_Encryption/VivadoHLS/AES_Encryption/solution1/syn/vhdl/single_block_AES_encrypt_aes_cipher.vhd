-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity single_block_AES_encrypt_aes_cipher is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_ce0 : OUT STD_LOGIC;
    w_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    w_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_ce1 : OUT STD_LOGIC;
    w_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of single_block_AES_encrypt_aes_cipher is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_38 : BOOLEAN;
    signal i_12_fu_181_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_12_reg_345 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_72 : BOOLEAN;
    signal tmp_cast_fu_187_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_reg_350 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_195_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_reg_355 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_fu_209_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_3_reg_363 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_89 : BOOLEAN;
    signal exitcond3_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_241_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_43_reg_373 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_cast3_cast_fu_256_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_cast3_cast_reg_381 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_105 : BOOLEAN;
    signal r_1_fu_261_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_1_reg_386 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_13_fu_273_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_13_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_116 : BOOLEAN;
    signal tmp_69_cast_fu_279_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_69_cast_reg_399 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_287_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_45_reg_404 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_fu_301_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_4_reg_412 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_132 : BOOLEAN;
    signal exitcond_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_333_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_49_reg_422 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_ce0 : STD_LOGIC;
    signal state_we0 : STD_LOGIC;
    signal state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_ce1 : STD_LOGIC;
    signal state_we1 : STD_LOGIC;
    signal state_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start : STD_LOGIC;
    signal grp_single_block_AES_encrypt_mix_columns_fu_148_ap_done : STD_LOGIC;
    signal grp_single_block_AES_encrypt_mix_columns_fu_148_ap_idle : STD_LOGIC;
    signal grp_single_block_AES_encrypt_mix_columns_fu_148_ap_ready : STD_LOGIC;
    signal grp_single_block_AES_encrypt_mix_columns_fu_148_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_block_AES_encrypt_mix_columns_fu_148_state_ce0 : STD_LOGIC;
    signal grp_single_block_AES_encrypt_mix_columns_fu_148_state_we0 : STD_LOGIC;
    signal grp_single_block_AES_encrypt_mix_columns_fu_148_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start : STD_LOGIC;
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done : STD_LOGIC;
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_ap_idle : STD_LOGIC;
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_ap_ready : STD_LOGIC;
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_state_ce0 : STD_LOGIC;
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_state_we0 : STD_LOGIC;
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_state_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_state_ce1 : STD_LOGIC;
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_state_we1 : STD_LOGIC;
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_state_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_w_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_w_ce0 : STD_LOGIC;
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_w_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_w_ce1 : STD_LOGIC;
    signal grp_single_block_AES_encrypt_add_round_key_fu_153_r : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start : STD_LOGIC;
    signal grp_single_block_AES_encrypt_shift_rows_fu_163_ap_done : STD_LOGIC;
    signal grp_single_block_AES_encrypt_shift_rows_fu_163_ap_idle : STD_LOGIC;
    signal grp_single_block_AES_encrypt_shift_rows_fu_163_ap_ready : STD_LOGIC;
    signal grp_single_block_AES_encrypt_shift_rows_fu_163_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_block_AES_encrypt_shift_rows_fu_163_state_ce0 : STD_LOGIC;
    signal grp_single_block_AES_encrypt_shift_rows_fu_163_state_we0 : STD_LOGIC;
    signal grp_single_block_AES_encrypt_shift_rows_fu_163_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start : STD_LOGIC;
    signal grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_done : STD_LOGIC;
    signal grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_idle : STD_LOGIC;
    signal grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_ready : STD_LOGIC;
    signal grp_single_block_AES_encrypt_sub_bytes_fu_168_state_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_block_AES_encrypt_sub_bytes_fu_168_state_ce0 : STD_LOGIC;
    signal grp_single_block_AES_encrypt_sub_bytes_fu_168_state_we0 : STD_LOGIC;
    signal grp_single_block_AES_encrypt_sub_bytes_fu_168_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_92 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_103 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_227 : BOOLEAN;
    signal r_reg_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_237 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_247 : BOOLEAN;
    signal i_1_reg_126 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_257 : BOOLEAN;
    signal j_1_reg_137 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_269 : BOOLEAN;
    signal ap_reg_grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_278 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_285 : BOOLEAN;
    signal ap_reg_grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_297 : BOOLEAN;
    signal ap_reg_grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_311 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_318 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_326 : BOOLEAN;
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_333 : BOOLEAN;
    signal ap_reg_grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_343 : BOOLEAN;
    signal exitcond2_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_356 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_363 : BOOLEAN;
    signal tmp_42_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_191_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_55_fu_219_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_40_fu_223_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_41_fu_231_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_63_cast_fu_215_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_56_fu_283_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_71_cast_fu_307_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_46_fu_311_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_57_fu_321_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_48_fu_325_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component single_block_AES_encrypt_mix_columns IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component single_block_AES_encrypt_add_round_key IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        w_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        w_ce0 : OUT STD_LOGIC;
        w_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        w_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        w_ce1 : OUT STD_LOGIC;
        w_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        r : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component single_block_AES_encrypt_shift_rows IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component single_block_AES_encrypt_sub_bytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component single_block_AES_encrypt_aes_cipher_state IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    state_U : component single_block_AES_encrypt_aes_cipher_state
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_address0,
        ce0 => state_ce0,
        we0 => state_we0,
        d0 => state_d0,
        q0 => state_q0,
        address1 => grp_single_block_AES_encrypt_add_round_key_fu_153_state_address1,
        ce1 => state_ce1,
        we1 => state_we1,
        d1 => grp_single_block_AES_encrypt_add_round_key_fu_153_state_d1,
        q1 => state_q1);

    grp_single_block_AES_encrypt_mix_columns_fu_148 : component single_block_AES_encrypt_mix_columns
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start,
        ap_done => grp_single_block_AES_encrypt_mix_columns_fu_148_ap_done,
        ap_idle => grp_single_block_AES_encrypt_mix_columns_fu_148_ap_idle,
        ap_ready => grp_single_block_AES_encrypt_mix_columns_fu_148_ap_ready,
        state_address0 => grp_single_block_AES_encrypt_mix_columns_fu_148_state_address0,
        state_ce0 => grp_single_block_AES_encrypt_mix_columns_fu_148_state_ce0,
        state_we0 => grp_single_block_AES_encrypt_mix_columns_fu_148_state_we0,
        state_d0 => grp_single_block_AES_encrypt_mix_columns_fu_148_state_d0,
        state_q0 => state_q0);

    grp_single_block_AES_encrypt_add_round_key_fu_153 : component single_block_AES_encrypt_add_round_key
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start,
        ap_done => grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done,
        ap_idle => grp_single_block_AES_encrypt_add_round_key_fu_153_ap_idle,
        ap_ready => grp_single_block_AES_encrypt_add_round_key_fu_153_ap_ready,
        state_address0 => grp_single_block_AES_encrypt_add_round_key_fu_153_state_address0,
        state_ce0 => grp_single_block_AES_encrypt_add_round_key_fu_153_state_ce0,
        state_we0 => grp_single_block_AES_encrypt_add_round_key_fu_153_state_we0,
        state_d0 => grp_single_block_AES_encrypt_add_round_key_fu_153_state_d0,
        state_q0 => state_q0,
        state_address1 => grp_single_block_AES_encrypt_add_round_key_fu_153_state_address1,
        state_ce1 => grp_single_block_AES_encrypt_add_round_key_fu_153_state_ce1,
        state_we1 => grp_single_block_AES_encrypt_add_round_key_fu_153_state_we1,
        state_d1 => grp_single_block_AES_encrypt_add_round_key_fu_153_state_d1,
        state_q1 => state_q1,
        w_address0 => grp_single_block_AES_encrypt_add_round_key_fu_153_w_address0,
        w_ce0 => grp_single_block_AES_encrypt_add_round_key_fu_153_w_ce0,
        w_q0 => w_q0,
        w_address1 => grp_single_block_AES_encrypt_add_round_key_fu_153_w_address1,
        w_ce1 => grp_single_block_AES_encrypt_add_round_key_fu_153_w_ce1,
        w_q1 => w_q1,
        r => grp_single_block_AES_encrypt_add_round_key_fu_153_r);

    grp_single_block_AES_encrypt_shift_rows_fu_163 : component single_block_AES_encrypt_shift_rows
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start,
        ap_done => grp_single_block_AES_encrypt_shift_rows_fu_163_ap_done,
        ap_idle => grp_single_block_AES_encrypt_shift_rows_fu_163_ap_idle,
        ap_ready => grp_single_block_AES_encrypt_shift_rows_fu_163_ap_ready,
        state_address0 => grp_single_block_AES_encrypt_shift_rows_fu_163_state_address0,
        state_ce0 => grp_single_block_AES_encrypt_shift_rows_fu_163_state_ce0,
        state_we0 => grp_single_block_AES_encrypt_shift_rows_fu_163_state_we0,
        state_d0 => grp_single_block_AES_encrypt_shift_rows_fu_163_state_d0,
        state_q0 => state_q0);

    grp_single_block_AES_encrypt_sub_bytes_fu_168 : component single_block_AES_encrypt_sub_bytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start,
        ap_done => grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_done,
        ap_idle => grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_idle,
        ap_ready => grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_ready,
        state_address0 => grp_single_block_AES_encrypt_sub_bytes_fu_168_state_address0,
        state_ce0 => grp_single_block_AES_encrypt_sub_bytes_fu_168_state_ce0,
        state_we0 => grp_single_block_AES_encrypt_sub_bytes_fu_168_state_we0,
        state_d0 => grp_single_block_AES_encrypt_sub_bytes_fu_168_state_d0,
        state_q0 => state_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond4_fu_175_p2 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
                    ap_reg_grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_single_block_AES_encrypt_add_round_key_fu_153_ap_ready)) then 
                    ap_reg_grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                    ap_reg_grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_single_block_AES_encrypt_mix_columns_fu_148_ap_ready)) then 
                    ap_reg_grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
                    ap_reg_grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_single_block_AES_encrypt_shift_rows_fu_163_ap_ready)) then 
                    ap_reg_grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_250_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond2_fu_250_p2))))) then 
                    ap_reg_grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_ready)) then 
                    ap_reg_grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not((ap_const_lv1_0 = exitcond_fu_295_p2)))) then 
                i_1_reg_126 <= i_13_reg_394;
            elsif ((not((ap_const_logic_0 = grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done)) and (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
                i_1_reg_126 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond3_fu_203_p2)))) then 
                i_reg_92 <= i_12_reg_345;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_92 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_1_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_lv1_0 = exitcond1_fu_267_p2))) then 
                j_1_reg_137 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                j_1_reg_137 <= j_4_reg_412;
            end if; 
        end if;
    end process;

    j_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_175_p2 = ap_const_lv1_0))) then 
                j_reg_103 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                j_reg_103 <= j_3_reg_363;
            end if; 
        end if;
    end process;

    r_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_logic_0 = grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done))) then
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                    r_reg_114 <= r_1_reg_386;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                    r_reg_114 <= ap_const_lv4_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_12_reg_345 <= i_12_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                i_13_reg_394 <= i_13_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_3_reg_363 <= j_3_fu_209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                j_4_reg_412 <= j_4_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                r_1_reg_386 <= r_1_fu_261_p2;
                    r_cast3_cast_reg_381(3 downto 0) <= r_cast3_cast_fu_256_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_203_p2))) then
                tmp_43_reg_373 <= tmp_43_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_lv1_0 = exitcond1_fu_267_p2))) then
                    tmp_45_reg_404(3 downto 2) <= tmp_45_fu_287_p3(3 downto 2);
                    tmp_69_cast_reg_399(2 downto 0) <= tmp_69_cast_fu_279_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and (ap_const_lv1_0 = exitcond_fu_295_p2))) then
                tmp_49_reg_422 <= tmp_49_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond4_fu_175_p2 = ap_const_lv1_0))) then
                    tmp_cast_reg_350(2 downto 0) <= tmp_cast_fu_187_p1(2 downto 0);
                    tmp_s_reg_355(3 downto 2) <= tmp_s_fu_195_p3(3 downto 2);
            end if;
        end if;
    end process;
    tmp_cast_reg_350(3) <= '0';
    tmp_s_reg_355(1 downto 0) <= "00";
    r_cast3_cast_reg_381(5 downto 4) <= "00";
    tmp_69_cast_reg_399(3) <= '0';
    tmp_45_reg_404(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond4_fu_175_p2, exitcond3_fu_203_p2, exitcond1_fu_267_p2, exitcond_fu_295_p2, grp_single_block_AES_encrypt_mix_columns_fu_148_ap_done, grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done, grp_single_block_AES_encrypt_shift_rows_fu_163_ap_done, grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_done, exitcond2_fu_250_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond4_fu_175_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond3_fu_203_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_logic_0 = grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_250_p2))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_logic_0 = grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_done))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_logic_0 = grp_single_block_AES_encrypt_shift_rows_fu_163_ap_done))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_logic_0 = grp_single_block_AES_encrypt_mix_columns_fu_148_ap_done))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                if (not((ap_const_logic_0 = grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st14_fsm_13 => 
                if (not((ap_const_logic_0 = grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_done))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                if (not((ap_const_logic_0 = grp_single_block_AES_encrypt_shift_rows_fu_163_ap_done))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                if (not((ap_const_logic_0 = grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done))) then
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                end if;
            when ap_ST_st19_fsm_18 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_267_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st20_fsm_19 => 
                if ((ap_const_lv1_0 = exitcond_fu_295_p2)) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st19_fsm_18, exitcond1_fu_267_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((ap_const_lv1_0 = exitcond1_fu_267_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st19_fsm_18, exitcond1_fu_267_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((ap_const_lv1_0 = exitcond1_fu_267_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_105_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_105 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_116 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_132_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_132 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_227_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_227 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_237_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_237 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_247_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_247 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_257_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_257 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_269_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_269 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_278_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_278 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_285_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_285 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_297_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_297 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_311_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_311 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_318_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_318 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_326_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_326 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_333_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_333 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_343_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_343 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_356_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_356 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_363_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_363 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_38_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_38 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_72_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_72 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_89_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_89 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_278)
    begin
        if (ap_sig_278) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_285)
    begin
        if (ap_sig_285) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_105)
    begin
        if (ap_sig_105) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_247)
    begin
        if (ap_sig_247) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_363)
    begin
        if (ap_sig_363) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_318)
    begin
        if (ap_sig_318) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_333)
    begin
        if (ap_sig_333) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_297)
    begin
        if (ap_sig_297) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_257)
    begin
        if (ap_sig_257) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_116)
    begin
        if (ap_sig_116) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_38)
    begin
        if (ap_sig_38) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_132)
    begin
        if (ap_sig_132) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_269)
    begin
        if (ap_sig_269) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_72)
    begin
        if (ap_sig_72) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_89)
    begin
        if (ap_sig_89) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_227)
    begin
        if (ap_sig_227) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_237)
    begin
        if (ap_sig_237) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_343)
    begin
        if (ap_sig_343) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_356)
    begin
        if (ap_sig_356) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_311)
    begin
        if (ap_sig_311) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_326)
    begin
        if (ap_sig_326) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_267_p2 <= "1" when (i_1_reg_126 = ap_const_lv3_4) else "0";
    exitcond2_fu_250_p2 <= "1" when (r_reg_114 = ap_const_lv4_A) else "0";
    exitcond3_fu_203_p2 <= "1" when (j_reg_103 = ap_const_lv3_4) else "0";
    exitcond4_fu_175_p2 <= "1" when (i_reg_92 = ap_const_lv3_4) else "0";
    exitcond_fu_295_p2 <= "1" when (j_1_reg_137 = ap_const_lv3_4) else "0";
    grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start <= ap_reg_grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start;

    grp_single_block_AES_encrypt_add_round_key_fu_153_r_assign_proc : process(r_cast3_cast_reg_381, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_single_block_AES_encrypt_add_round_key_fu_153_r <= ap_const_lv6_A;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_single_block_AES_encrypt_add_round_key_fu_153_r <= r_cast3_cast_reg_381;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_single_block_AES_encrypt_add_round_key_fu_153_r <= ap_const_lv6_0;
        else 
            grp_single_block_AES_encrypt_add_round_key_fu_153_r <= "XXXXXX";
        end if; 
    end process;

    grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start <= ap_reg_grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start;
    grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start <= ap_reg_grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start;
    grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start <= ap_reg_grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start;
    i_12_fu_181_p2 <= std_logic_vector(unsigned(i_reg_92) + unsigned(ap_const_lv3_1));
    i_13_fu_273_p2 <= std_logic_vector(unsigned(i_1_reg_126) + unsigned(ap_const_lv3_1));
    in_r_address0 <= tmp_42_fu_236_p1(4 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_3_fu_209_p2 <= std_logic_vector(unsigned(j_reg_103) + unsigned(ap_const_lv3_1));
    j_4_fu_301_p2 <= std_logic_vector(unsigned(j_1_reg_137) + unsigned(ap_const_lv3_1));
    out_r_address0 <= tmp_50_fu_338_p1(4 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= state_q0;

    out_r_we0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_1_fu_261_p2 <= std_logic_vector(unsigned(r_reg_114) + unsigned(ap_const_lv4_1));
    r_cast3_cast_fu_256_p1 <= std_logic_vector(resize(unsigned(r_reg_114),6));

    state_address0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, grp_single_block_AES_encrypt_mix_columns_fu_148_state_address0, grp_single_block_AES_encrypt_add_round_key_fu_153_state_address0, grp_single_block_AES_encrypt_shift_rows_fu_163_state_address0, grp_single_block_AES_encrypt_sub_bytes_fu_168_state_address0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st14_fsm_13, tmp_44_fu_246_p1, tmp_47_fu_316_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            state_address0 <= tmp_44_fu_246_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            state_address0 <= tmp_47_fu_316_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            state_address0 <= grp_single_block_AES_encrypt_sub_bytes_fu_168_state_address0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            state_address0 <= grp_single_block_AES_encrypt_shift_rows_fu_163_state_address0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            state_address0 <= grp_single_block_AES_encrypt_add_round_key_fu_153_state_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            state_address0 <= grp_single_block_AES_encrypt_mix_columns_fu_148_state_address0;
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, grp_single_block_AES_encrypt_mix_columns_fu_148_state_ce0, grp_single_block_AES_encrypt_add_round_key_fu_153_state_ce0, grp_single_block_AES_encrypt_shift_rows_fu_163_state_ce0, grp_single_block_AES_encrypt_sub_bytes_fu_168_state_ce0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            state_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            state_ce0 <= grp_single_block_AES_encrypt_sub_bytes_fu_168_state_ce0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            state_ce0 <= grp_single_block_AES_encrypt_shift_rows_fu_163_state_ce0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            state_ce0 <= grp_single_block_AES_encrypt_add_round_key_fu_153_state_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            state_ce0 <= grp_single_block_AES_encrypt_mix_columns_fu_148_state_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(grp_single_block_AES_encrypt_add_round_key_fu_153_state_ce1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            state_ce1 <= grp_single_block_AES_encrypt_add_round_key_fu_153_state_ce1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(in_r_q0, grp_single_block_AES_encrypt_mix_columns_fu_148_state_d0, grp_single_block_AES_encrypt_add_round_key_fu_153_state_d0, grp_single_block_AES_encrypt_shift_rows_fu_163_state_d0, grp_single_block_AES_encrypt_sub_bytes_fu_168_state_d0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            state_d0 <= in_r_q0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            state_d0 <= grp_single_block_AES_encrypt_sub_bytes_fu_168_state_d0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            state_d0 <= grp_single_block_AES_encrypt_shift_rows_fu_163_state_d0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            state_d0 <= grp_single_block_AES_encrypt_add_round_key_fu_153_state_d0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            state_d0 <= grp_single_block_AES_encrypt_mix_columns_fu_148_state_d0;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(grp_single_block_AES_encrypt_mix_columns_fu_148_state_we0, grp_single_block_AES_encrypt_add_round_key_fu_153_state_we0, grp_single_block_AES_encrypt_shift_rows_fu_163_state_we0, grp_single_block_AES_encrypt_sub_bytes_fu_168_state_we0, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            state_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            state_we0 <= grp_single_block_AES_encrypt_sub_bytes_fu_168_state_we0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            state_we0 <= grp_single_block_AES_encrypt_shift_rows_fu_163_state_we0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            state_we0 <= grp_single_block_AES_encrypt_add_round_key_fu_153_state_we0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            state_we0 <= grp_single_block_AES_encrypt_mix_columns_fu_148_state_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(grp_single_block_AES_encrypt_add_round_key_fu_153_state_we1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            state_we1 <= grp_single_block_AES_encrypt_add_round_key_fu_153_state_we1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_40_fu_223_p3 <= (tmp_55_fu_219_p1 & ap_const_lv2_0);
    tmp_41_fu_231_p2 <= std_logic_vector(unsigned(tmp_cast_reg_350) + unsigned(tmp_40_fu_223_p3));
    tmp_42_fu_236_p1 <= std_logic_vector(resize(unsigned(tmp_41_fu_231_p2),64));
    tmp_43_fu_241_p2 <= std_logic_vector(unsigned(tmp_63_cast_fu_215_p1) + unsigned(tmp_s_reg_355));
    tmp_44_fu_246_p1 <= std_logic_vector(resize(unsigned(tmp_43_reg_373),64));
    tmp_45_fu_287_p3 <= (tmp_56_fu_283_p1 & ap_const_lv2_0);
    tmp_46_fu_311_p2 <= std_logic_vector(unsigned(tmp_71_cast_fu_307_p1) + unsigned(tmp_45_reg_404));
    tmp_47_fu_316_p1 <= std_logic_vector(resize(unsigned(tmp_46_fu_311_p2),64));
    tmp_48_fu_325_p3 <= (tmp_57_fu_321_p1 & ap_const_lv2_0);
    tmp_49_fu_333_p2 <= std_logic_vector(unsigned(tmp_69_cast_reg_399) + unsigned(tmp_48_fu_325_p3));
    tmp_50_fu_338_p1 <= std_logic_vector(resize(unsigned(tmp_49_reg_422),64));
    tmp_55_fu_219_p1 <= j_reg_103(2 - 1 downto 0);
    tmp_56_fu_283_p1 <= i_1_reg_126(2 - 1 downto 0);
    tmp_57_fu_321_p1 <= j_1_reg_137(2 - 1 downto 0);
    tmp_63_cast_fu_215_p1 <= std_logic_vector(resize(unsigned(j_reg_103),4));
    tmp_69_cast_fu_279_p1 <= std_logic_vector(resize(unsigned(i_1_reg_126),4));
    tmp_71_cast_fu_307_p1 <= std_logic_vector(resize(unsigned(j_1_reg_137),4));
    tmp_cast_fu_187_p1 <= std_logic_vector(resize(unsigned(i_reg_92),4));
    tmp_fu_191_p1 <= i_reg_92(2 - 1 downto 0);
    tmp_s_fu_195_p3 <= (tmp_fu_191_p1 & ap_const_lv2_0);
    w_address0 <= grp_single_block_AES_encrypt_add_round_key_fu_153_w_address0;
    w_address1 <= grp_single_block_AES_encrypt_add_round_key_fu_153_w_address1;
    w_ce0 <= grp_single_block_AES_encrypt_add_round_key_fu_153_w_ce0;
    w_ce1 <= grp_single_block_AES_encrypt_add_round_key_fu_153_w_ce1;
end behav;
