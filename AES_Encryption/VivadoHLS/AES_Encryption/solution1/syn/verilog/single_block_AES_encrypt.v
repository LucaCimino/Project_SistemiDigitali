// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="single_block_AES_encrypt,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.470000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1102,HLS_SYN_LUT=2039}" *)

module single_block_AES_encrypt (
        ap_clk,
        ap_rst_n,
        i_plaintext_TDATA,
        i_plaintext_TVALID,
        i_plaintext_TREADY,
        i_plaintext_TUSER,
        i_plaintext_TLAST,
        cipher_TDATA,
        cipher_TVALID,
        cipher_TREADY,
        cipher_TUSER,
        cipher_TLAST
);

parameter    ap_ST_st1_fsm_0 = 7'b1;
parameter    ap_ST_st2_fsm_1 = 7'b10;
parameter    ap_ST_st3_fsm_2 = 7'b100;
parameter    ap_ST_st4_fsm_3 = 7'b1000;
parameter    ap_ST_st5_fsm_4 = 7'b10000;
parameter    ap_ST_st6_fsm_5 = 7'b100000;
parameter    ap_ST_st7_fsm_6 = 7'b1000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv5_F = 5'b1111;

input   ap_clk;
input   ap_rst_n;
input  [7:0] i_plaintext_TDATA;
input   i_plaintext_TVALID;
output   i_plaintext_TREADY;
input  [0:0] i_plaintext_TUSER;
input  [0:0] i_plaintext_TLAST;
output  [7:0] cipher_TDATA;
output   cipher_TVALID;
input   cipher_TREADY;
output  [0:0] cipher_TUSER;
output  [0:0] cipher_TLAST;

reg i_plaintext_TREADY;
reg cipher_TVALID;

reg    ap_rst_n_inv;
reg    i_plaintext_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_34;
wire   [0:0] exitcond1_fu_161_p2;
reg    cipher_TDATA_blk_n;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_46;
wire   [4:0] i_2_fu_167_p2;
reg    ap_sig_52;
wire   [4:0] i_3_fu_189_p2;
reg   [4:0] i_3_reg_217;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_62;
wire   [0:0] exitcond_fu_183_p2;
wire   [0:0] tmp_last_V_fu_200_p2;
reg   [0:0] tmp_last_V_reg_227;
reg   [3:0] plaintext_address0;
reg    plaintext_ce0;
reg    plaintext_we0;
wire   [7:0] plaintext_q0;
reg   [3:0] out_address0;
reg    out_ce0;
wire   [7:0] out_q0;
reg   [7:0] w_address0;
reg    w_ce0;
wire   [7:0] w_q0;
reg   [7:0] w_address1;
reg    w_ce1;
wire   [7:0] w_q1;
wire    grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_start;
wire    grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_done;
wire    grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_idle;
wire    grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_ready;
wire   [3:0] grp_single_block_AES_encrypt_aes_cipher_fu_141_in_r_address0;
wire    grp_single_block_AES_encrypt_aes_cipher_fu_141_in_r_ce0;
wire   [3:0] grp_single_block_AES_encrypt_aes_cipher_fu_141_out_r_address0;
wire    grp_single_block_AES_encrypt_aes_cipher_fu_141_out_r_ce0;
wire    grp_single_block_AES_encrypt_aes_cipher_fu_141_out_r_we0;
wire   [7:0] grp_single_block_AES_encrypt_aes_cipher_fu_141_out_r_d0;
wire   [7:0] grp_single_block_AES_encrypt_aes_cipher_fu_141_w_address0;
wire    grp_single_block_AES_encrypt_aes_cipher_fu_141_w_ce0;
wire   [7:0] grp_single_block_AES_encrypt_aes_cipher_fu_141_w_address1;
wire    grp_single_block_AES_encrypt_aes_cipher_fu_141_w_ce1;
wire    grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_start;
wire    grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_done;
wire    grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_idle;
wire    grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_ready;
wire   [7:0] grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_address0;
wire    grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_ce0;
wire    grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_we0;
wire   [7:0] grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_d0;
wire   [7:0] grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_address1;
wire    grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_ce1;
wire    grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_we1;
wire   [7:0] grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_d1;
reg   [4:0] i_reg_119;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_148;
reg   [4:0] i_1_reg_130;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_158;
reg    ap_sig_ioackin_cipher_TREADY;
reg    ap_reg_grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_start;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_174;
reg    ap_reg_grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_start;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_193;
wire   [63:0] tmp_fu_178_p1;
wire   [63:0] tmp_s_fu_195_p1;
reg    ap_reg_ioackin_cipher_TREADY;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'b1;
#0 ap_reg_grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_start = 1'b0;
#0 ap_reg_grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_start = 1'b0;
#0 ap_reg_ioackin_cipher_TREADY = 1'b0;
end

single_block_AES_encrypt_plaintext #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
plaintext_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(plaintext_address0),
    .ce0(plaintext_ce0),
    .we0(plaintext_we0),
    .d0(i_plaintext_TDATA),
    .q0(plaintext_q0)
);

single_block_AES_encrypt_plaintext #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
out_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_address0),
    .ce0(out_ce0),
    .we0(grp_single_block_AES_encrypt_aes_cipher_fu_141_out_r_we0),
    .d0(grp_single_block_AES_encrypt_aes_cipher_fu_141_out_r_d0),
    .q0(out_q0)
);

single_block_AES_encrypt_w #(
    .DataWidth( 8 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
w_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(w_address0),
    .ce0(w_ce0),
    .we0(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_we0),
    .d0(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_d0),
    .q0(w_q0),
    .address1(w_address1),
    .ce1(w_ce1),
    .we1(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_we1),
    .d1(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_d1),
    .q1(w_q1)
);

single_block_AES_encrypt_aes_cipher grp_single_block_AES_encrypt_aes_cipher_fu_141(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_start),
    .ap_done(grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_done),
    .ap_idle(grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_idle),
    .ap_ready(grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_ready),
    .in_r_address0(grp_single_block_AES_encrypt_aes_cipher_fu_141_in_r_address0),
    .in_r_ce0(grp_single_block_AES_encrypt_aes_cipher_fu_141_in_r_ce0),
    .in_r_q0(plaintext_q0),
    .out_r_address0(grp_single_block_AES_encrypt_aes_cipher_fu_141_out_r_address0),
    .out_r_ce0(grp_single_block_AES_encrypt_aes_cipher_fu_141_out_r_ce0),
    .out_r_we0(grp_single_block_AES_encrypt_aes_cipher_fu_141_out_r_we0),
    .out_r_d0(grp_single_block_AES_encrypt_aes_cipher_fu_141_out_r_d0),
    .w_address0(grp_single_block_AES_encrypt_aes_cipher_fu_141_w_address0),
    .w_ce0(grp_single_block_AES_encrypt_aes_cipher_fu_141_w_ce0),
    .w_q0(w_q0),
    .w_address1(grp_single_block_AES_encrypt_aes_cipher_fu_141_w_address1),
    .w_ce1(grp_single_block_AES_encrypt_aes_cipher_fu_141_w_ce1),
    .w_q1(w_q1)
);

single_block_AES_encrypt_aes_key_expansion grp_single_block_AES_encrypt_aes_key_expansion_fu_150(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_start),
    .ap_done(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_done),
    .ap_idle(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_idle),
    .ap_ready(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_ready),
    .w_address0(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_address0),
    .w_ce0(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_ce0),
    .w_we0(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_we0),
    .w_d0(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_d0),
    .w_q0(w_q0),
    .w_address1(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_address1),
    .w_ce1(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_ce1),
    .w_we1(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_we1),
    .w_d1(grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_d1),
    .w_q1(w_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
            ap_reg_grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_start <= 1'b1;
        end else if ((1'b1 == grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_ready)) begin
            ap_reg_grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_52 & ~(exitcond1_fu_161_p2 == 1'b0))) begin
            ap_reg_grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_start <= 1'b1;
        end else if ((1'b1 == grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_ready)) begin
            ap_reg_grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_cipher_TREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == ap_sig_ioackin_cipher_TREADY))) begin
            ap_reg_ioackin_cipher_TREADY <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & (1'b1 == cipher_TREADY))) begin
            ap_reg_ioackin_cipher_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & ~(1'b0 == ap_sig_ioackin_cipher_TREADY))) begin
        i_1_reg_130 <= i_3_reg_217;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(1'b0 == grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_done))) begin
        i_1_reg_130 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_161_p2 == 1'b0) & ~ap_sig_52)) begin
        i_reg_119 <= i_2_fu_167_p2;
    end else if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        i_reg_119 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        i_3_reg_217 <= i_3_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond_fu_183_p2))) begin
        tmp_last_V_reg_227 <= tmp_last_V_fu_200_p2;
    end
end

always @ (*) begin
    if (ap_sig_148) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_34) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_193) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_174) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_158) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_62) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_46) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_cipher_TREADY)) begin
        ap_sig_ioackin_cipher_TREADY = cipher_TREADY;
    end else begin
        ap_sig_ioackin_cipher_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        cipher_TDATA_blk_n = cipher_TREADY;
    end else begin
        cipher_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) & (1'b0 == ap_reg_ioackin_cipher_TREADY))) begin
        cipher_TVALID = 1'b1;
    end else begin
        cipher_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_161_p2 == 1'b0))) begin
        i_plaintext_TDATA_blk_n = i_plaintext_TVALID;
    end else begin
        i_plaintext_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_161_p2 == 1'b0) & ~ap_sig_52)) begin
        i_plaintext_TREADY = 1'b1;
    end else begin
        i_plaintext_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        out_address0 = tmp_s_fu_195_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        out_address0 = grp_single_block_AES_encrypt_aes_cipher_fu_141_out_r_address0;
    end else begin
        out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        out_ce0 = 1'b1;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        out_ce0 = grp_single_block_AES_encrypt_aes_cipher_fu_141_out_r_ce0;
    end else begin
        out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        plaintext_address0 = tmp_fu_178_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        plaintext_address0 = grp_single_block_AES_encrypt_aes_cipher_fu_141_in_r_address0;
    end else begin
        plaintext_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_52)) begin
        plaintext_ce0 = 1'b1;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        plaintext_ce0 = grp_single_block_AES_encrypt_aes_cipher_fu_141_in_r_ce0;
    end else begin
        plaintext_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond1_fu_161_p2 == 1'b0) & ~ap_sig_52)) begin
        plaintext_we0 = 1'b1;
    end else begin
        plaintext_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        w_address0 = grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_address0;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        w_address0 = grp_single_block_AES_encrypt_aes_cipher_fu_141_w_address0;
    end else begin
        w_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        w_address1 = grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_address1;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        w_address1 = grp_single_block_AES_encrypt_aes_cipher_fu_141_w_address1;
    end else begin
        w_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        w_ce0 = grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_ce0;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        w_ce0 = grp_single_block_AES_encrypt_aes_cipher_fu_141_w_ce0;
    end else begin
        w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        w_ce1 = grp_single_block_AES_encrypt_aes_key_expansion_fu_150_w_ce1;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        w_ce1 = grp_single_block_AES_encrypt_aes_cipher_fu_141_w_ce1;
    end else begin
        w_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st2_fsm_1 : begin
            if (((exitcond1_fu_161_p2 == 1'b0) & ~ap_sig_52)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else if ((~ap_sig_52 & ~(exitcond1_fu_161_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(1'b0 == grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_done)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            if (~(1'b0 == grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_done)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st6_fsm_5 : begin
            if (~(1'b0 == exitcond_fu_183_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : begin
            if (~(1'b0 == ap_sig_ioackin_cipher_TREADY)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_148 = (1'b1 == ap_CS_fsm[ap_const_lv32_0]);
end

always @ (*) begin
    ap_sig_158 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_174 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_193 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_34 = (ap_CS_fsm[ap_const_lv32_1] == 1'b1);
end

always @ (*) begin
    ap_sig_46 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_52 = ((exitcond1_fu_161_p2 == 1'b0) & (i_plaintext_TVALID == 1'b0));
end

always @ (*) begin
    ap_sig_62 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

assign cipher_TDATA = out_q0;

assign cipher_TLAST = tmp_last_V_reg_227;

assign cipher_TUSER = 1'b1;

assign exitcond1_fu_161_p2 = ((i_reg_119 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign exitcond_fu_183_p2 = ((i_1_reg_130 == ap_const_lv5_10) ? 1'b1 : 1'b0);

assign grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_start = ap_reg_grp_single_block_AES_encrypt_aes_cipher_fu_141_ap_start;

assign grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_start = ap_reg_grp_single_block_AES_encrypt_aes_key_expansion_fu_150_ap_start;

assign i_2_fu_167_p2 = (i_reg_119 + ap_const_lv5_1);

assign i_3_fu_189_p2 = (i_1_reg_130 + ap_const_lv5_1);

assign tmp_fu_178_p1 = i_reg_119;

assign tmp_last_V_fu_200_p2 = ((i_1_reg_130 == ap_const_lv5_F) ? 1'b1 : 1'b0);

assign tmp_s_fu_195_p1 = i_1_reg_130;

endmodule //single_block_AES_encrypt
