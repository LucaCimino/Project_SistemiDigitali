// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module single_block_AES_encrypt_add_round_key (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        state_0_read,
        state_1_read,
        state_2_read,
        state_3_read,
        state_4_read,
        state_5_read,
        state_6_read,
        state_7_read,
        state_8_read,
        state_9_read,
        state_10_read,
        state_11_read,
        state_12_read,
        state_13_read,
        state_14_read,
        state_15_read,
        w_address0,
        w_ce0,
        w_q0,
        w_address1,
        w_ce1,
        w_q1,
        r,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_pp0_stg0_fsm_0 = 8'b1;
parameter    ap_ST_pp0_stg1_fsm_1 = 8'b10;
parameter    ap_ST_pp0_stg2_fsm_2 = 8'b100;
parameter    ap_ST_pp0_stg3_fsm_3 = 8'b1000;
parameter    ap_ST_pp0_stg4_fsm_4 = 8'b10000;
parameter    ap_ST_pp0_stg5_fsm_5 = 8'b100000;
parameter    ap_ST_pp0_stg6_fsm_6 = 8'b1000000;
parameter    ap_ST_pp0_stg7_fsm_7 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv8_2 = 8'b10;
parameter    ap_const_lv8_3 = 8'b11;
parameter    ap_const_lv8_4 = 8'b100;
parameter    ap_const_lv8_5 = 8'b101;
parameter    ap_const_lv8_6 = 8'b110;
parameter    ap_const_lv8_7 = 8'b111;
parameter    ap_const_lv8_8 = 8'b1000;
parameter    ap_const_lv8_9 = 8'b1001;
parameter    ap_const_lv8_A = 8'b1010;
parameter    ap_const_lv8_B = 8'b1011;
parameter    ap_const_lv8_C = 8'b1100;
parameter    ap_const_lv8_D = 8'b1101;
parameter    ap_const_lv8_E = 8'b1110;
parameter    ap_const_lv8_F = 8'b1111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [7:0] state_0_read;
input  [7:0] state_1_read;
input  [7:0] state_2_read;
input  [7:0] state_3_read;
input  [7:0] state_4_read;
input  [7:0] state_5_read;
input  [7:0] state_6_read;
input  [7:0] state_7_read;
input  [7:0] state_8_read;
input  [7:0] state_9_read;
input  [7:0] state_10_read;
input  [7:0] state_11_read;
input  [7:0] state_12_read;
input  [7:0] state_13_read;
input  [7:0] state_14_read;
input  [7:0] state_15_read;
output  [7:0] w_address0;
output   w_ce0;
input  [7:0] w_q0;
output  [7:0] w_address1;
output   w_ce1;
input  [7:0] w_q1;
input  [4:0] r;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] w_address0;
reg w_ce0;
reg[7:0] w_address1;
reg w_ce1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_0;
reg    ap_sig_25;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1;
reg    ap_sig_cseq_ST_pp0_stg7_fsm_7;
reg    ap_sig_45;
wire   [7:0] tmp_s_fu_319_p3;
reg   [7:0] tmp_s_reg_647;
reg   [7:0] w_load_reg_675;
reg    ap_sig_cseq_ST_pp0_stg1_fsm_1;
reg    ap_sig_112;
reg   [7:0] w_load_4_reg_680;
reg   [7:0] w_load_5_reg_695;
reg    ap_sig_cseq_ST_pp0_stg2_fsm_2;
reg    ap_sig_128;
reg   [7:0] w_load_6_reg_700;
reg   [7:0] w_load_1_reg_715;
reg    ap_sig_cseq_ST_pp0_stg3_fsm_3;
reg    ap_sig_144;
reg   [7:0] w_load_7_reg_720;
reg   [7:0] w_load_8_reg_735;
reg    ap_sig_cseq_ST_pp0_stg4_fsm_4;
reg    ap_sig_160;
reg   [7:0] w_load_9_reg_740;
reg   [7:0] w_load_2_reg_755;
reg    ap_sig_cseq_ST_pp0_stg5_fsm_5;
reg    ap_sig_176;
reg   [7:0] w_load_10_reg_760;
reg   [7:0] w_load_11_reg_775;
reg    ap_sig_cseq_ST_pp0_stg6_fsm_6;
reg    ap_sig_192;
reg   [7:0] w_load_12_reg_780;
reg   [7:0] state_15_read_4_reg_795;
reg   [7:0] state_11_read12_reg_800;
wire   [7:0] state_0_write_assign_fu_463_p2;
reg   [7:0] state_0_write_assign_reg_805;
wire   [7:0] state_4_write_assign_fu_468_p2;
reg   [7:0] state_4_write_assign_reg_810;
wire   [7:0] state_8_write_assign_fu_473_p2;
reg   [7:0] state_8_write_assign_reg_815;
wire   [7:0] state_12_write_assign_fu_478_p2;
reg   [7:0] state_12_write_assign_reg_820;
wire   [7:0] state_1_write_assign_fu_483_p2;
reg   [7:0] state_1_write_assign_reg_825;
wire   [7:0] state_5_write_assign_fu_488_p2;
reg   [7:0] state_5_write_assign_reg_830;
wire   [7:0] state_9_write_assign_fu_493_p2;
reg   [7:0] state_9_write_assign_reg_835;
wire   [7:0] state_13_write_assign_fu_498_p2;
reg   [7:0] state_13_write_assign_reg_840;
wire   [7:0] state_2_write_assign_fu_503_p2;
reg   [7:0] state_2_write_assign_reg_845;
wire   [7:0] state_6_write_assign_fu_508_p2;
reg   [7:0] state_6_write_assign_reg_850;
wire   [7:0] state_10_write_assign_fu_513_p2;
reg   [7:0] state_10_write_assign_reg_855;
wire   [7:0] state_14_write_assign_fu_518_p2;
reg   [7:0] state_14_write_assign_reg_860;
wire   [7:0] state_3_write_assign_fu_523_p2;
reg   [7:0] state_3_write_assign_reg_865;
wire   [7:0] state_7_write_assign_fu_529_p2;
reg   [7:0] state_7_write_assign_reg_870;
reg    ap_reg_ppiten_pp0_iter0_preg;
reg   [7:0] ap_reg_ptbuf_state_0_read;
reg   [7:0] ap_reg_ptbuf_state_1_read;
reg   [7:0] ap_reg_ptbuf_state_2_read;
reg   [7:0] ap_reg_ptbuf_state_3_read;
reg   [7:0] ap_reg_ptbuf_state_4_read;
reg   [7:0] ap_reg_ptbuf_state_5_read;
reg   [7:0] ap_reg_ptbuf_state_6_read;
reg   [7:0] ap_reg_ptbuf_state_7_read;
reg   [7:0] ap_reg_ptbuf_state_8_read;
reg   [7:0] ap_reg_ptbuf_state_9_read;
reg   [7:0] ap_reg_ptbuf_state_10_read;
reg   [7:0] ap_reg_ptbuf_state_11_read;
reg   [7:0] ap_reg_ptbuf_state_12_read;
reg   [7:0] ap_reg_ptbuf_state_13_read;
reg   [7:0] ap_reg_ptbuf_state_14_read;
reg   [7:0] ap_reg_ptbuf_state_15_read;
wire   [63:0] tmp_41_fu_327_p1;
wire   [63:0] tmp_43_fu_338_p1;
wire   [63:0] tmp_45_fu_348_p1;
wire   [63:0] tmp_47_fu_358_p1;
wire   [63:0] tmp_115_1_fu_368_p1;
wire   [63:0] tmp_120_1_fu_378_p1;
wire   [63:0] tmp_125_1_fu_388_p1;
wire   [63:0] tmp_130_1_fu_398_p1;
wire   [63:0] tmp_115_2_fu_408_p1;
wire   [63:0] tmp_120_2_fu_418_p1;
wire   [63:0] tmp_125_2_fu_428_p1;
wire   [63:0] tmp_130_2_fu_438_p1;
wire   [63:0] tmp_115_3_fu_448_p1;
wire   [63:0] tmp_120_3_fu_458_p1;
wire   [63:0] tmp_125_3_fu_540_p1;
wire   [63:0] tmp_130_3_fu_550_p1;
wire   [3:0] tmp_fu_315_p1;
wire   [7:0] tmp_42_fu_332_p2;
wire   [7:0] tmp_44_fu_343_p2;
wire   [7:0] tmp_46_fu_353_p2;
wire   [7:0] tmp_114_s_fu_363_p2;
wire   [7:0] tmp_119_1_fu_373_p2;
wire   [7:0] tmp_124_1_fu_383_p2;
wire   [7:0] tmp_129_1_fu_393_p2;
wire   [7:0] tmp_114_1_fu_403_p2;
wire   [7:0] tmp_119_2_fu_413_p2;
wire   [7:0] tmp_124_2_fu_423_p2;
wire   [7:0] tmp_129_2_fu_433_p2;
wire   [7:0] tmp_114_2_fu_443_p2;
wire   [7:0] tmp_119_3_fu_453_p2;
wire   [7:0] tmp_124_3_fu_535_p2;
wire   [7:0] tmp_129_3_fu_545_p2;
wire   [7:0] state_11_write_assign_fu_555_p2;
wire   [7:0] state_15_write_assign_fu_560_p2;
reg   [7:0] ap_NS_fsm;
reg    ap_sig_pprstidle_pp0;
reg    ap_sig_pprststart_0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'b1;
#0 ap_reg_ppiten_pp0_it1 = 1'b0;
#0 ap_reg_ppiten_pp0_iter0_preg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~(~(1'b1 == ap_ce) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0))) & ~(1'b1 == ap_reg_ppiten_pp0_it0))) begin
            ap_reg_ppiten_pp0_it1 <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_pp0_stg7_fsm_7) & (1'b1 == ap_ce))) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_iter0_preg <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~(~(1'b1 == ap_ce) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0))))) begin
            ap_reg_ppiten_pp0_iter0_preg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0)))) begin
        ap_reg_ptbuf_state_0_read <= state_0_read;
        ap_reg_ptbuf_state_10_read <= state_10_read;
        ap_reg_ptbuf_state_11_read <= state_11_read;
        ap_reg_ptbuf_state_12_read <= state_12_read;
        ap_reg_ptbuf_state_13_read <= state_13_read;
        ap_reg_ptbuf_state_14_read <= state_14_read;
        ap_reg_ptbuf_state_15_read <= state_15_read;
        ap_reg_ptbuf_state_1_read <= state_1_read;
        ap_reg_ptbuf_state_2_read <= state_2_read;
        ap_reg_ptbuf_state_3_read <= state_3_read;
        ap_reg_ptbuf_state_4_read <= state_4_read;
        ap_reg_ptbuf_state_5_read <= state_5_read;
        ap_reg_ptbuf_state_6_read <= state_6_read;
        ap_reg_ptbuf_state_7_read <= state_7_read;
        ap_reg_ptbuf_state_8_read <= state_8_read;
        ap_reg_ptbuf_state_9_read <= state_9_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg7_fsm_7) & (1'b1 == ap_ce))) begin
        state_0_write_assign_reg_805 <= state_0_write_assign_fu_463_p2;
        state_10_write_assign_reg_855 <= state_10_write_assign_fu_513_p2;
        state_11_read12_reg_800 <= ap_reg_ptbuf_state_11_read;
        state_12_write_assign_reg_820 <= state_12_write_assign_fu_478_p2;
        state_13_write_assign_reg_840 <= state_13_write_assign_fu_498_p2;
        state_14_write_assign_reg_860 <= state_14_write_assign_fu_518_p2;
        state_15_read_4_reg_795 <= ap_reg_ptbuf_state_15_read;
        state_1_write_assign_reg_825 <= state_1_write_assign_fu_483_p2;
        state_2_write_assign_reg_845 <= state_2_write_assign_fu_503_p2;
        state_3_write_assign_reg_865 <= state_3_write_assign_fu_523_p2;
        state_4_write_assign_reg_810 <= state_4_write_assign_fu_468_p2;
        state_5_write_assign_reg_830 <= state_5_write_assign_fu_488_p2;
        state_6_write_assign_reg_850 <= state_6_write_assign_fu_508_p2;
        state_7_write_assign_reg_870 <= state_7_write_assign_fu_529_p2;
        state_8_write_assign_reg_815 <= state_8_write_assign_fu_473_p2;
        state_9_write_assign_reg_835 <= state_9_write_assign_fu_493_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_ce) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0)))) begin
        tmp_s_reg_647[7 : 4] <= tmp_s_fu_319_p3[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg5_fsm_5))) begin
        w_load_10_reg_760 <= w_q1;
        w_load_2_reg_755 <= w_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg6_fsm_6))) begin
        w_load_11_reg_775 <= w_q0;
        w_load_12_reg_780 <= w_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg3_fsm_3))) begin
        w_load_1_reg_715 <= w_q0;
        w_load_7_reg_720 <= w_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg1_fsm_1))) begin
        w_load_4_reg_680 <= w_q1;
        w_load_reg_675 <= w_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg2_fsm_2))) begin
        w_load_5_reg_695 <= w_q0;
        w_load_6_reg_700 <= w_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg4_fsm_4))) begin
        w_load_8_reg_735 <= w_q0;
        w_load_9_reg_740 <= w_q1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it0)) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it1) & (1'b1 == ap_ce) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b0 == ap_reg_ppiten_pp0_it0) & (1'b0 == ap_reg_ppiten_pp0_it1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_sig_cseq_ST_pp0_stg7_fsm_7) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0)) begin
        ap_reg_ppiten_pp0_it0 = ap_start;
    end else begin
        ap_reg_ppiten_pp0_it0 = ap_reg_ppiten_pp0_iter0_preg;
    end
end

always @ (*) begin
    if (ap_sig_25) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_112) begin
        ap_sig_cseq_ST_pp0_stg1_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg1_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_128) begin
        ap_sig_cseq_ST_pp0_stg2_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg2_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_144) begin
        ap_sig_cseq_ST_pp0_stg3_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg3_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_160) begin
        ap_sig_cseq_ST_pp0_stg4_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg4_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_176) begin
        ap_sig_cseq_ST_pp0_stg5_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg5_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_192) begin
        ap_sig_cseq_ST_pp0_stg6_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg6_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_45) begin
        ap_sig_cseq_ST_pp0_stg7_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_pp0_stg7_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b0 == ap_reg_ppiten_pp0_it0))) begin
        ap_sig_pprstidle_pp0 = 1'b1;
    end else begin
        ap_sig_pprstidle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_start))) begin
        ap_sig_pprststart_0 = 1'b1;
    end else begin
        ap_sig_pprststart_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_reg_ppiten_pp0_it0)) begin
        if ((1'b1 == ap_sig_cseq_ST_pp0_stg7_fsm_7)) begin
            w_address0 = tmp_125_3_fu_540_p1;
        end else if ((1'b1 == ap_sig_cseq_ST_pp0_stg6_fsm_6)) begin
            w_address0 = tmp_115_3_fu_448_p1;
        end else if ((1'b1 == ap_sig_cseq_ST_pp0_stg5_fsm_5)) begin
            w_address0 = tmp_125_2_fu_428_p1;
        end else if ((1'b1 == ap_sig_cseq_ST_pp0_stg4_fsm_4)) begin
            w_address0 = tmp_115_2_fu_408_p1;
        end else if ((1'b1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) begin
            w_address0 = tmp_125_1_fu_388_p1;
        end else if ((1'b1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) begin
            w_address0 = tmp_115_1_fu_368_p1;
        end else if ((1'b1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) begin
            w_address0 = tmp_45_fu_348_p1;
        end else if ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0)) begin
            w_address0 = tmp_41_fu_327_p1;
        end else begin
            w_address0 = 'bx;
        end
    end else begin
        w_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_reg_ppiten_pp0_it0)) begin
        if ((1'b1 == ap_sig_cseq_ST_pp0_stg7_fsm_7)) begin
            w_address1 = tmp_130_3_fu_550_p1;
        end else if ((1'b1 == ap_sig_cseq_ST_pp0_stg6_fsm_6)) begin
            w_address1 = tmp_120_3_fu_458_p1;
        end else if ((1'b1 == ap_sig_cseq_ST_pp0_stg5_fsm_5)) begin
            w_address1 = tmp_130_2_fu_438_p1;
        end else if ((1'b1 == ap_sig_cseq_ST_pp0_stg4_fsm_4)) begin
            w_address1 = tmp_120_2_fu_418_p1;
        end else if ((1'b1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) begin
            w_address1 = tmp_130_1_fu_398_p1;
        end else if ((1'b1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) begin
            w_address1 = tmp_120_1_fu_378_p1;
        end else if ((1'b1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) begin
            w_address1 = tmp_47_fu_358_p1;
        end else if ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0)) begin
            w_address1 = tmp_43_fu_338_p1;
        end else begin
            w_address1 = 'bx;
        end
    end else begin
        w_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_sig_cseq_ST_pp0_stg7_fsm_7) & (1'b1 == ap_ce)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg4_fsm_4)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg5_fsm_5)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg6_fsm_6)) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0))))) begin
        w_ce0 = 1'b1;
    end else begin
        w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_sig_cseq_ST_pp0_stg7_fsm_7) & (1'b1 == ap_ce)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg4_fsm_4)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg5_fsm_5)) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & (1'b1 == ap_sig_cseq_ST_pp0_stg6_fsm_6)) | ((1'b1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (1'b1 == ap_reg_ppiten_pp0_it0) & (1'b1 == ap_ce) & ~((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0))))) begin
        w_ce1 = 1'b1;
    end else begin
        w_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_pp0_stg0_fsm_0 : begin
            if ((~(~(1'b1 == ap_ce) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0))) & ~(1'b1 == ap_sig_pprstidle_pp0) & ~(~(~(1'b1 == ap_ce) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0))) & (1'b1 == ap_sig_pprststart_0)) & ~((1'b0 == ap_start) & (1'b0 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_1;
            end else if (((~(~(1'b1 == ap_ce) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0))) & (1'b1 == ap_sig_pprstidle_pp0)) | (~(~(1'b1 == ap_ce) | ((1'b1 == ap_reg_ppiten_pp0_it0) & (ap_start == 1'b0))) & (1'b1 == ap_sig_pprststart_0)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
            end
        end
        ap_ST_pp0_stg1_fsm_1 : begin
            if ((1'b1 == ap_ce)) begin
                ap_NS_fsm = ap_ST_pp0_stg2_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_1;
            end
        end
        ap_ST_pp0_stg2_fsm_2 : begin
            if ((1'b1 == ap_ce)) begin
                ap_NS_fsm = ap_ST_pp0_stg3_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg2_fsm_2;
            end
        end
        ap_ST_pp0_stg3_fsm_3 : begin
            if ((1'b1 == ap_ce)) begin
                ap_NS_fsm = ap_ST_pp0_stg4_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg3_fsm_3;
            end
        end
        ap_ST_pp0_stg4_fsm_4 : begin
            if ((1'b1 == ap_ce)) begin
                ap_NS_fsm = ap_ST_pp0_stg5_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg4_fsm_4;
            end
        end
        ap_ST_pp0_stg5_fsm_5 : begin
            if ((1'b1 == ap_ce)) begin
                ap_NS_fsm = ap_ST_pp0_stg6_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg5_fsm_5;
            end
        end
        ap_ST_pp0_stg6_fsm_6 : begin
            if ((1'b1 == ap_ce)) begin
                ap_NS_fsm = ap_ST_pp0_stg7_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg6_fsm_6;
            end
        end
        ap_ST_pp0_stg7_fsm_7 : begin
            if ((1'b1 == ap_ce)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg7_fsm_7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_return_0 = state_0_write_assign_reg_805;

assign ap_return_1 = state_1_write_assign_reg_825;

assign ap_return_10 = state_10_write_assign_reg_855;

assign ap_return_11 = state_11_write_assign_fu_555_p2;

assign ap_return_12 = state_12_write_assign_reg_820;

assign ap_return_13 = state_13_write_assign_reg_840;

assign ap_return_14 = state_14_write_assign_reg_860;

assign ap_return_15 = state_15_write_assign_fu_560_p2;

assign ap_return_2 = state_2_write_assign_reg_845;

assign ap_return_3 = state_3_write_assign_reg_865;

assign ap_return_4 = state_4_write_assign_reg_810;

assign ap_return_5 = state_5_write_assign_reg_830;

assign ap_return_6 = state_6_write_assign_reg_850;

assign ap_return_7 = state_7_write_assign_reg_870;

assign ap_return_8 = state_8_write_assign_reg_815;

assign ap_return_9 = state_9_write_assign_reg_835;

always @ (*) begin
    ap_sig_112 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_128 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_144 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_160 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_176 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_192 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_25 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_45 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

assign state_0_write_assign_fu_463_p2 = (w_load_reg_675 ^ ap_reg_ptbuf_state_0_read);

assign state_10_write_assign_fu_513_p2 = (w_load_11_reg_775 ^ ap_reg_ptbuf_state_10_read);

assign state_11_write_assign_fu_555_p2 = (w_q0 ^ state_11_read12_reg_800);

assign state_12_write_assign_fu_478_p2 = (w_load_6_reg_700 ^ ap_reg_ptbuf_state_12_read);

assign state_13_write_assign_fu_498_p2 = (w_load_9_reg_740 ^ ap_reg_ptbuf_state_13_read);

assign state_14_write_assign_fu_518_p2 = (w_load_12_reg_780 ^ ap_reg_ptbuf_state_14_read);

assign state_15_write_assign_fu_560_p2 = (w_q1 ^ state_15_read_4_reg_795);

assign state_1_write_assign_fu_483_p2 = (w_load_1_reg_715 ^ ap_reg_ptbuf_state_1_read);

assign state_2_write_assign_fu_503_p2 = (w_load_2_reg_755 ^ ap_reg_ptbuf_state_2_read);

assign state_3_write_assign_fu_523_p2 = (w_q0 ^ ap_reg_ptbuf_state_3_read);

assign state_4_write_assign_fu_468_p2 = (w_load_4_reg_680 ^ ap_reg_ptbuf_state_4_read);

assign state_5_write_assign_fu_488_p2 = (w_load_7_reg_720 ^ ap_reg_ptbuf_state_5_read);

assign state_6_write_assign_fu_508_p2 = (w_load_10_reg_760 ^ ap_reg_ptbuf_state_6_read);

assign state_7_write_assign_fu_529_p2 = (w_q1 ^ ap_reg_ptbuf_state_7_read);

assign state_8_write_assign_fu_473_p2 = (w_load_5_reg_695 ^ ap_reg_ptbuf_state_8_read);

assign state_9_write_assign_fu_493_p2 = (w_load_8_reg_735 ^ ap_reg_ptbuf_state_9_read);

assign tmp_114_1_fu_403_p2 = (tmp_s_reg_647 | ap_const_lv8_8);

assign tmp_114_2_fu_443_p2 = (tmp_s_reg_647 | ap_const_lv8_C);

assign tmp_114_s_fu_363_p2 = (tmp_s_reg_647 | ap_const_lv8_4);

assign tmp_115_1_fu_368_p1 = tmp_114_s_fu_363_p2;

assign tmp_115_2_fu_408_p1 = tmp_114_1_fu_403_p2;

assign tmp_115_3_fu_448_p1 = tmp_114_2_fu_443_p2;

assign tmp_119_1_fu_373_p2 = (tmp_s_reg_647 | ap_const_lv8_5);

assign tmp_119_2_fu_413_p2 = (tmp_s_reg_647 | ap_const_lv8_9);

assign tmp_119_3_fu_453_p2 = (tmp_s_reg_647 | ap_const_lv8_D);

assign tmp_120_1_fu_378_p1 = tmp_119_1_fu_373_p2;

assign tmp_120_2_fu_418_p1 = tmp_119_2_fu_413_p2;

assign tmp_120_3_fu_458_p1 = tmp_119_3_fu_453_p2;

assign tmp_124_1_fu_383_p2 = (tmp_s_reg_647 | ap_const_lv8_6);

assign tmp_124_2_fu_423_p2 = (tmp_s_reg_647 | ap_const_lv8_A);

assign tmp_124_3_fu_535_p2 = (tmp_s_reg_647 | ap_const_lv8_E);

assign tmp_125_1_fu_388_p1 = tmp_124_1_fu_383_p2;

assign tmp_125_2_fu_428_p1 = tmp_124_2_fu_423_p2;

assign tmp_125_3_fu_540_p1 = tmp_124_3_fu_535_p2;

assign tmp_129_1_fu_393_p2 = (tmp_s_reg_647 | ap_const_lv8_7);

assign tmp_129_2_fu_433_p2 = (tmp_s_reg_647 | ap_const_lv8_B);

assign tmp_129_3_fu_545_p2 = (tmp_s_reg_647 | ap_const_lv8_F);

assign tmp_130_1_fu_398_p1 = tmp_129_1_fu_393_p2;

assign tmp_130_2_fu_438_p1 = tmp_129_2_fu_433_p2;

assign tmp_130_3_fu_550_p1 = tmp_129_3_fu_545_p2;

assign tmp_41_fu_327_p1 = tmp_s_fu_319_p3;

assign tmp_42_fu_332_p2 = (tmp_s_fu_319_p3 | ap_const_lv8_1);

assign tmp_43_fu_338_p1 = tmp_42_fu_332_p2;

assign tmp_44_fu_343_p2 = (tmp_s_reg_647 | ap_const_lv8_2);

assign tmp_45_fu_348_p1 = tmp_44_fu_343_p2;

assign tmp_46_fu_353_p2 = (tmp_s_reg_647 | ap_const_lv8_3);

assign tmp_47_fu_358_p1 = tmp_46_fu_353_p2;

assign tmp_fu_315_p1 = r[3:0];

assign tmp_s_fu_319_p3 = {{tmp_fu_315_p1}, {ap_const_lv4_0}};

always @ (posedge ap_clk) begin
    tmp_s_reg_647[3:0] <= 4'b0000;
end

endmodule //single_block_AES_encrypt_add_round_key
