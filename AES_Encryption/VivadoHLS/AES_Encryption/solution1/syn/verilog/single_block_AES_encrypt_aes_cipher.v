// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module single_block_AES_encrypt_aes_cipher (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0,
        w_address0,
        w_ce0,
        w_q0,
        w_address1,
        w_ce1,
        w_q1
);

parameter    ap_ST_st1_fsm_0 = 21'b1;
parameter    ap_ST_st2_fsm_1 = 21'b10;
parameter    ap_ST_st3_fsm_2 = 21'b100;
parameter    ap_ST_st4_fsm_3 = 21'b1000;
parameter    ap_ST_st5_fsm_4 = 21'b10000;
parameter    ap_ST_st6_fsm_5 = 21'b100000;
parameter    ap_ST_st7_fsm_6 = 21'b1000000;
parameter    ap_ST_st8_fsm_7 = 21'b10000000;
parameter    ap_ST_st9_fsm_8 = 21'b100000000;
parameter    ap_ST_st10_fsm_9 = 21'b1000000000;
parameter    ap_ST_st11_fsm_10 = 21'b10000000000;
parameter    ap_ST_st12_fsm_11 = 21'b100000000000;
parameter    ap_ST_st13_fsm_12 = 21'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 21'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 21'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 21'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 21'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 21'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 21'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 21'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 21'b100000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv6_A = 6'b1010;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_A = 4'b1010;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] in_r_address0;
output   in_r_ce0;
input  [7:0] in_r_q0;
output  [3:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [7:0] out_r_d0;
output  [7:0] w_address0;
output   w_ce0;
input  [7:0] w_q0;
output  [7:0] w_address1;
output   w_ce1;
input  [7:0] w_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_38;
wire   [2:0] i_12_fu_181_p2;
reg   [2:0] i_12_reg_345;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_72;
wire   [3:0] tmp_cast_fu_187_p1;
reg   [3:0] tmp_cast_reg_350;
wire   [0:0] exitcond4_fu_175_p2;
wire   [3:0] tmp_s_fu_195_p3;
reg   [3:0] tmp_s_reg_355;
wire   [2:0] j_3_fu_209_p2;
reg   [2:0] j_3_reg_363;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_89;
wire   [0:0] exitcond3_fu_203_p2;
wire   [3:0] tmp_43_fu_241_p2;
reg   [3:0] tmp_43_reg_373;
wire   [5:0] r_cast3_cast_fu_256_p1;
reg   [5:0] r_cast3_cast_reg_381;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_105;
wire   [3:0] r_1_fu_261_p2;
reg   [3:0] r_1_reg_386;
wire   [2:0] i_13_fu_273_p2;
reg   [2:0] i_13_reg_394;
reg    ap_sig_cseq_ST_st19_fsm_18;
reg    ap_sig_116;
wire   [3:0] tmp_69_cast_fu_279_p1;
reg   [3:0] tmp_69_cast_reg_399;
wire   [0:0] exitcond1_fu_267_p2;
wire   [3:0] tmp_45_fu_287_p3;
reg   [3:0] tmp_45_reg_404;
wire   [2:0] j_4_fu_301_p2;
reg   [2:0] j_4_reg_412;
reg    ap_sig_cseq_ST_st20_fsm_19;
reg    ap_sig_132;
wire   [0:0] exitcond_fu_295_p2;
wire   [3:0] tmp_49_fu_333_p2;
reg   [3:0] tmp_49_reg_422;
reg   [3:0] state_address0;
reg    state_ce0;
reg    state_we0;
reg   [7:0] state_d0;
wire   [7:0] state_q0;
reg    state_ce1;
reg    state_we1;
wire   [7:0] state_q1;
wire    grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start;
wire    grp_single_block_AES_encrypt_mix_columns_fu_148_ap_done;
wire    grp_single_block_AES_encrypt_mix_columns_fu_148_ap_idle;
wire    grp_single_block_AES_encrypt_mix_columns_fu_148_ap_ready;
wire   [3:0] grp_single_block_AES_encrypt_mix_columns_fu_148_state_address0;
wire    grp_single_block_AES_encrypt_mix_columns_fu_148_state_ce0;
wire    grp_single_block_AES_encrypt_mix_columns_fu_148_state_we0;
wire   [7:0] grp_single_block_AES_encrypt_mix_columns_fu_148_state_d0;
wire    grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start;
wire    grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done;
wire    grp_single_block_AES_encrypt_add_round_key_fu_153_ap_idle;
wire    grp_single_block_AES_encrypt_add_round_key_fu_153_ap_ready;
wire   [3:0] grp_single_block_AES_encrypt_add_round_key_fu_153_state_address0;
wire    grp_single_block_AES_encrypt_add_round_key_fu_153_state_ce0;
wire    grp_single_block_AES_encrypt_add_round_key_fu_153_state_we0;
wire   [7:0] grp_single_block_AES_encrypt_add_round_key_fu_153_state_d0;
wire   [3:0] grp_single_block_AES_encrypt_add_round_key_fu_153_state_address1;
wire    grp_single_block_AES_encrypt_add_round_key_fu_153_state_ce1;
wire    grp_single_block_AES_encrypt_add_round_key_fu_153_state_we1;
wire   [7:0] grp_single_block_AES_encrypt_add_round_key_fu_153_state_d1;
wire   [7:0] grp_single_block_AES_encrypt_add_round_key_fu_153_w_address0;
wire    grp_single_block_AES_encrypt_add_round_key_fu_153_w_ce0;
wire   [7:0] grp_single_block_AES_encrypt_add_round_key_fu_153_w_address1;
wire    grp_single_block_AES_encrypt_add_round_key_fu_153_w_ce1;
reg   [5:0] grp_single_block_AES_encrypt_add_round_key_fu_153_r;
wire    grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start;
wire    grp_single_block_AES_encrypt_shift_rows_fu_163_ap_done;
wire    grp_single_block_AES_encrypt_shift_rows_fu_163_ap_idle;
wire    grp_single_block_AES_encrypt_shift_rows_fu_163_ap_ready;
wire   [3:0] grp_single_block_AES_encrypt_shift_rows_fu_163_state_address0;
wire    grp_single_block_AES_encrypt_shift_rows_fu_163_state_ce0;
wire    grp_single_block_AES_encrypt_shift_rows_fu_163_state_we0;
wire   [7:0] grp_single_block_AES_encrypt_shift_rows_fu_163_state_d0;
wire    grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start;
wire    grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_done;
wire    grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_idle;
wire    grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_ready;
wire   [3:0] grp_single_block_AES_encrypt_sub_bytes_fu_168_state_address0;
wire    grp_single_block_AES_encrypt_sub_bytes_fu_168_state_ce0;
wire    grp_single_block_AES_encrypt_sub_bytes_fu_168_state_we0;
wire   [7:0] grp_single_block_AES_encrypt_sub_bytes_fu_168_state_d0;
reg   [2:0] i_reg_92;
reg   [2:0] j_reg_103;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_227;
reg   [3:0] r_reg_114;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_237;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_247;
reg   [2:0] i_1_reg_126;
reg    ap_sig_cseq_ST_st18_fsm_17;
reg    ap_sig_257;
reg   [2:0] j_1_reg_137;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_269;
reg    ap_reg_grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_278;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_285;
reg    ap_reg_grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_297;
reg    ap_reg_grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_311;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_318;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_326;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_333;
reg    ap_reg_grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_343;
wire   [0:0] exitcond2_fu_250_p2;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_356;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_363;
wire   [63:0] tmp_42_fu_236_p1;
wire   [63:0] tmp_44_fu_246_p1;
wire   [63:0] tmp_47_fu_316_p1;
wire   [63:0] tmp_50_fu_338_p1;
wire   [1:0] tmp_fu_191_p1;
wire   [1:0] tmp_55_fu_219_p1;
wire   [3:0] tmp_40_fu_223_p3;
wire   [3:0] tmp_41_fu_231_p2;
wire   [3:0] tmp_63_cast_fu_215_p1;
wire   [1:0] tmp_56_fu_283_p1;
wire   [3:0] tmp_71_cast_fu_307_p1;
wire   [3:0] tmp_46_fu_311_p2;
wire   [1:0] tmp_57_fu_321_p1;
wire   [3:0] tmp_48_fu_325_p3;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'b1;
#0 ap_reg_grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start = 1'b0;
#0 ap_reg_grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start = 1'b0;
#0 ap_reg_grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start = 1'b0;
#0 ap_reg_grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start = 1'b0;
end

single_block_AES_encrypt_aes_cipher_state #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
state_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(state_address0),
    .ce0(state_ce0),
    .we0(state_we0),
    .d0(state_d0),
    .q0(state_q0),
    .address1(grp_single_block_AES_encrypt_add_round_key_fu_153_state_address1),
    .ce1(state_ce1),
    .we1(state_we1),
    .d1(grp_single_block_AES_encrypt_add_round_key_fu_153_state_d1),
    .q1(state_q1)
);

single_block_AES_encrypt_mix_columns grp_single_block_AES_encrypt_mix_columns_fu_148(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start),
    .ap_done(grp_single_block_AES_encrypt_mix_columns_fu_148_ap_done),
    .ap_idle(grp_single_block_AES_encrypt_mix_columns_fu_148_ap_idle),
    .ap_ready(grp_single_block_AES_encrypt_mix_columns_fu_148_ap_ready),
    .state_address0(grp_single_block_AES_encrypt_mix_columns_fu_148_state_address0),
    .state_ce0(grp_single_block_AES_encrypt_mix_columns_fu_148_state_ce0),
    .state_we0(grp_single_block_AES_encrypt_mix_columns_fu_148_state_we0),
    .state_d0(grp_single_block_AES_encrypt_mix_columns_fu_148_state_d0),
    .state_q0(state_q0)
);

single_block_AES_encrypt_add_round_key grp_single_block_AES_encrypt_add_round_key_fu_153(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start),
    .ap_done(grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done),
    .ap_idle(grp_single_block_AES_encrypt_add_round_key_fu_153_ap_idle),
    .ap_ready(grp_single_block_AES_encrypt_add_round_key_fu_153_ap_ready),
    .state_address0(grp_single_block_AES_encrypt_add_round_key_fu_153_state_address0),
    .state_ce0(grp_single_block_AES_encrypt_add_round_key_fu_153_state_ce0),
    .state_we0(grp_single_block_AES_encrypt_add_round_key_fu_153_state_we0),
    .state_d0(grp_single_block_AES_encrypt_add_round_key_fu_153_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_single_block_AES_encrypt_add_round_key_fu_153_state_address1),
    .state_ce1(grp_single_block_AES_encrypt_add_round_key_fu_153_state_ce1),
    .state_we1(grp_single_block_AES_encrypt_add_round_key_fu_153_state_we1),
    .state_d1(grp_single_block_AES_encrypt_add_round_key_fu_153_state_d1),
    .state_q1(state_q1),
    .w_address0(grp_single_block_AES_encrypt_add_round_key_fu_153_w_address0),
    .w_ce0(grp_single_block_AES_encrypt_add_round_key_fu_153_w_ce0),
    .w_q0(w_q0),
    .w_address1(grp_single_block_AES_encrypt_add_round_key_fu_153_w_address1),
    .w_ce1(grp_single_block_AES_encrypt_add_round_key_fu_153_w_ce1),
    .w_q1(w_q1),
    .r(grp_single_block_AES_encrypt_add_round_key_fu_153_r)
);

single_block_AES_encrypt_shift_rows grp_single_block_AES_encrypt_shift_rows_fu_163(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start),
    .ap_done(grp_single_block_AES_encrypt_shift_rows_fu_163_ap_done),
    .ap_idle(grp_single_block_AES_encrypt_shift_rows_fu_163_ap_idle),
    .ap_ready(grp_single_block_AES_encrypt_shift_rows_fu_163_ap_ready),
    .state_address0(grp_single_block_AES_encrypt_shift_rows_fu_163_state_address0),
    .state_ce0(grp_single_block_AES_encrypt_shift_rows_fu_163_state_ce0),
    .state_we0(grp_single_block_AES_encrypt_shift_rows_fu_163_state_we0),
    .state_d0(grp_single_block_AES_encrypt_shift_rows_fu_163_state_d0),
    .state_q0(state_q0)
);

single_block_AES_encrypt_sub_bytes grp_single_block_AES_encrypt_sub_bytes_fu_168(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start),
    .ap_done(grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_done),
    .ap_idle(grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_idle),
    .ap_ready(grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_ready),
    .state_address0(grp_single_block_AES_encrypt_sub_bytes_fu_168_state_address0),
    .state_ce0(grp_single_block_AES_encrypt_sub_bytes_fu_168_state_ce0),
    .state_we0(grp_single_block_AES_encrypt_sub_bytes_fu_168_state_we0),
    .state_d0(grp_single_block_AES_encrypt_sub_bytes_fu_168_state_d0),
    .state_q0(state_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st12_fsm_11) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond4_fu_175_p2 == 1'b0)) | (1'b1 == ap_sig_cseq_ST_st17_fsm_16))) begin
            ap_reg_grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start <= 1'b1;
        end else if ((1'b1 == grp_single_block_AES_encrypt_add_round_key_fu_153_ap_ready)) begin
            ap_reg_grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
            ap_reg_grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start <= 1'b1;
        end else if ((1'b1 == grp_single_block_AES_encrypt_mix_columns_fu_148_ap_ready)) begin
            ap_reg_grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st8_fsm_7) | (1'b1 == ap_sig_cseq_ST_st15_fsm_14))) begin
            ap_reg_grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start <= 1'b1;
        end else if ((1'b1 == grp_single_block_AES_encrypt_shift_rows_fu_163_ap_ready)) begin
            ap_reg_grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond2_fu_250_p2)) | ((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(1'b0 == exitcond2_fu_250_p2)))) begin
            ap_reg_grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start <= 1'b1;
        end else if ((1'b1 == grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_ready)) begin
            ap_reg_grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st20_fsm_19) & ~(1'b0 == exitcond_fu_295_p2))) begin
        i_1_reg_126 <= i_13_reg_394;
    end else if ((~(1'b0 == grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done) & (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        i_1_reg_126 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == exitcond3_fu_203_p2))) begin
        i_reg_92 <= i_12_reg_345;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_92 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st19_fsm_18) & (1'b0 == exitcond1_fu_267_p2))) begin
        j_1_reg_137 <= ap_const_lv3_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        j_1_reg_137 <= j_4_reg_412;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond4_fu_175_p2 == 1'b0))) begin
        j_reg_103 <= ap_const_lv3_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        j_reg_103 <= j_3_reg_363;
    end
end

always @ (posedge ap_clk) begin
    if (~(1'b0 == grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done)) begin
        if ((1'b1 == ap_sig_cseq_ST_st13_fsm_12)) begin
            r_reg_114 <= r_1_reg_386;
        end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
            r_reg_114 <= ap_const_lv4_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_12_reg_345 <= i_12_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st19_fsm_18)) begin
        i_13_reg_394 <= i_13_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_3_reg_363 <= j_3_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        j_4_reg_412 <= j_4_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        r_1_reg_386 <= r_1_fu_261_p2;
        r_cast3_cast_reg_381[3 : 0] <= r_cast3_cast_fu_256_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == exitcond3_fu_203_p2))) begin
        tmp_43_reg_373 <= tmp_43_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st19_fsm_18) & (1'b0 == exitcond1_fu_267_p2))) begin
        tmp_45_reg_404[3 : 2] <= tmp_45_fu_287_p3[3 : 2];
        tmp_69_cast_reg_399[2 : 0] <= tmp_69_cast_fu_279_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st20_fsm_19) & (1'b0 == exitcond_fu_295_p2))) begin
        tmp_49_reg_422 <= tmp_49_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond4_fu_175_p2 == 1'b0))) begin
        tmp_cast_reg_350[2 : 0] <= tmp_cast_fu_187_p1[2 : 0];
        tmp_s_reg_355[3 : 2] <= tmp_s_fu_195_p3[3 : 2];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st19_fsm_18) & ~(1'b0 == exitcond1_fu_267_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st19_fsm_18) & ~(1'b0 == exitcond1_fu_267_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_278) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_285) begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_105) begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_247) begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_363) begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_318) begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_333) begin
        ap_sig_cseq_ST_st16_fsm_15 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_297) begin
        ap_sig_cseq_ST_st17_fsm_16 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_257) begin
        ap_sig_cseq_ST_st18_fsm_17 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st18_fsm_17 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_116) begin
        ap_sig_cseq_ST_st19_fsm_18 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st19_fsm_18 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_38) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_132) begin
        ap_sig_cseq_ST_st20_fsm_19 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st20_fsm_19 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_269) begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_72) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_89) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_227) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_237) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_343) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_356) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_311) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_326) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st18_fsm_17)) begin
        grp_single_block_AES_encrypt_add_round_key_fu_153_r = ap_const_lv6_A;
    end else if ((1'b1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        grp_single_block_AES_encrypt_add_round_key_fu_153_r = r_cast3_cast_reg_381;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        grp_single_block_AES_encrypt_add_round_key_fu_153_r = ap_const_lv6_0;
    end else begin
        grp_single_block_AES_encrypt_add_round_key_fu_153_r = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        state_address0 = tmp_44_fu_246_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st20_fsm_19)) begin
        state_address0 = tmp_47_fu_316_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        state_address0 = grp_single_block_AES_encrypt_sub_bytes_fu_168_state_address0;
    end else if (((1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        state_address0 = grp_single_block_AES_encrypt_shift_rows_fu_163_state_address0;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        state_address0 = grp_single_block_AES_encrypt_add_round_key_fu_153_state_address0;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        state_address0 = grp_single_block_AES_encrypt_mix_columns_fu_148_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st20_fsm_19) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        state_ce0 = 1'b1;
    end else if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        state_ce0 = grp_single_block_AES_encrypt_sub_bytes_fu_168_state_ce0;
    end else if (((1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        state_ce0 = grp_single_block_AES_encrypt_shift_rows_fu_163_state_ce0;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        state_ce0 = grp_single_block_AES_encrypt_add_round_key_fu_153_state_ce0;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        state_ce0 = grp_single_block_AES_encrypt_mix_columns_fu_148_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        state_ce1 = grp_single_block_AES_encrypt_add_round_key_fu_153_state_ce1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        state_d0 = in_r_q0;
    end else if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        state_d0 = grp_single_block_AES_encrypt_sub_bytes_fu_168_state_d0;
    end else if (((1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        state_d0 = grp_single_block_AES_encrypt_shift_rows_fu_163_state_d0;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        state_d0 = grp_single_block_AES_encrypt_add_round_key_fu_153_state_d0;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        state_d0 = grp_single_block_AES_encrypt_mix_columns_fu_148_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        state_we0 = 1'b1;
    end else if (((1'b1 == ap_sig_cseq_ST_st7_fsm_6) | (1'b1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        state_we0 = grp_single_block_AES_encrypt_sub_bytes_fu_168_state_we0;
    end else if (((1'b1 == ap_sig_cseq_ST_st9_fsm_8) | (1'b1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        state_we0 = grp_single_block_AES_encrypt_shift_rows_fu_163_state_we0;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        state_we0 = grp_single_block_AES_encrypt_add_round_key_fu_153_state_we0;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        state_we0 = grp_single_block_AES_encrypt_mix_columns_fu_148_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st13_fsm_12) | (1'b1 == ap_sig_cseq_ST_st18_fsm_17))) begin
        state_we1 = grp_single_block_AES_encrypt_add_round_key_fu_153_state_we1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((exitcond4_fu_175_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if ((1'b0 == exitcond3_fu_203_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st5_fsm_4 : begin
            if (~(1'b0 == grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st6_fsm_5 : begin
            if (~(1'b0 == exitcond2_fu_250_p2)) begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : begin
            if (~(1'b0 == grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_done)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            if (~(1'b0 == grp_single_block_AES_encrypt_shift_rows_fu_163_ap_done)) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            if (~(1'b0 == grp_single_block_AES_encrypt_mix_columns_fu_148_ap_done)) begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            if (~(1'b0 == grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st13_fsm_12;
            end
        end
        ap_ST_st14_fsm_13 : begin
            if (~(1'b0 == grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_done)) begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            if (~(1'b0 == grp_single_block_AES_encrypt_shift_rows_fu_163_ap_done)) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            if (~(1'b0 == grp_single_block_AES_encrypt_add_round_key_fu_153_ap_done)) begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end else begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end
        end
        ap_ST_st19_fsm_18 : begin
            if (~(1'b0 == exitcond1_fu_267_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st20_fsm_19;
            end
        end
        ap_ST_st20_fsm_19 : begin
            if ((1'b0 == exitcond_fu_295_p2)) begin
                ap_NS_fsm = ap_ST_st21_fsm_20;
            end else begin
                ap_NS_fsm = ap_ST_st19_fsm_18;
            end
        end
        ap_ST_st21_fsm_20 : begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_105 = (1'b1 == ap_CS_fsm[ap_const_lv32_B]);
end

always @ (*) begin
    ap_sig_116 = (1'b1 == ap_CS_fsm[ap_const_lv32_12]);
end

always @ (*) begin
    ap_sig_132 = (1'b1 == ap_CS_fsm[ap_const_lv32_13]);
end

always @ (*) begin
    ap_sig_227 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_237 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_247 = (1'b1 == ap_CS_fsm[ap_const_lv32_C]);
end

always @ (*) begin
    ap_sig_257 = (1'b1 == ap_CS_fsm[ap_const_lv32_11]);
end

always @ (*) begin
    ap_sig_269 = (1'b1 == ap_CS_fsm[ap_const_lv32_14]);
end

always @ (*) begin
    ap_sig_278 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_285 = (1'b1 == ap_CS_fsm[ap_const_lv32_A]);
end

always @ (*) begin
    ap_sig_297 = (1'b1 == ap_CS_fsm[ap_const_lv32_10]);
end

always @ (*) begin
    ap_sig_311 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_318 = (1'b1 == ap_CS_fsm[ap_const_lv32_E]);
end

always @ (*) begin
    ap_sig_326 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_333 = (1'b1 == ap_CS_fsm[ap_const_lv32_F]);
end

always @ (*) begin
    ap_sig_343 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_356 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_363 = (1'b1 == ap_CS_fsm[ap_const_lv32_D]);
end

always @ (*) begin
    ap_sig_38 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_72 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_89 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign exitcond1_fu_267_p2 = ((i_1_reg_126 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign exitcond2_fu_250_p2 = ((r_reg_114 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign exitcond3_fu_203_p2 = ((j_reg_103 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign exitcond4_fu_175_p2 = ((i_reg_92 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign exitcond_fu_295_p2 = ((j_1_reg_137 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start = ap_reg_grp_single_block_AES_encrypt_add_round_key_fu_153_ap_start;

assign grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start = ap_reg_grp_single_block_AES_encrypt_mix_columns_fu_148_ap_start;

assign grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start = ap_reg_grp_single_block_AES_encrypt_shift_rows_fu_163_ap_start;

assign grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start = ap_reg_grp_single_block_AES_encrypt_sub_bytes_fu_168_ap_start;

assign i_12_fu_181_p2 = (i_reg_92 + ap_const_lv3_1);

assign i_13_fu_273_p2 = (i_1_reg_126 + ap_const_lv3_1);

assign in_r_address0 = tmp_42_fu_236_p1;

assign j_3_fu_209_p2 = (j_reg_103 + ap_const_lv3_1);

assign j_4_fu_301_p2 = (j_1_reg_137 + ap_const_lv3_1);

assign out_r_address0 = tmp_50_fu_338_p1;

assign out_r_d0 = state_q0;

assign r_1_fu_261_p2 = (r_reg_114 + ap_const_lv4_1);

assign r_cast3_cast_fu_256_p1 = r_reg_114;

assign tmp_40_fu_223_p3 = {{tmp_55_fu_219_p1}, {ap_const_lv2_0}};

assign tmp_41_fu_231_p2 = (tmp_cast_reg_350 + tmp_40_fu_223_p3);

assign tmp_42_fu_236_p1 = tmp_41_fu_231_p2;

assign tmp_43_fu_241_p2 = (tmp_63_cast_fu_215_p1 + tmp_s_reg_355);

assign tmp_44_fu_246_p1 = tmp_43_reg_373;

assign tmp_45_fu_287_p3 = {{tmp_56_fu_283_p1}, {ap_const_lv2_0}};

assign tmp_46_fu_311_p2 = (tmp_71_cast_fu_307_p1 + tmp_45_reg_404);

assign tmp_47_fu_316_p1 = tmp_46_fu_311_p2;

assign tmp_48_fu_325_p3 = {{tmp_57_fu_321_p1}, {ap_const_lv2_0}};

assign tmp_49_fu_333_p2 = (tmp_69_cast_reg_399 + tmp_48_fu_325_p3);

assign tmp_50_fu_338_p1 = tmp_49_reg_422;

assign tmp_55_fu_219_p1 = j_reg_103[1:0];

assign tmp_56_fu_283_p1 = i_1_reg_126[1:0];

assign tmp_57_fu_321_p1 = j_1_reg_137[1:0];

assign tmp_63_cast_fu_215_p1 = j_reg_103;

assign tmp_69_cast_fu_279_p1 = i_1_reg_126;

assign tmp_71_cast_fu_307_p1 = j_1_reg_137;

assign tmp_cast_fu_187_p1 = i_reg_92;

assign tmp_fu_191_p1 = i_reg_92[1:0];

assign tmp_s_fu_195_p3 = {{tmp_fu_191_p1}, {ap_const_lv2_0}};

assign w_address0 = grp_single_block_AES_encrypt_add_round_key_fu_153_w_address0;

assign w_address1 = grp_single_block_AES_encrypt_add_round_key_fu_153_w_address1;

assign w_ce0 = grp_single_block_AES_encrypt_add_round_key_fu_153_w_ce0;

assign w_ce1 = grp_single_block_AES_encrypt_add_round_key_fu_153_w_ce1;

always @ (posedge ap_clk) begin
    tmp_cast_reg_350[3] <= 1'b0;
    tmp_s_reg_355[1:0] <= 2'b00;
    r_cast3_cast_reg_381[5:4] <= 2'b00;
    tmp_69_cast_reg_399[3] <= 1'b0;
    tmp_45_reg_404[1:0] <= 2'b00;
end

endmodule //single_block_AES_encrypt_aes_cipher
