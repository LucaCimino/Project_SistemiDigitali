// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "single_block_AES_encrypt_gmult.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic single_block_AES_encrypt_gmult::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic single_block_AES_encrypt_gmult::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> single_block_AES_encrypt_gmult::ap_ST_st1_fsm_0 = "1";
const sc_lv<2> single_block_AES_encrypt_gmult::ap_ST_st2_fsm_1 = "10";
const sc_lv<32> single_block_AES_encrypt_gmult::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> single_block_AES_encrypt_gmult::ap_const_lv1_1 = "1";
const sc_lv<32> single_block_AES_encrypt_gmult::ap_const_lv32_1 = "1";
const sc_lv<1> single_block_AES_encrypt_gmult::ap_const_lv1_0 = "0";
const sc_lv<4> single_block_AES_encrypt_gmult::ap_const_lv4_0 = "0000";
const sc_lv<8> single_block_AES_encrypt_gmult::ap_const_lv8_0 = "00000000";
const sc_lv<4> single_block_AES_encrypt_gmult::ap_const_lv4_8 = "1000";
const sc_lv<4> single_block_AES_encrypt_gmult::ap_const_lv4_1 = "1";
const sc_lv<8> single_block_AES_encrypt_gmult::ap_const_lv8_1 = "1";
const sc_lv<32> single_block_AES_encrypt_gmult::ap_const_lv32_7 = "111";
const sc_lv<8> single_block_AES_encrypt_gmult::ap_const_lv8_1B = "11011";

single_block_AES_encrypt_gmult::single_block_AES_encrypt_gmult(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_assign_1_fu_132_p2);
    sensitive << ( tmp_18_fu_118_p2 );

    SC_METHOD(thread_a_assign_2_fu_138_p3);
    sensitive << ( tmp_18_fu_118_p2 );
    sensitive << ( tmp_19_fu_124_p3 );
    sensitive << ( a_assign_1_fu_132_p2 );

    SC_METHOD(thread_a_cast_fu_84_p1);
    sensitive << ( a );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_88_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_88_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_88_p2 );
    sensitive << ( p_reg_55 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_ap_sig_19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_41);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_19 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_41 );

    SC_METHOD(thread_b_assign_fu_146_p4);
    sensitive << ( p_s_reg_66 );

    SC_METHOD(thread_exitcond_fu_88_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_reg_44 );

    SC_METHOD(thread_i_4_fu_94_p2);
    sensitive << ( i_reg_44 );

    SC_METHOD(thread_p_0_s_fu_112_p2);
    sensitive << ( p_reg_55 );
    sensitive << ( tmp_10_fu_104_p3 );

    SC_METHOD(thread_tmp_10_fu_104_p3);
    sensitive << ( p_0_reg_75 );
    sensitive << ( tmp_fu_100_p1 );

    SC_METHOD(thread_tmp_17_fu_156_p1);
    sensitive << ( b_assign_fu_146_p4 );

    SC_METHOD(thread_tmp_18_fu_118_p2);
    sensitive << ( p_0_reg_75 );

    SC_METHOD(thread_tmp_19_fu_124_p3);
    sensitive << ( p_0_reg_75 );

    SC_METHOD(thread_tmp_fu_100_p1);
    sensitive << ( p_s_reg_66 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_88_p2 );

    ap_CS_fsm = "01";
    ap_return_preg = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "single_block_AES_encrypt_gmult_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_19, "ap_sig_19");
    sc_trace(mVcdFile, a_cast_fu_84_p1, "a_cast_fu_84_p1");
    sc_trace(mVcdFile, i_4_fu_94_p2, "i_4_fu_94_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_41, "ap_sig_41");
    sc_trace(mVcdFile, p_0_s_fu_112_p2, "p_0_s_fu_112_p2");
    sc_trace(mVcdFile, exitcond_fu_88_p2, "exitcond_fu_88_p2");
    sc_trace(mVcdFile, a_assign_2_fu_138_p3, "a_assign_2_fu_138_p3");
    sc_trace(mVcdFile, tmp_17_fu_156_p1, "tmp_17_fu_156_p1");
    sc_trace(mVcdFile, i_reg_44, "i_reg_44");
    sc_trace(mVcdFile, p_reg_55, "p_reg_55");
    sc_trace(mVcdFile, p_s_reg_66, "p_s_reg_66");
    sc_trace(mVcdFile, p_0_reg_75, "p_0_reg_75");
    sc_trace(mVcdFile, tmp_fu_100_p1, "tmp_fu_100_p1");
    sc_trace(mVcdFile, tmp_10_fu_104_p3, "tmp_10_fu_104_p3");
    sc_trace(mVcdFile, tmp_18_fu_118_p2, "tmp_18_fu_118_p2");
    sc_trace(mVcdFile, tmp_19_fu_124_p3, "tmp_19_fu_124_p3");
    sc_trace(mVcdFile, a_assign_1_fu_132_p2, "a_assign_1_fu_132_p2");
    sc_trace(mVcdFile, b_assign_fu_146_p4, "b_assign_fu_146_p4");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

single_block_AES_encrypt_gmult::~single_block_AES_encrypt_gmult() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void single_block_AES_encrypt_gmult::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv8_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
             !esl_seteq<1,1,1>(exitcond_fu_88_p2.read(), ap_const_lv1_0))) {
            ap_return_preg = p_reg_55.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_88_p2.read(), ap_const_lv1_0))) {
        i_reg_44 = i_4_fu_94_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_44 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_88_p2.read(), ap_const_lv1_0))) {
        p_0_reg_75 = a_assign_2_fu_138_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        p_0_reg_75 = a_cast_fu_84_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_88_p2.read(), ap_const_lv1_0))) {
        p_reg_55 = p_0_s_fu_112_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        p_reg_55 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_88_p2.read(), ap_const_lv1_0))) {
        p_s_reg_66 = tmp_17_fu_156_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        p_s_reg_66 = b.read();
    }
}

void single_block_AES_encrypt_gmult::thread_a_assign_1_fu_132_p2() {
    a_assign_1_fu_132_p2 = (tmp_18_fu_118_p2.read() ^ ap_const_lv8_1B);
}

void single_block_AES_encrypt_gmult::thread_a_assign_2_fu_138_p3() {
    a_assign_2_fu_138_p3 = (!tmp_19_fu_124_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_19_fu_124_p3.read()[0].to_bool())? a_assign_1_fu_132_p2.read(): tmp_18_fu_118_p2.read());
}

void single_block_AES_encrypt_gmult::thread_a_cast_fu_84_p1() {
    a_cast_fu_84_p1 = esl_zext<8,4>(a.read());
}

void single_block_AES_encrypt_gmult::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !esl_seteq<1,1,1>(exitcond_fu_88_p2.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void single_block_AES_encrypt_gmult::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void single_block_AES_encrypt_gmult::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_88_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void single_block_AES_encrypt_gmult::thread_ap_return() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_88_p2.read(), ap_const_lv1_0))) {
        ap_return = p_reg_55.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void single_block_AES_encrypt_gmult::thread_ap_sig_19() {
    ap_sig_19 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void single_block_AES_encrypt_gmult::thread_ap_sig_41() {
    ap_sig_41 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void single_block_AES_encrypt_gmult::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_19.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void single_block_AES_encrypt_gmult::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_41.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void single_block_AES_encrypt_gmult::thread_b_assign_fu_146_p4() {
    b_assign_fu_146_p4 = p_s_reg_66.read().range(7, 1);
}

void single_block_AES_encrypt_gmult::thread_exitcond_fu_88_p2() {
    exitcond_fu_88_p2 = (!i_reg_44.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_44.read() == ap_const_lv4_8);
}

void single_block_AES_encrypt_gmult::thread_i_4_fu_94_p2() {
    i_4_fu_94_p2 = (!i_reg_44.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_44.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void single_block_AES_encrypt_gmult::thread_p_0_s_fu_112_p2() {
    p_0_s_fu_112_p2 = (tmp_10_fu_104_p3.read() ^ p_reg_55.read());
}

void single_block_AES_encrypt_gmult::thread_tmp_10_fu_104_p3() {
    tmp_10_fu_104_p3 = (!tmp_fu_100_p1.read()[0].is_01())? sc_lv<8>(): ((tmp_fu_100_p1.read()[0].to_bool())? p_0_reg_75.read(): ap_const_lv8_0);
}

void single_block_AES_encrypt_gmult::thread_tmp_17_fu_156_p1() {
    tmp_17_fu_156_p1 = esl_zext<8,7>(b_assign_fu_146_p4.read());
}

void single_block_AES_encrypt_gmult::thread_tmp_18_fu_118_p2() {
    tmp_18_fu_118_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): p_0_reg_75.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void single_block_AES_encrypt_gmult::thread_tmp_19_fu_124_p3() {
    tmp_19_fu_124_p3 = p_0_reg_75.read().range(7, 7);
}

void single_block_AES_encrypt_gmult::thread_tmp_fu_100_p1() {
    tmp_fu_100_p1 = p_s_reg_66.read().range(1-1, 0);
}

void single_block_AES_encrypt_gmult::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_88_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

