// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _single_block_AES_encrypt_sub_bytes_HH_
#define _single_block_AES_encrypt_sub_bytes_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "single_block_AES_encrypt_sub_bytes_s_box.h"

namespace ap_rtl {

struct single_block_AES_encrypt_sub_bytes : public sc_module {
    // Port declarations 39
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<8> > state_0_read;
    sc_in< sc_lv<8> > state_1_read;
    sc_in< sc_lv<8> > state_2_read;
    sc_in< sc_lv<8> > state_3_read;
    sc_in< sc_lv<8> > state_4_read;
    sc_in< sc_lv<8> > state_5_read;
    sc_in< sc_lv<8> > state_6_read;
    sc_in< sc_lv<8> > state_7_read;
    sc_in< sc_lv<8> > state_8_read;
    sc_in< sc_lv<8> > state_9_read;
    sc_in< sc_lv<8> > state_10_read;
    sc_in< sc_lv<8> > state_11_read;
    sc_in< sc_lv<8> > state_12_read;
    sc_in< sc_lv<8> > state_13_read;
    sc_in< sc_lv<8> > state_14_read;
    sc_in< sc_lv<8> > state_15_read;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<8> > ap_return_3;
    sc_out< sc_lv<8> > ap_return_4;
    sc_out< sc_lv<8> > ap_return_5;
    sc_out< sc_lv<8> > ap_return_6;
    sc_out< sc_lv<8> > ap_return_7;
    sc_out< sc_lv<8> > ap_return_8;
    sc_out< sc_lv<8> > ap_return_9;
    sc_out< sc_lv<8> > ap_return_10;
    sc_out< sc_lv<8> > ap_return_11;
    sc_out< sc_lv<8> > ap_return_12;
    sc_out< sc_lv<8> > ap_return_13;
    sc_out< sc_lv<8> > ap_return_14;
    sc_out< sc_lv<8> > ap_return_15;


    // Module declarations
    single_block_AES_encrypt_sub_bytes(sc_module_name name);
    SC_HAS_PROCESS(single_block_AES_encrypt_sub_bytes);

    ~single_block_AES_encrypt_sub_bytes();

    sc_trace_file* mVcdFile;

    single_block_AES_encrypt_sub_bytes_s_box* s_box_U;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_0;
    sc_signal< bool > ap_sig_18;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<8> > s_box_address0;
    sc_signal< sc_logic > s_box_ce0;
    sc_signal< sc_lv<8> > s_box_q0;
    sc_signal< sc_lv<8> > s_box_address1;
    sc_signal< sc_logic > s_box_ce1;
    sc_signal< sc_lv<8> > s_box_q1;
    sc_signal< sc_lv<8> > s_box_address2;
    sc_signal< sc_logic > s_box_ce2;
    sc_signal< sc_lv<8> > s_box_q2;
    sc_signal< sc_lv<8> > s_box_address3;
    sc_signal< sc_logic > s_box_ce3;
    sc_signal< sc_lv<8> > s_box_q3;
    sc_signal< sc_lv<8> > s_box_address4;
    sc_signal< sc_logic > s_box_ce4;
    sc_signal< sc_lv<8> > s_box_q4;
    sc_signal< sc_lv<8> > s_box_address5;
    sc_signal< sc_logic > s_box_ce5;
    sc_signal< sc_lv<8> > s_box_q5;
    sc_signal< sc_lv<8> > s_box_address6;
    sc_signal< sc_logic > s_box_ce6;
    sc_signal< sc_lv<8> > s_box_q6;
    sc_signal< sc_lv<8> > s_box_address7;
    sc_signal< sc_logic > s_box_ce7;
    sc_signal< sc_lv<8> > s_box_q7;
    sc_signal< sc_lv<8> > s_box_address8;
    sc_signal< sc_logic > s_box_ce8;
    sc_signal< sc_lv<8> > s_box_q8;
    sc_signal< sc_lv<8> > s_box_address9;
    sc_signal< sc_logic > s_box_ce9;
    sc_signal< sc_lv<8> > s_box_q9;
    sc_signal< sc_lv<8> > s_box_address10;
    sc_signal< sc_logic > s_box_ce10;
    sc_signal< sc_lv<8> > s_box_q10;
    sc_signal< sc_lv<8> > s_box_address11;
    sc_signal< sc_logic > s_box_ce11;
    sc_signal< sc_lv<8> > s_box_q11;
    sc_signal< sc_lv<8> > s_box_address12;
    sc_signal< sc_logic > s_box_ce12;
    sc_signal< sc_lv<8> > s_box_q12;
    sc_signal< sc_lv<8> > s_box_address13;
    sc_signal< sc_logic > s_box_ce13;
    sc_signal< sc_lv<8> > s_box_q13;
    sc_signal< sc_lv<8> > s_box_address14;
    sc_signal< sc_logic > s_box_ce14;
    sc_signal< sc_lv<8> > s_box_q14;
    sc_signal< sc_lv<8> > s_box_address15;
    sc_signal< sc_logic > s_box_ce15;
    sc_signal< sc_lv<8> > s_box_q15;
    sc_signal< sc_lv<64> > tmp_8_fu_313_p1;
    sc_signal< sc_lv<64> > tmp_8_0_1_fu_318_p1;
    sc_signal< sc_lv<64> > tmp_8_0_2_fu_323_p1;
    sc_signal< sc_lv<64> > tmp_8_0_3_fu_328_p1;
    sc_signal< sc_lv<64> > tmp_8_1_fu_333_p1;
    sc_signal< sc_lv<64> > tmp_8_1_1_fu_338_p1;
    sc_signal< sc_lv<64> > tmp_8_1_2_fu_343_p1;
    sc_signal< sc_lv<64> > tmp_8_1_3_fu_348_p1;
    sc_signal< sc_lv<64> > tmp_8_2_fu_353_p1;
    sc_signal< sc_lv<64> > tmp_8_2_1_fu_358_p1;
    sc_signal< sc_lv<64> > tmp_8_2_2_fu_363_p1;
    sc_signal< sc_lv<64> > tmp_8_2_3_fu_368_p1;
    sc_signal< sc_lv<64> > tmp_8_3_fu_373_p1;
    sc_signal< sc_lv<64> > tmp_8_3_1_fu_378_p1;
    sc_signal< sc_lv<64> > tmp_8_3_2_fu_383_p1;
    sc_signal< sc_lv<64> > tmp_8_3_3_fu_388_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_sig_pprstidle_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_pp0_stg0_fsm_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_reg_ppiten_pp0_it0();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_12();
    void thread_ap_return_13();
    void thread_ap_return_14();
    void thread_ap_return_15();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_ap_sig_18();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_0();
    void thread_ap_sig_pprstidle_pp0();
    void thread_s_box_address0();
    void thread_s_box_address1();
    void thread_s_box_address10();
    void thread_s_box_address11();
    void thread_s_box_address12();
    void thread_s_box_address13();
    void thread_s_box_address14();
    void thread_s_box_address15();
    void thread_s_box_address2();
    void thread_s_box_address3();
    void thread_s_box_address4();
    void thread_s_box_address5();
    void thread_s_box_address6();
    void thread_s_box_address7();
    void thread_s_box_address8();
    void thread_s_box_address9();
    void thread_s_box_ce0();
    void thread_s_box_ce1();
    void thread_s_box_ce10();
    void thread_s_box_ce11();
    void thread_s_box_ce12();
    void thread_s_box_ce13();
    void thread_s_box_ce14();
    void thread_s_box_ce15();
    void thread_s_box_ce2();
    void thread_s_box_ce3();
    void thread_s_box_ce4();
    void thread_s_box_ce5();
    void thread_s_box_ce6();
    void thread_s_box_ce7();
    void thread_s_box_ce8();
    void thread_s_box_ce9();
    void thread_tmp_8_0_1_fu_318_p1();
    void thread_tmp_8_0_2_fu_323_p1();
    void thread_tmp_8_0_3_fu_328_p1();
    void thread_tmp_8_1_1_fu_338_p1();
    void thread_tmp_8_1_2_fu_343_p1();
    void thread_tmp_8_1_3_fu_348_p1();
    void thread_tmp_8_1_fu_333_p1();
    void thread_tmp_8_2_1_fu_358_p1();
    void thread_tmp_8_2_2_fu_363_p1();
    void thread_tmp_8_2_3_fu_368_p1();
    void thread_tmp_8_2_fu_353_p1();
    void thread_tmp_8_3_1_fu_378_p1();
    void thread_tmp_8_3_2_fu_383_p1();
    void thread_tmp_8_3_3_fu_388_p1();
    void thread_tmp_8_3_fu_373_p1();
    void thread_tmp_8_fu_313_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
