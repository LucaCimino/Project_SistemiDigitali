// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "single_block_AES_encrypt_shift_rows.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool single_block_AES_encrypt_shift_rows::ap_true = true;
const sc_logic single_block_AES_encrypt_shift_rows::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic single_block_AES_encrypt_shift_rows::ap_const_logic_0 = sc_dt::Log_0;

single_block_AES_encrypt_shift_rows::single_block_AES_encrypt_shift_rows(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_return_0);
    sensitive << ( state_5_read );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( state_6_read );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( state_13_read );

    SC_METHOD(thread_ap_return_11);
    sensitive << ( state_14_read );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( state_7_read );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( state_4_read );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( state_10_read );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( state_11_read );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( state_8_read );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( state_9_read );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( state_15_read );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( state_12_read );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "single_block_AES_encrypt_shift_rows_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, state_4_read, "(port)state_4_read");
    sc_trace(mVcdFile, state_5_read, "(port)state_5_read");
    sc_trace(mVcdFile, state_6_read, "(port)state_6_read");
    sc_trace(mVcdFile, state_7_read, "(port)state_7_read");
    sc_trace(mVcdFile, state_8_read, "(port)state_8_read");
    sc_trace(mVcdFile, state_9_read, "(port)state_9_read");
    sc_trace(mVcdFile, state_10_read, "(port)state_10_read");
    sc_trace(mVcdFile, state_11_read, "(port)state_11_read");
    sc_trace(mVcdFile, state_12_read, "(port)state_12_read");
    sc_trace(mVcdFile, state_13_read, "(port)state_13_read");
    sc_trace(mVcdFile, state_14_read, "(port)state_14_read");
    sc_trace(mVcdFile, state_15_read, "(port)state_15_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
    sc_trace(mVcdFile, ap_return_11, "(port)ap_return_11");
#endif

    }
}

single_block_AES_encrypt_shift_rows::~single_block_AES_encrypt_shift_rows() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void single_block_AES_encrypt_shift_rows::thread_ap_return_0() {
    ap_return_0 = state_5_read.read();
}

void single_block_AES_encrypt_shift_rows::thread_ap_return_1() {
    ap_return_1 = state_6_read.read();
}

void single_block_AES_encrypt_shift_rows::thread_ap_return_10() {
    ap_return_10 = state_13_read.read();
}

void single_block_AES_encrypt_shift_rows::thread_ap_return_11() {
    ap_return_11 = state_14_read.read();
}

void single_block_AES_encrypt_shift_rows::thread_ap_return_2() {
    ap_return_2 = state_7_read.read();
}

void single_block_AES_encrypt_shift_rows::thread_ap_return_3() {
    ap_return_3 = state_4_read.read();
}

void single_block_AES_encrypt_shift_rows::thread_ap_return_4() {
    ap_return_4 = state_10_read.read();
}

void single_block_AES_encrypt_shift_rows::thread_ap_return_5() {
    ap_return_5 = state_11_read.read();
}

void single_block_AES_encrypt_shift_rows::thread_ap_return_6() {
    ap_return_6 = state_8_read.read();
}

void single_block_AES_encrypt_shift_rows::thread_ap_return_7() {
    ap_return_7 = state_9_read.read();
}

void single_block_AES_encrypt_shift_rows::thread_ap_return_8() {
    ap_return_8 = state_15_read.read();
}

void single_block_AES_encrypt_shift_rows::thread_ap_return_9() {
    ap_return_9 = state_12_read.read();
}

}

