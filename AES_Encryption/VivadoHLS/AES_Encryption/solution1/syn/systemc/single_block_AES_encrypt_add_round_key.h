// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _single_block_AES_encrypt_add_round_key_HH_
#define _single_block_AES_encrypt_add_round_key_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct single_block_AES_encrypt_add_round_key : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > state_address0;
    sc_out< sc_logic > state_ce0;
    sc_out< sc_logic > state_we0;
    sc_out< sc_lv<8> > state_d0;
    sc_in< sc_lv<8> > state_q0;
    sc_out< sc_lv<4> > state_address1;
    sc_out< sc_logic > state_ce1;
    sc_out< sc_logic > state_we1;
    sc_out< sc_lv<8> > state_d1;
    sc_in< sc_lv<8> > state_q1;
    sc_out< sc_lv<8> > w_address0;
    sc_out< sc_logic > w_ce0;
    sc_in< sc_lv<8> > w_q0;
    sc_out< sc_lv<8> > w_address1;
    sc_out< sc_logic > w_ce1;
    sc_in< sc_lv<8> > w_q1;
    sc_in< sc_lv<6> > r;


    // Module declarations
    single_block_AES_encrypt_add_round_key(sc_module_name name);
    SC_HAS_PROCESS(single_block_AES_encrypt_add_round_key);

    ~single_block_AES_encrypt_add_round_key();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_22;
    sc_signal< sc_lv<8> > reg_130;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_56;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_63;
    sc_signal< sc_lv<3> > c_1_fu_148_p2;
    sc_signal< sc_lv<3> > c_1_reg_265;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_77;
    sc_signal< sc_lv<4> > state_addr_reg_270;
    sc_signal< sc_lv<1> > exitcond_fu_142_p2;
    sc_signal< sc_lv<8> > tmp_51_fu_166_p4;
    sc_signal< sc_lv<8> > tmp_51_reg_275;
    sc_signal< sc_lv<3> > tmp_54_fu_176_p2;
    sc_signal< sc_lv<3> > tmp_54_reg_282;
    sc_signal< sc_lv<4> > state_addr_6_reg_287;
    sc_signal< sc_lv<4> > state_addr_7_reg_303;
    sc_signal< sc_lv<4> > state_addr_8_reg_314;
    sc_signal< sc_lv<3> > c_reg_118;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_111;
    sc_signal< sc_lv<64> > tmp_s_fu_154_p1;
    sc_signal< sc_lv<64> > tmp_55_fu_182_p1;
    sc_signal< sc_lv<64> > tmp_57_fu_193_p1;
    sc_signal< sc_lv<64> > tmp_52_fu_198_p1;
    sc_signal< sc_lv<64> > tmp_60_fu_217_p1;
    sc_signal< sc_lv<64> > tmp_62_fu_227_p1;
    sc_signal< sc_lv<64> > tmp_64_fu_235_p1;
    sc_signal< sc_lv<64> > tmp_66_fu_245_p1;
    sc_signal< sc_lv<8> > tmp_58_fu_202_p2;
    sc_signal< sc_lv<8> > grp_fu_135_p2;
    sc_signal< sc_lv<4> > tmp_72_fu_163_p1;
    sc_signal< sc_lv<2> > tmp_fu_159_p1;
    sc_signal< sc_lv<8> > tmp_56_fu_187_p2;
    sc_signal< sc_lv<4> > tmp_59_fu_209_p3;
    sc_signal< sc_lv<8> > tmp_61_fu_222_p2;
    sc_signal< sc_lv<4> > tmp_93_cast3_fu_232_p1;
    sc_signal< sc_lv<8> > tmp_65_fu_240_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_st1_fsm_0;
    static const sc_lv<5> ap_ST_st2_fsm_1;
    static const sc_lv<5> ap_ST_st3_fsm_2;
    static const sc_lv<5> ap_ST_st4_fsm_3;
    static const sc_lv<5> ap_ST_st5_fsm_4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_2;
    static const sc_lv<8> ap_const_lv8_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_111();
    void thread_ap_sig_22();
    void thread_ap_sig_56();
    void thread_ap_sig_63();
    void thread_ap_sig_77();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_c_1_fu_148_p2();
    void thread_exitcond_fu_142_p2();
    void thread_grp_fu_135_p2();
    void thread_state_address0();
    void thread_state_address1();
    void thread_state_ce0();
    void thread_state_ce1();
    void thread_state_d0();
    void thread_state_d1();
    void thread_state_we0();
    void thread_state_we1();
    void thread_tmp_51_fu_166_p4();
    void thread_tmp_52_fu_198_p1();
    void thread_tmp_54_fu_176_p2();
    void thread_tmp_55_fu_182_p1();
    void thread_tmp_56_fu_187_p2();
    void thread_tmp_57_fu_193_p1();
    void thread_tmp_58_fu_202_p2();
    void thread_tmp_59_fu_209_p3();
    void thread_tmp_60_fu_217_p1();
    void thread_tmp_61_fu_222_p2();
    void thread_tmp_62_fu_227_p1();
    void thread_tmp_64_fu_235_p1();
    void thread_tmp_65_fu_240_p2();
    void thread_tmp_66_fu_245_p1();
    void thread_tmp_72_fu_163_p1();
    void thread_tmp_93_cast3_fu_232_p1();
    void thread_tmp_fu_159_p1();
    void thread_tmp_s_fu_154_p1();
    void thread_w_address0();
    void thread_w_address1();
    void thread_w_ce0();
    void thread_w_ce1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
