// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _single_block_AES_encrypt_shift_rows_HH_
#define _single_block_AES_encrypt_shift_rows_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct single_block_AES_encrypt_shift_rows : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > state_address0;
    sc_out< sc_logic > state_ce0;
    sc_out< sc_logic > state_we0;
    sc_out< sc_lv<8> > state_d0;
    sc_in< sc_lv<8> > state_q0;


    // Module declarations
    single_block_AES_encrypt_shift_rows(sc_module_name name);
    SC_HAS_PROCESS(single_block_AES_encrypt_shift_rows);

    ~single_block_AES_encrypt_shift_rows();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_23;
    sc_signal< sc_lv<4> > indvars_iv_cast_fu_93_p1;
    sc_signal< sc_lv<4> > indvars_iv_cast_reg_199;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_43;
    sc_signal< sc_lv<2> > tmp_1_fu_103_p1;
    sc_signal< sc_lv<2> > tmp_1_reg_207;
    sc_signal< sc_lv<1> > exitcond2_fu_97_p2;
    sc_signal< sc_lv<4> > tmp_s_fu_107_p3;
    sc_signal< sc_lv<4> > tmp_s_reg_212;
    sc_signal< sc_lv<4> > state_addr_reg_217;
    sc_signal< sc_lv<4> > state_addr_1_reg_222;
    sc_signal< sc_lv<2> > s_1_fu_140_p2;
    sc_signal< sc_lv<2> > s_1_reg_230;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_64;
    sc_signal< sc_lv<3> > i_fu_146_p2;
    sc_signal< sc_lv<1> > exitcond1_fu_135_p2;
    sc_signal< sc_lv<8> > tmp_reg_240;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_78;
    sc_signal< sc_lv<2> > tmp_8_fu_158_p1;
    sc_signal< sc_lv<2> > tmp_8_reg_248;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_87;
    sc_signal< sc_lv<1> > exitcond_fu_152_p2;
    sc_signal< sc_lv<3> > k_1_fu_176_p2;
    sc_signal< sc_lv<3> > k_1_reg_258;
    sc_signal< sc_lv<3> > indvars_iv_reg_59;
    sc_signal< sc_lv<2> > s_reg_71;
    sc_signal< sc_lv<3> > k_reg_82;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_114;
    sc_signal< sc_lv<64> > tmp_2_fu_115_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_126_p1;
    sc_signal< sc_lv<64> > tmp_7_fu_171_p1;
    sc_signal< sc_lv<64> > tmp_5_fu_194_p1;
    sc_signal< sc_lv<4> > tmp_3_fu_120_p2;
    sc_signal< sc_lv<4> > s_cast_fu_131_p1;
    sc_signal< sc_lv<4> > tmp_5_cast_fu_162_p1;
    sc_signal< sc_lv<4> > tmp_6_fu_166_p2;
    sc_signal< sc_lv<2> > tmp1_fu_182_p2;
    sc_signal< sc_lv<4> > tmp_9_fu_187_p3;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_st1_fsm_0;
    static const sc_lv<6> ap_ST_st2_fsm_1;
    static const sc_lv<6> ap_ST_st3_fsm_2;
    static const sc_lv<6> ap_ST_st4_fsm_3;
    static const sc_lv<6> ap_ST_st5_fsm_4;
    static const sc_lv<6> ap_ST_st6_fsm_5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_114();
    void thread_ap_sig_23();
    void thread_ap_sig_43();
    void thread_ap_sig_64();
    void thread_ap_sig_78();
    void thread_ap_sig_87();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_exitcond1_fu_135_p2();
    void thread_exitcond2_fu_97_p2();
    void thread_exitcond_fu_152_p2();
    void thread_i_fu_146_p2();
    void thread_indvars_iv_cast_fu_93_p1();
    void thread_k_1_fu_176_p2();
    void thread_s_1_fu_140_p2();
    void thread_s_cast_fu_131_p1();
    void thread_state_address0();
    void thread_state_ce0();
    void thread_state_d0();
    void thread_state_we0();
    void thread_tmp1_fu_182_p2();
    void thread_tmp_1_fu_103_p1();
    void thread_tmp_2_fu_115_p1();
    void thread_tmp_3_fu_120_p2();
    void thread_tmp_4_fu_126_p1();
    void thread_tmp_5_cast_fu_162_p1();
    void thread_tmp_5_fu_194_p1();
    void thread_tmp_6_fu_166_p2();
    void thread_tmp_7_fu_171_p1();
    void thread_tmp_8_fu_158_p1();
    void thread_tmp_9_fu_187_p3();
    void thread_tmp_s_fu_107_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
