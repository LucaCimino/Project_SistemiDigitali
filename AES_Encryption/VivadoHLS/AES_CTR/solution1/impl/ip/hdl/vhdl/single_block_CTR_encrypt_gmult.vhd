-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity single_block_CTR_encrypt_gmult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (3 downto 0);
    b : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of single_block_CTR_encrypt_gmult is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_19 : BOOLEAN;
    signal a_cast_fu_84_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_10_fu_94_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_41 : BOOLEAN;
    signal p_0_s_fu_112_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_assign_2_fu_138_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_156_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_44 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_reg_55 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_reg_66 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_reg_75 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_100_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_104_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_118_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_124_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_assign_1_fu_132_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_assign_fu_146_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_88_p2 = ap_const_lv1_0)))) then 
                    ap_return_preg <= p_reg_55;
                end if; 
            end if;
        end if;
    end process;


    i_reg_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_88_p2 = ap_const_lv1_0))) then 
                i_reg_44 <= i_10_fu_94_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_44 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_0_reg_75_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_88_p2 = ap_const_lv1_0))) then 
                p_0_reg_75 <= a_assign_2_fu_138_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_0_reg_75 <= a_cast_fu_84_p1;
            end if; 
        end if;
    end process;

    p_reg_55_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_88_p2 = ap_const_lv1_0))) then 
                p_reg_55 <= p_0_s_fu_112_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_reg_55 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_s_reg_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_88_p2 = ap_const_lv1_0))) then 
                p_s_reg_66 <= tmp_1_fu_156_p1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_s_reg_66 <= b;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_88_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_88_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    a_assign_1_fu_132_p2 <= (tmp_13_fu_118_p2 xor ap_const_lv8_1B);
    a_assign_2_fu_138_p3 <= 
        a_assign_1_fu_132_p2 when (tmp_14_fu_124_p3(0) = '1') else 
        tmp_13_fu_118_p2;
    a_cast_fu_84_p1 <= std_logic_vector(resize(unsigned(a),8));

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_88_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_88_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_88_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_88_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_88_p2, p_reg_55, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_88_p2 = ap_const_lv1_0)))) then 
            ap_return <= p_reg_55;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_19_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_19 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_41_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_41 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_19)
    begin
        if (ap_sig_19) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_41)
    begin
        if (ap_sig_41) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    b_assign_fu_146_p4 <= p_s_reg_66(7 downto 1);
    exitcond_fu_88_p2 <= "1" when (i_reg_44 = ap_const_lv4_8) else "0";
    i_10_fu_94_p2 <= std_logic_vector(unsigned(i_reg_44) + unsigned(ap_const_lv4_1));
    p_0_s_fu_112_p2 <= (tmp_s_fu_104_p3 xor p_reg_55);
    tmp_13_fu_118_p2 <= std_logic_vector(shift_left(unsigned(p_0_reg_75),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_14_fu_124_p3 <= p_0_reg_75(7 downto 7);
    tmp_1_fu_156_p1 <= std_logic_vector(resize(unsigned(b_assign_fu_146_p4),8));
    tmp_fu_100_p1 <= p_s_reg_66(1 - 1 downto 0);
    tmp_s_fu_104_p3 <= 
        p_0_reg_75 when (tmp_fu_100_p1(0) = '1') else 
        ap_const_lv8_0;
end behav;
