-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity single_block_CTR_encrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    i_plaintext_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    i_plaintext_TVALID : IN STD_LOGIC;
    i_plaintext_TREADY : OUT STD_LOGIC;
    i_plaintext_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    i_plaintext_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    cipher_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    cipher_TVALID : OUT STD_LOGIC;
    cipher_TREADY : IN STD_LOGIC;
    cipher_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    cipher_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of single_block_CTR_encrypt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "single_block_CTR_encrypt,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1163,HLS_SYN_LUT=2106}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal nonce_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal nonce_ce0 : STD_LOGIC;
    signal nonce_we0 : STD_LOGIC;
    signal nonce_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal nonce_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_plaintext_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_48 : BOOLEAN;
    signal exitcond1_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cipher_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_60 : BOOLEAN;
    signal i_4_fu_249_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_66 : BOOLEAN;
    signal i_5_fu_271_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_360 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_76 : BOOLEAN;
    signal tmp_s_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_365 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_296_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_383 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_94 : BOOLEAN;
    signal exitcond_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_317_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_398 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_110 : BOOLEAN;
    signal nonce_addr_reg_402 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_fu_336_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_123 : BOOLEAN;
    signal tmp_6_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal plaintext_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal plaintext_ce0 : STD_LOGIC;
    signal plaintext_we0 : STD_LOGIC;
    signal plaintext_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_nonce_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cipher_nonce_ce0 : STD_LOGIC;
    signal cipher_nonce_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_ce0 : STD_LOGIC;
    signal out_we0 : STD_LOGIC;
    signal out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_ce0 : STD_LOGIC;
    signal w_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_ce1 : STD_LOGIC;
    signal w_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_done : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_idle : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_ready : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_ce0 : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_ce0 : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_we0 : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce0 : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce1 : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_done : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_idle : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_ready : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce0 : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_we0 : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce1 : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_we1 : STD_LOGIC;
    signal grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_177 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_217 : BOOLEAN;
    signal i_1_reg_188 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_227 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_237 : BOOLEAN;
    signal i_2_reg_199 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_ioackin_cipher_TREADY : STD_LOGIC;
    signal i_3_reg_210 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_259 : BOOLEAN;
    signal ap_reg_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_278 : BOOLEAN;
    signal tmp_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_cipher_TREADY : STD_LOGIC := '0';
    signal tmp_7_fu_342_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_cast_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_403 : BOOLEAN;

    component single_block_CTR_encrypt_aes_cipher IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        w_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        w_ce0 : OUT STD_LOGIC;
        w_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        w_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        w_ce1 : OUT STD_LOGIC;
        w_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component single_block_CTR_encrypt_aes_key_expansion IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        w_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        w_ce0 : OUT STD_LOGIC;
        w_we0 : OUT STD_LOGIC;
        w_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        w_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        w_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        w_ce1 : OUT STD_LOGIC;
        w_we1 : OUT STD_LOGIC;
        w_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        w_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component single_block_CTR_encrypt_nonce IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component single_block_CTR_encrypt_plaintext IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component single_block_CTR_encrypt_w IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    nonce_U : component single_block_CTR_encrypt_nonce
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => nonce_address0,
        ce0 => nonce_ce0,
        we0 => nonce_we0,
        d0 => nonce_d0,
        q0 => nonce_q0);

    plaintext_U : component single_block_CTR_encrypt_plaintext
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => plaintext_address0,
        ce0 => plaintext_ce0,
        we0 => plaintext_we0,
        d0 => i_plaintext_TDATA,
        q0 => plaintext_q0);

    cipher_nonce_U : component single_block_CTR_encrypt_plaintext
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => cipher_nonce_address0,
        ce0 => cipher_nonce_ce0,
        we0 => grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_we0,
        d0 => grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_d0,
        q0 => cipher_nonce_q0);

    out_U : component single_block_CTR_encrypt_plaintext
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_address0,
        ce0 => out_ce0,
        we0 => out_we0,
        d0 => out_d0,
        q0 => out_q0);

    w_U : component single_block_CTR_encrypt_w
    generic map (
        DataWidth => 8,
        AddressRange => 176,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => w_address0,
        ce0 => w_ce0,
        we0 => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_we0,
        d0 => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_d0,
        q0 => w_q0,
        address1 => w_address1,
        ce1 => w_ce1,
        we1 => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_we1,
        d1 => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_d1,
        q1 => w_q1);

    grp_single_block_CTR_encrypt_aes_cipher_fu_222 : component single_block_CTR_encrypt_aes_cipher
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start,
        ap_done => grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_done,
        ap_idle => grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_idle,
        ap_ready => grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_ready,
        in_r_address0 => grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_address0,
        in_r_ce0 => grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_ce0,
        in_r_q0 => nonce_q0,
        out_r_address0 => grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_address0,
        out_r_ce0 => grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_ce0,
        out_r_we0 => grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_we0,
        out_r_d0 => grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_d0,
        w_address0 => grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address0,
        w_ce0 => grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce0,
        w_q0 => w_q0,
        w_address1 => grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address1,
        w_ce1 => grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce1,
        w_q1 => w_q1);

    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232 : component single_block_CTR_encrypt_aes_key_expansion
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start,
        ap_done => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_done,
        ap_idle => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_idle,
        ap_ready => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_ready,
        w_address0 => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address0,
        w_ce0 => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce0,
        w_we0 => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_we0,
        w_d0 => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_d0,
        w_q0 => w_q0,
        w_address1 => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address1,
        w_ce1 => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce1,
        w_we1 => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_we1,
        w_d1 => grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_d1,
        w_q1 => w_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                    ap_reg_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_ready)) then 
                    ap_reg_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_66) and not((exitcond1_fu_243_p2 = ap_const_lv1_0)))) then 
                    ap_reg_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_ready)) then 
                    ap_reg_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_cipher_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_cipher_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_logic_0 = ap_sig_ioackin_cipher_TREADY))))) then 
                    ap_reg_ioackin_cipher_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_logic_1 = cipher_TREADY)))) then 
                    ap_reg_ioackin_cipher_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                i_1_reg_188 <= i_5_reg_360;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_logic_0 = grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_done)))) then 
                i_1_reg_188 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_2_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond2_fu_265_p2)))) then 
                i_2_reg_199 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_logic_0 = ap_sig_ioackin_cipher_TREADY)))) then 
                i_2_reg_199 <= i_6_reg_383;
            end if; 
        end if;
    end process;

    i_3_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = exitcond_fu_290_p2)))) then 
                i_3_reg_210 <= ap_const_lv5_F;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = tmp_3_reg_398) and not((ap_const_lv1_0 = tmp_6_fu_330_p2)))) then 
                i_3_reg_210 <= i_7_fu_336_p2;
            end if; 
        end if;
    end process;

    i_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_243_p2 = ap_const_lv1_0) and not(ap_sig_66))) then 
                i_reg_177 <= i_4_fu_249_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                i_reg_177 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                i_5_reg_360 <= i_5_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                i_6_reg_383 <= i_6_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = tmp_3_fu_317_p3))) then
                nonce_addr_reg_402 <= tmp_5_fu_325_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                tmp_3_reg_398 <= i_3_reg_210(4 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond_fu_290_p2))) then
                tmp_last_V_reg_393 <= tmp_last_V_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_265_p2))) then
                    tmp_s_reg_365(4 downto 0) <= tmp_s_fu_277_p1(4 downto 0);
            end if;
        end if;
    end process;
    tmp_s_reg_365(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond1_fu_243_p2, ap_sig_66, exitcond2_fu_265_p2, exitcond_fu_290_p2, tmp_3_reg_398, tmp_6_fu_330_p2, grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_done, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_done, ap_sig_ioackin_cipher_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st2_fsm_1 => 
                if (((exitcond1_fu_243_p2 = ap_const_lv1_0) and not(ap_sig_66))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not(ap_sig_66) and not((exitcond1_fu_243_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_done))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_logic_0 = grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_done))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_265_p2))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_lv1_0 = exitcond_fu_290_p2))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_cipher_TREADY))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                if (((ap_const_lv1_0 = tmp_6_fu_330_p2) or not((ap_const_lv1_0 = tmp_3_reg_398)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_110 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_123 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_217_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_217 <= (ap_const_lv1_1 = ap_CS_fsm(0 downto 0));
    end process;


    ap_sig_227_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_227 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_237_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_237 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_259_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_259 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_278_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_278 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_403_assign_proc : process(tmp_3_reg_398, ap_sig_cseq_ST_st11_fsm_10)
    begin
                ap_sig_403 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = tmp_3_reg_398));
    end process;


    ap_sig_48_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_48 <= (ap_CS_fsm(1 downto 1) = ap_const_lv1_1);
    end process;


    ap_sig_60_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_60 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_66_assign_proc : process(i_plaintext_TVALID, exitcond1_fu_243_p2)
    begin
                ap_sig_66 <= ((exitcond1_fu_243_p2 = ap_const_lv1_0) and (i_plaintext_TVALID = ap_const_logic_0));
    end process;


    ap_sig_76_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_76 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_94 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_110)
    begin
        if (ap_sig_110) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_123)
    begin
        if (ap_sig_123) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_217)
    begin
        if (ap_sig_217) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_48)
    begin
        if (ap_sig_48) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_278)
    begin
        if (ap_sig_278) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_259)
    begin
        if (ap_sig_259) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_227)
    begin
        if (ap_sig_227) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_76)
    begin
        if (ap_sig_76) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_237)
    begin
        if (ap_sig_237) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_94)
    begin
        if (ap_sig_94) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_60)
    begin
        if (ap_sig_60) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_cipher_TREADY_assign_proc : process(cipher_TREADY, ap_reg_ioackin_cipher_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_cipher_TREADY)) then 
            ap_sig_ioackin_cipher_TREADY <= cipher_TREADY;
        else 
            ap_sig_ioackin_cipher_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    cipher_TDATA <= out_q0;

    cipher_TDATA_blk_n_assign_proc : process(cipher_TREADY, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            cipher_TDATA_blk_n <= cipher_TREADY;
        else 
            cipher_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cipher_TLAST <= tmp_last_V_reg_393;
    cipher_TUSER <= ap_const_lv1_1;

    cipher_TVALID_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_reg_ioackin_cipher_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_logic_0 = ap_reg_ioackin_cipher_TREADY)))) then 
            cipher_TVALID <= ap_const_logic_1;
        else 
            cipher_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    cipher_nonce_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, tmp_s_fu_277_p1, grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_address0, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            cipher_nonce_address0 <= tmp_s_fu_277_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            cipher_nonce_address0 <= grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_address0;
        else 
            cipher_nonce_address0 <= "XXXX";
        end if; 
    end process;


    cipher_nonce_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_ce0, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            cipher_nonce_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            cipher_nonce_ce0 <= grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_ce0;
        else 
            cipher_nonce_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_243_p2 <= "1" when (i_reg_177 = ap_const_lv5_10) else "0";
    exitcond2_fu_265_p2 <= "1" when (i_1_reg_188 = ap_const_lv5_10) else "0";
    exitcond_fu_290_p2 <= "1" when (i_2_reg_199 = ap_const_lv5_10) else "0";
    grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start <= ap_reg_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start;
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start <= ap_reg_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start;
        i_3_cast_fu_313_p1 <= std_logic_vector(resize(signed(i_3_reg_210),32));

    i_4_fu_249_p2 <= std_logic_vector(unsigned(i_reg_177) + unsigned(ap_const_lv5_1));
    i_5_fu_271_p2 <= std_logic_vector(unsigned(i_1_reg_188) + unsigned(ap_const_lv5_1));
    i_6_fu_296_p2 <= std_logic_vector(unsigned(i_2_reg_199) + unsigned(ap_const_lv5_1));
    i_7_fu_336_p2 <= std_logic_vector(unsigned(i_3_reg_210) + unsigned(ap_const_lv5_1F));

    i_plaintext_TDATA_blk_n_assign_proc : process(i_plaintext_TVALID, ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_243_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_243_p2 = ap_const_lv1_0))) then 
            i_plaintext_TDATA_blk_n <= i_plaintext_TVALID;
        else 
            i_plaintext_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i_plaintext_TREADY_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_243_p2, ap_sig_66)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_243_p2 = ap_const_lv1_0) and not(ap_sig_66)))) then 
            i_plaintext_TREADY <= ap_const_logic_1;
        else 
            i_plaintext_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    nonce_address0_assign_proc : process(tmp_3_reg_398, ap_sig_cseq_ST_st10_fsm_9, nonce_addr_reg_402, ap_sig_cseq_ST_st11_fsm_10, tmp_6_fu_330_p2, grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_address0, ap_sig_cseq_ST_st5_fsm_4, tmp_5_fu_325_p1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = tmp_3_reg_398) and not((ap_const_lv1_0 = tmp_6_fu_330_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = tmp_3_reg_398) and (ap_const_lv1_0 = tmp_6_fu_330_p2)))) then 
            nonce_address0 <= nonce_addr_reg_402;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            nonce_address0 <= tmp_5_fu_325_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            nonce_address0 <= grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_address0;
        else 
            nonce_address0 <= "XXXX";
        end if; 
    end process;


    nonce_ce0_assign_proc : process(tmp_3_reg_398, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st11_fsm_10, tmp_6_fu_330_p2, grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_ce0, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = tmp_3_reg_398) and not((ap_const_lv1_0 = tmp_6_fu_330_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = tmp_3_reg_398) and (ap_const_lv1_0 = tmp_6_fu_330_p2)))) then 
            nonce_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            nonce_ce0 <= grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_ce0;
        else 
            nonce_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    nonce_d0_assign_proc : process(tmp_6_fu_330_p2, tmp_7_fu_342_p2, ap_sig_403)
    begin
        if (ap_sig_403) then
            if ((ap_const_lv1_0 = tmp_6_fu_330_p2)) then 
                nonce_d0 <= tmp_7_fu_342_p2;
            elsif (not((ap_const_lv1_0 = tmp_6_fu_330_p2))) then 
                nonce_d0 <= ap_const_lv8_0;
            else 
                nonce_d0 <= "XXXXXXXX";
            end if;
        else 
            nonce_d0 <= "XXXXXXXX";
        end if; 
    end process;


    nonce_we0_assign_proc : process(tmp_3_reg_398, ap_sig_cseq_ST_st11_fsm_10, tmp_6_fu_330_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = tmp_3_reg_398) and not((ap_const_lv1_0 = tmp_6_fu_330_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = tmp_3_reg_398) and (ap_const_lv1_0 = tmp_6_fu_330_p2)))) then 
            nonce_we0 <= ap_const_logic_1;
        else 
            nonce_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_address0_assign_proc : process(tmp_s_reg_365, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st7_fsm_6, tmp_2_fu_302_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            out_address0 <= tmp_s_reg_365(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            out_address0 <= tmp_2_fu_302_p1(4 - 1 downto 0);
        else 
            out_address0 <= "XXXX";
        end if; 
    end process;


    out_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            out_ce0 <= ap_const_logic_1;
        else 
            out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_d0 <= (cipher_nonce_q0 xor plaintext_q0);

    out_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            out_we0 <= ap_const_logic_1;
        else 
            out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    plaintext_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st6_fsm_5, tmp_s_fu_277_p1, tmp_fu_260_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            plaintext_address0 <= tmp_fu_260_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            plaintext_address0 <= tmp_s_fu_277_p1(4 - 1 downto 0);
        else 
            plaintext_address0 <= "XXXX";
        end if; 
    end process;


    plaintext_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_66, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not(ap_sig_66)) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            plaintext_ce0 <= ap_const_logic_1;
        else 
            plaintext_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    plaintext_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond1_fu_243_p2, ap_sig_66)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond1_fu_243_p2 = ap_const_lv1_0) and not(ap_sig_66)))) then 
            plaintext_we0 <= ap_const_logic_1;
        else 
            plaintext_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_302_p1 <= std_logic_vector(resize(unsigned(i_2_reg_199),64));
    tmp_3_fu_317_p3 <= i_3_reg_210(4 downto 4);
    tmp_5_fu_325_p1 <= std_logic_vector(resize(unsigned(i_3_cast_fu_313_p1),64));
    tmp_6_fu_330_p2 <= "1" when (nonce_q0 = ap_const_lv8_FF) else "0";
    tmp_7_fu_342_p2 <= std_logic_vector(unsigned(nonce_q0) + unsigned(ap_const_lv8_1));
    tmp_fu_260_p1 <= std_logic_vector(resize(unsigned(i_reg_177),64));
    tmp_last_V_fu_307_p2 <= "1" when (i_2_reg_199 = ap_const_lv5_F) else "0";
    tmp_s_fu_277_p1 <= std_logic_vector(resize(unsigned(i_1_reg_188),64));

    w_address0_assign_proc : process(grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address0, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            w_address0 <= grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            w_address0 <= grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address0;
        else 
            w_address0 <= "XXXXXXXX";
        end if; 
    end process;


    w_address1_assign_proc : process(grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address1, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            w_address1 <= grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            w_address1 <= grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address1;
        else 
            w_address1 <= "XXXXXXXX";
        end if; 
    end process;


    w_ce0_assign_proc : process(grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce0, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce0, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            w_ce0 <= grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            w_ce0 <= grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce0;
        else 
            w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_ce1_assign_proc : process(grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce1, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            w_ce1 <= grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            w_ce1 <= grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce1;
        else 
            w_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
