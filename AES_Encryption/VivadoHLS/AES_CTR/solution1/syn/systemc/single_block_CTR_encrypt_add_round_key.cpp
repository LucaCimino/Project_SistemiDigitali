// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "single_block_CTR_encrypt_add_round_key.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic single_block_CTR_encrypt_add_round_key::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic single_block_CTR_encrypt_add_round_key::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> single_block_CTR_encrypt_add_round_key::ap_ST_st1_fsm_0 = "1";
const sc_lv<5> single_block_CTR_encrypt_add_round_key::ap_ST_st2_fsm_1 = "10";
const sc_lv<5> single_block_CTR_encrypt_add_round_key::ap_ST_st3_fsm_2 = "100";
const sc_lv<5> single_block_CTR_encrypt_add_round_key::ap_ST_st4_fsm_3 = "1000";
const sc_lv<5> single_block_CTR_encrypt_add_round_key::ap_ST_st5_fsm_4 = "10000";
const sc_lv<32> single_block_CTR_encrypt_add_round_key::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> single_block_CTR_encrypt_add_round_key::ap_const_lv1_1 = "1";
const sc_lv<32> single_block_CTR_encrypt_add_round_key::ap_const_lv32_2 = "10";
const sc_lv<32> single_block_CTR_encrypt_add_round_key::ap_const_lv32_3 = "11";
const sc_lv<32> single_block_CTR_encrypt_add_round_key::ap_const_lv32_1 = "1";
const sc_lv<1> single_block_CTR_encrypt_add_round_key::ap_const_lv1_0 = "0";
const sc_lv<3> single_block_CTR_encrypt_add_round_key::ap_const_lv3_0 = "000";
const sc_lv<32> single_block_CTR_encrypt_add_round_key::ap_const_lv32_4 = "100";
const sc_lv<3> single_block_CTR_encrypt_add_round_key::ap_const_lv3_4 = "100";
const sc_lv<3> single_block_CTR_encrypt_add_round_key::ap_const_lv3_1 = "1";
const sc_lv<2> single_block_CTR_encrypt_add_round_key::ap_const_lv2_0 = "00";
const sc_lv<8> single_block_CTR_encrypt_add_round_key::ap_const_lv8_1 = "1";
const sc_lv<8> single_block_CTR_encrypt_add_round_key::ap_const_lv8_2 = "10";
const sc_lv<8> single_block_CTR_encrypt_add_round_key::ap_const_lv8_3 = "11";

single_block_CTR_encrypt_add_round_key::single_block_CTR_encrypt_add_round_key(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_142_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_142_p2 );

    SC_METHOD(thread_ap_sig_111);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_56);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_63);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_77);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_22 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_77 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_56 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_63 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_111 );

    SC_METHOD(thread_c_1_fu_148_p2);
    sensitive << ( c_reg_118 );

    SC_METHOD(thread_exitcond_fu_142_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( c_reg_118 );

    SC_METHOD(thread_grp_fu_135_p2);
    sensitive << ( w_q0 );
    sensitive << ( reg_130 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( state_addr_reg_270 );
    sensitive << ( state_addr_6_reg_287 );
    sensitive << ( state_addr_7_reg_303 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_s_fu_154_p1 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( state_addr_8_reg_314 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_54_fu_182_p1 );
    sensitive << ( tmp_59_fu_217_p1 );
    sensitive << ( tmp_63_fu_235_p1 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_state_d0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_57_fu_202_p2 );
    sensitive << ( grp_fu_135_p2 );

    SC_METHOD(thread_state_d1);
    sensitive << ( state_q1 );
    sensitive << ( w_q1 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_state_we1);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_tmp_50_fu_166_p4);
    sensitive << ( tmp_68_fu_163_p1 );
    sensitive << ( tmp_fu_159_p1 );

    SC_METHOD(thread_tmp_51_fu_198_p1);
    sensitive << ( tmp_50_reg_275 );

    SC_METHOD(thread_tmp_53_fu_176_p2);
    sensitive << ( c_reg_118 );

    SC_METHOD(thread_tmp_54_fu_182_p1);
    sensitive << ( tmp_53_fu_176_p2 );

    SC_METHOD(thread_tmp_55_fu_187_p2);
    sensitive << ( tmp_50_fu_166_p4 );

    SC_METHOD(thread_tmp_56_fu_193_p1);
    sensitive << ( tmp_55_fu_187_p2 );

    SC_METHOD(thread_tmp_57_fu_202_p2);
    sensitive << ( state_q1 );
    sensitive << ( w_q0 );

    SC_METHOD(thread_tmp_58_fu_209_p3);
    sensitive << ( c_reg_118 );

    SC_METHOD(thread_tmp_59_fu_217_p1);
    sensitive << ( tmp_58_fu_209_p3 );

    SC_METHOD(thread_tmp_60_fu_222_p2);
    sensitive << ( tmp_50_reg_275 );

    SC_METHOD(thread_tmp_61_fu_227_p1);
    sensitive << ( tmp_60_fu_222_p2 );

    SC_METHOD(thread_tmp_63_fu_235_p1);
    sensitive << ( tmp_93_cast3_fu_232_p1 );

    SC_METHOD(thread_tmp_64_fu_240_p2);
    sensitive << ( tmp_50_reg_275 );

    SC_METHOD(thread_tmp_65_fu_245_p1);
    sensitive << ( tmp_64_fu_240_p2 );

    SC_METHOD(thread_tmp_68_fu_163_p1);
    sensitive << ( r );

    SC_METHOD(thread_tmp_93_cast3_fu_232_p1);
    sensitive << ( tmp_53_reg_282 );

    SC_METHOD(thread_tmp_fu_159_p1);
    sensitive << ( c_reg_118 );

    SC_METHOD(thread_tmp_s_fu_154_p1);
    sensitive << ( c_reg_118 );

    SC_METHOD(thread_w_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( tmp_56_fu_193_p1 );
    sensitive << ( tmp_51_fu_198_p1 );
    sensitive << ( tmp_61_fu_227_p1 );

    SC_METHOD(thread_w_address1);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_65_fu_245_p1 );

    SC_METHOD(thread_w_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_w_ce1);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_142_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "single_block_CTR_encrypt_add_round_key_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_we1, "(port)state_we1");
    sc_trace(mVcdFile, state_d1, "(port)state_d1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
    sc_trace(mVcdFile, w_address0, "(port)w_address0");
    sc_trace(mVcdFile, w_ce0, "(port)w_ce0");
    sc_trace(mVcdFile, w_q0, "(port)w_q0");
    sc_trace(mVcdFile, w_address1, "(port)w_address1");
    sc_trace(mVcdFile, w_ce1, "(port)w_ce1");
    sc_trace(mVcdFile, w_q1, "(port)w_q1");
    sc_trace(mVcdFile, r, "(port)r");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_22, "ap_sig_22");
    sc_trace(mVcdFile, reg_130, "reg_130");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_56, "ap_sig_56");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_63, "ap_sig_63");
    sc_trace(mVcdFile, c_1_fu_148_p2, "c_1_fu_148_p2");
    sc_trace(mVcdFile, c_1_reg_265, "c_1_reg_265");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_77, "ap_sig_77");
    sc_trace(mVcdFile, state_addr_reg_270, "state_addr_reg_270");
    sc_trace(mVcdFile, exitcond_fu_142_p2, "exitcond_fu_142_p2");
    sc_trace(mVcdFile, tmp_50_fu_166_p4, "tmp_50_fu_166_p4");
    sc_trace(mVcdFile, tmp_50_reg_275, "tmp_50_reg_275");
    sc_trace(mVcdFile, tmp_53_fu_176_p2, "tmp_53_fu_176_p2");
    sc_trace(mVcdFile, tmp_53_reg_282, "tmp_53_reg_282");
    sc_trace(mVcdFile, state_addr_6_reg_287, "state_addr_6_reg_287");
    sc_trace(mVcdFile, state_addr_7_reg_303, "state_addr_7_reg_303");
    sc_trace(mVcdFile, state_addr_8_reg_314, "state_addr_8_reg_314");
    sc_trace(mVcdFile, c_reg_118, "c_reg_118");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_111, "ap_sig_111");
    sc_trace(mVcdFile, tmp_s_fu_154_p1, "tmp_s_fu_154_p1");
    sc_trace(mVcdFile, tmp_54_fu_182_p1, "tmp_54_fu_182_p1");
    sc_trace(mVcdFile, tmp_56_fu_193_p1, "tmp_56_fu_193_p1");
    sc_trace(mVcdFile, tmp_51_fu_198_p1, "tmp_51_fu_198_p1");
    sc_trace(mVcdFile, tmp_59_fu_217_p1, "tmp_59_fu_217_p1");
    sc_trace(mVcdFile, tmp_61_fu_227_p1, "tmp_61_fu_227_p1");
    sc_trace(mVcdFile, tmp_63_fu_235_p1, "tmp_63_fu_235_p1");
    sc_trace(mVcdFile, tmp_65_fu_245_p1, "tmp_65_fu_245_p1");
    sc_trace(mVcdFile, tmp_57_fu_202_p2, "tmp_57_fu_202_p2");
    sc_trace(mVcdFile, grp_fu_135_p2, "grp_fu_135_p2");
    sc_trace(mVcdFile, tmp_68_fu_163_p1, "tmp_68_fu_163_p1");
    sc_trace(mVcdFile, tmp_fu_159_p1, "tmp_fu_159_p1");
    sc_trace(mVcdFile, tmp_55_fu_187_p2, "tmp_55_fu_187_p2");
    sc_trace(mVcdFile, tmp_58_fu_209_p3, "tmp_58_fu_209_p3");
    sc_trace(mVcdFile, tmp_60_fu_222_p2, "tmp_60_fu_222_p2");
    sc_trace(mVcdFile, tmp_93_cast3_fu_232_p1, "tmp_93_cast3_fu_232_p1");
    sc_trace(mVcdFile, tmp_64_fu_240_p2, "tmp_64_fu_240_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

single_block_CTR_encrypt_add_round_key::~single_block_CTR_encrypt_add_round_key() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void single_block_CTR_encrypt_add_round_key::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        c_reg_118 = c_1_reg_265.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        c_reg_118 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        reg_130 = state_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        reg_130 = state_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        c_1_reg_265 = c_1_fu_148_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(exitcond_fu_142_p2.read(), ap_const_lv1_0))) {
        state_addr_6_reg_287 =  (sc_lv<4>) (tmp_54_fu_182_p1.read());
        state_addr_reg_270 =  (sc_lv<4>) (tmp_s_fu_154_p1.read());
        tmp_50_reg_275 = tmp_50_fu_166_p4.read();
        tmp_53_reg_282 = tmp_53_fu_176_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        state_addr_7_reg_303 =  (sc_lv<4>) (tmp_59_fu_217_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        state_addr_8_reg_314 =  (sc_lv<4>) (tmp_63_fu_235_p1.read());
    }
}

void single_block_CTR_encrypt_add_round_key::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !esl_seteq<1,1,1>(exitcond_fu_142_p2.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt_add_round_key::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt_add_round_key::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_142_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt_add_round_key::thread_ap_sig_111() {
    ap_sig_111 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void single_block_CTR_encrypt_add_round_key::thread_ap_sig_22() {
    ap_sig_22 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void single_block_CTR_encrypt_add_round_key::thread_ap_sig_56() {
    ap_sig_56 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void single_block_CTR_encrypt_add_round_key::thread_ap_sig_63() {
    ap_sig_63 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void single_block_CTR_encrypt_add_round_key::thread_ap_sig_77() {
    ap_sig_77 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void single_block_CTR_encrypt_add_round_key::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_22.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt_add_round_key::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_77.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt_add_round_key::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_56.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt_add_round_key::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_63.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt_add_round_key::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_111.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt_add_round_key::thread_c_1_fu_148_p2() {
    c_1_fu_148_p2 = (!c_reg_118.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(c_reg_118.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void single_block_CTR_encrypt_add_round_key::thread_exitcond_fu_142_p2() {
    exitcond_fu_142_p2 = (!c_reg_118.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(c_reg_118.read() == ap_const_lv3_4);
}

void single_block_CTR_encrypt_add_round_key::thread_grp_fu_135_p2() {
    grp_fu_135_p2 = (w_q0.read() ^ reg_130.read());
}

void single_block_CTR_encrypt_add_round_key::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        state_address0 = state_addr_7_reg_303.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        state_address0 = state_addr_reg_270.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        state_address0 = state_addr_6_reg_287.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        state_address0 =  (sc_lv<4>) (tmp_s_fu_154_p1.read());
    } else {
        state_address0 = "XXXX";
    }
}

void single_block_CTR_encrypt_add_round_key::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        state_address1 = state_addr_8_reg_314.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        state_address1 =  (sc_lv<4>) (tmp_63_fu_235_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        state_address1 =  (sc_lv<4>) (tmp_59_fu_217_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        state_address1 =  (sc_lv<4>) (tmp_54_fu_182_p1.read());
    } else {
        state_address1 = "XXXX";
    }
}

void single_block_CTR_encrypt_add_round_key::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        state_ce0 = ap_const_logic_1;
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt_add_round_key::thread_state_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        state_ce1 = ap_const_logic_1;
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt_add_round_key::thread_state_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        state_d0 = grp_fu_135_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        state_d0 = tmp_57_fu_202_p2.read();
    } else {
        state_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void single_block_CTR_encrypt_add_round_key::thread_state_d1() {
    state_d1 = (w_q1.read() ^ state_q1.read());
}

void single_block_CTR_encrypt_add_round_key::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        state_we0 = ap_const_logic_1;
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt_add_round_key::thread_state_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        state_we1 = ap_const_logic_1;
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_50_fu_166_p4() {
    tmp_50_fu_166_p4 = esl_concat<6,2>(esl_concat<4,2>(tmp_68_fu_163_p1.read(), tmp_fu_159_p1.read()), ap_const_lv2_0);
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_51_fu_198_p1() {
    tmp_51_fu_198_p1 = esl_zext<64,8>(tmp_50_reg_275.read());
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_53_fu_176_p2() {
    tmp_53_fu_176_p2 = (c_reg_118.read() ^ ap_const_lv3_4);
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_54_fu_182_p1() {
    tmp_54_fu_182_p1 = esl_zext<64,3>(tmp_53_fu_176_p2.read());
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_55_fu_187_p2() {
    tmp_55_fu_187_p2 = (tmp_50_fu_166_p4.read() | ap_const_lv8_1);
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_56_fu_193_p1() {
    tmp_56_fu_193_p1 = esl_zext<64,8>(tmp_55_fu_187_p2.read());
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_57_fu_202_p2() {
    tmp_57_fu_202_p2 = (w_q0.read() ^ state_q1.read());
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_58_fu_209_p3() {
    tmp_58_fu_209_p3 = esl_concat<1,3>(ap_const_lv1_1, c_reg_118.read());
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_59_fu_217_p1() {
    tmp_59_fu_217_p1 = esl_zext<64,4>(tmp_58_fu_209_p3.read());
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_60_fu_222_p2() {
    tmp_60_fu_222_p2 = (tmp_50_reg_275.read() | ap_const_lv8_2);
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_61_fu_227_p1() {
    tmp_61_fu_227_p1 = esl_zext<64,8>(tmp_60_fu_222_p2.read());
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_63_fu_235_p1() {
    tmp_63_fu_235_p1 = esl_zext<64,4>(tmp_93_cast3_fu_232_p1.read());
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_64_fu_240_p2() {
    tmp_64_fu_240_p2 = (tmp_50_reg_275.read() | ap_const_lv8_3);
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_65_fu_245_p1() {
    tmp_65_fu_245_p1 = esl_zext<64,8>(tmp_64_fu_240_p2.read());
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_68_fu_163_p1() {
    tmp_68_fu_163_p1 = r.read().range(4-1, 0);
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_93_cast3_fu_232_p1() {
    tmp_93_cast3_fu_232_p1 = esl_sext<4,3>(tmp_53_reg_282.read());
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_fu_159_p1() {
    tmp_fu_159_p1 = c_reg_118.read().range(2-1, 0);
}

void single_block_CTR_encrypt_add_round_key::thread_tmp_s_fu_154_p1() {
    tmp_s_fu_154_p1 = esl_zext<64,3>(c_reg_118.read());
}

void single_block_CTR_encrypt_add_round_key::thread_w_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        w_address0 =  (sc_lv<8>) (tmp_61_fu_227_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        w_address0 =  (sc_lv<8>) (tmp_51_fu_198_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        w_address0 =  (sc_lv<8>) (tmp_56_fu_193_p1.read());
    } else {
        w_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void single_block_CTR_encrypt_add_round_key::thread_w_address1() {
    w_address1 =  (sc_lv<8>) (tmp_65_fu_245_p1.read());
}

void single_block_CTR_encrypt_add_round_key::thread_w_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()))) {
        w_ce0 = ap_const_logic_1;
    } else {
        w_ce0 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt_add_round_key::thread_w_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        w_ce1 = ap_const_logic_1;
    } else {
        w_ce1 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt_add_round_key::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_142_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

