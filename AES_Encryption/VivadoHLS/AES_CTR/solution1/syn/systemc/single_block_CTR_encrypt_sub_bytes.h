// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _single_block_CTR_encrypt_sub_bytes_HH_
#define _single_block_CTR_encrypt_sub_bytes_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "single_block_CTR_encrypt_aes_key_expansion_s_box.h"

namespace ap_rtl {

struct single_block_CTR_encrypt_sub_bytes : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > state_address0;
    sc_out< sc_logic > state_ce0;
    sc_out< sc_logic > state_we0;
    sc_out< sc_lv<8> > state_d0;
    sc_in< sc_lv<8> > state_q0;


    // Module declarations
    single_block_CTR_encrypt_sub_bytes(sc_module_name name);
    SC_HAS_PROCESS(single_block_CTR_encrypt_sub_bytes);

    ~single_block_CTR_encrypt_sub_bytes();

    sc_trace_file* mVcdFile;

    single_block_CTR_encrypt_aes_key_expansion_s_box* s_box_U;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_22;
    sc_signal< sc_lv<8> > s_box_address0;
    sc_signal< sc_logic > s_box_ce0;
    sc_signal< sc_lv<8> > s_box_q0;
    sc_signal< sc_lv<3> > i_1_fu_73_p2;
    sc_signal< sc_lv<3> > i_1_reg_125;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_49;
    sc_signal< sc_lv<4> > tmp_3_fu_83_p3;
    sc_signal< sc_lv<4> > tmp_3_reg_130;
    sc_signal< sc_lv<1> > exitcond1_fu_67_p2;
    sc_signal< sc_lv<3> > j_1_fu_97_p2;
    sc_signal< sc_lv<3> > j_1_reg_138;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_64;
    sc_signal< sc_lv<4> > state_addr_reg_143;
    sc_signal< sc_lv<1> > exitcond_fu_91_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_78;
    sc_signal< sc_lv<3> > i_reg_45;
    sc_signal< sc_lv<3> > j_reg_56;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_95;
    sc_signal< sc_lv<64> > tmp_7_fu_112_p1;
    sc_signal< sc_lv<64> > tmp_8_fu_117_p1;
    sc_signal< sc_lv<2> > tmp_fu_79_p1;
    sc_signal< sc_lv<4> > tmp_5_cast_fu_103_p1;
    sc_signal< sc_lv<4> > tmp_6_fu_107_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_st1_fsm_0;
    static const sc_lv<5> ap_ST_st2_fsm_1;
    static const sc_lv<5> ap_ST_st3_fsm_2;
    static const sc_lv<5> ap_ST_st4_fsm_3;
    static const sc_lv<5> ap_ST_st5_fsm_4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_22();
    void thread_ap_sig_49();
    void thread_ap_sig_64();
    void thread_ap_sig_78();
    void thread_ap_sig_95();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_exitcond1_fu_67_p2();
    void thread_exitcond_fu_91_p2();
    void thread_i_1_fu_73_p2();
    void thread_j_1_fu_97_p2();
    void thread_s_box_address0();
    void thread_s_box_ce0();
    void thread_state_address0();
    void thread_state_ce0();
    void thread_state_d0();
    void thread_state_we0();
    void thread_tmp_3_fu_83_p3();
    void thread_tmp_5_cast_fu_103_p1();
    void thread_tmp_6_fu_107_p2();
    void thread_tmp_7_fu_112_p1();
    void thread_tmp_8_fu_117_p1();
    void thread_tmp_fu_79_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
