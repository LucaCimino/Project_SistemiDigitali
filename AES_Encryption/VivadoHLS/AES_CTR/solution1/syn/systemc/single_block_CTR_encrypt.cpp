// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "single_block_CTR_encrypt.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic single_block_CTR_encrypt::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic single_block_CTR_encrypt::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> single_block_CTR_encrypt::ap_ST_st1_fsm_0 = "1";
const sc_lv<11> single_block_CTR_encrypt::ap_ST_st2_fsm_1 = "10";
const sc_lv<11> single_block_CTR_encrypt::ap_ST_st3_fsm_2 = "100";
const sc_lv<11> single_block_CTR_encrypt::ap_ST_st4_fsm_3 = "1000";
const sc_lv<11> single_block_CTR_encrypt::ap_ST_st5_fsm_4 = "10000";
const sc_lv<11> single_block_CTR_encrypt::ap_ST_st6_fsm_5 = "100000";
const sc_lv<11> single_block_CTR_encrypt::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<11> single_block_CTR_encrypt::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<11> single_block_CTR_encrypt::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<11> single_block_CTR_encrypt::ap_ST_st10_fsm_9 = "1000000000";
const sc_lv<11> single_block_CTR_encrypt::ap_ST_st11_fsm_10 = "10000000000";
const sc_lv<32> single_block_CTR_encrypt::ap_const_lv32_1 = "1";
const sc_lv<1> single_block_CTR_encrypt::ap_const_lv1_1 = "1";
const sc_lv<1> single_block_CTR_encrypt::ap_const_lv1_0 = "0";
const sc_lv<32> single_block_CTR_encrypt::ap_const_lv32_8 = "1000";
const sc_lv<32> single_block_CTR_encrypt::ap_const_lv32_5 = "101";
const sc_lv<32> single_block_CTR_encrypt::ap_const_lv32_7 = "111";
const sc_lv<32> single_block_CTR_encrypt::ap_const_lv32_9 = "1001";
const sc_lv<32> single_block_CTR_encrypt::ap_const_lv32_A = "1010";
const sc_lv<5> single_block_CTR_encrypt::ap_const_lv5_0 = "00000";
const sc_lv<32> single_block_CTR_encrypt::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> single_block_CTR_encrypt::ap_const_lv32_4 = "100";
const sc_lv<32> single_block_CTR_encrypt::ap_const_lv32_6 = "110";
const sc_lv<5> single_block_CTR_encrypt::ap_const_lv5_F = "1111";
const sc_lv<32> single_block_CTR_encrypt::ap_const_lv32_3 = "11";
const sc_lv<32> single_block_CTR_encrypt::ap_const_lv32_2 = "10";
const sc_lv<8> single_block_CTR_encrypt::ap_const_lv8_0 = "00000000";
const sc_lv<5> single_block_CTR_encrypt::ap_const_lv5_10 = "10000";
const sc_lv<5> single_block_CTR_encrypt::ap_const_lv5_1 = "1";
const sc_lv<8> single_block_CTR_encrypt::ap_const_lv8_FF = "11111111";
const sc_lv<5> single_block_CTR_encrypt::ap_const_lv5_1F = "11111";
const sc_lv<8> single_block_CTR_encrypt::ap_const_lv8_1 = "1";

single_block_CTR_encrypt::single_block_CTR_encrypt(sc_module_name name) : sc_module(name), mVcdFile(0) {
    nonce_U = new single_block_CTR_encrypt_nonce("nonce_U");
    nonce_U->clk(ap_clk);
    nonce_U->reset(ap_rst_n_inv);
    nonce_U->address0(nonce_address0);
    nonce_U->ce0(nonce_ce0);
    nonce_U->we0(nonce_we0);
    nonce_U->d0(nonce_d0);
    nonce_U->q0(nonce_q0);
    plaintext_U = new single_block_CTR_encrypt_plaintext("plaintext_U");
    plaintext_U->clk(ap_clk);
    plaintext_U->reset(ap_rst_n_inv);
    plaintext_U->address0(plaintext_address0);
    plaintext_U->ce0(plaintext_ce0);
    plaintext_U->we0(plaintext_we0);
    plaintext_U->d0(i_plaintext_TDATA);
    plaintext_U->q0(plaintext_q0);
    cipher_nonce_U = new single_block_CTR_encrypt_plaintext("cipher_nonce_U");
    cipher_nonce_U->clk(ap_clk);
    cipher_nonce_U->reset(ap_rst_n_inv);
    cipher_nonce_U->address0(cipher_nonce_address0);
    cipher_nonce_U->ce0(cipher_nonce_ce0);
    cipher_nonce_U->we0(grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_we0);
    cipher_nonce_U->d0(grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_d0);
    cipher_nonce_U->q0(cipher_nonce_q0);
    out_U = new single_block_CTR_encrypt_plaintext("out_U");
    out_U->clk(ap_clk);
    out_U->reset(ap_rst_n_inv);
    out_U->address0(out_address0);
    out_U->ce0(out_ce0);
    out_U->we0(out_we0);
    out_U->d0(out_d0);
    out_U->q0(out_q0);
    w_U = new single_block_CTR_encrypt_w("w_U");
    w_U->clk(ap_clk);
    w_U->reset(ap_rst_n_inv);
    w_U->address0(w_address0);
    w_U->ce0(w_ce0);
    w_U->we0(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_we0);
    w_U->d0(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_d0);
    w_U->q0(w_q0);
    w_U->address1(w_address1);
    w_U->ce1(w_ce1);
    w_U->we1(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_we1);
    w_U->d1(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_d1);
    w_U->q1(w_q1);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222 = new single_block_CTR_encrypt_aes_cipher("grp_single_block_CTR_encrypt_aes_cipher_fu_222");
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->ap_clk(ap_clk);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->ap_rst(ap_rst_n_inv);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->ap_start(grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->ap_done(grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_done);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->ap_idle(grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_idle);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->ap_ready(grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_ready);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->in_r_address0(grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_address0);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->in_r_ce0(grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_ce0);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->in_r_q0(nonce_q0);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->out_r_address0(grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_address0);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->out_r_ce0(grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_ce0);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->out_r_we0(grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_we0);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->out_r_d0(grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_d0);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->w_address0(grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address0);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->w_ce0(grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce0);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->w_q0(w_q0);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->w_address1(grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address1);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->w_ce1(grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce1);
    grp_single_block_CTR_encrypt_aes_cipher_fu_222->w_q1(w_q1);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232 = new single_block_CTR_encrypt_aes_key_expansion("grp_single_block_CTR_encrypt_aes_key_expansion_fu_232");
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->ap_clk(ap_clk);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->ap_rst(ap_rst_n_inv);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->ap_start(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->ap_done(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_done);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->ap_idle(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_idle);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->ap_ready(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_ready);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->w_address0(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address0);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->w_ce0(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce0);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->w_we0(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_we0);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->w_d0(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_d0);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->w_q0(w_q0);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->w_address1(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address1);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->w_ce1(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce1);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->w_we1(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_we1);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->w_d1(grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_d1);
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232->w_q1(w_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_110);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_123);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_217);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_227);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_237);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_259);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_278);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_403);
    sensitive << ( tmp_3_reg_398 );
    sensitive << ( ap_sig_cseq_ST_st11_fsm_10 );

    SC_METHOD(thread_ap_sig_48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_60);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_66);
    sensitive << ( i_plaintext_TVALID );
    sensitive << ( exitcond1_fu_243_p2 );

    SC_METHOD(thread_ap_sig_76);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_94);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st10_fsm_9);
    sensitive << ( ap_sig_110 );

    SC_METHOD(thread_ap_sig_cseq_ST_st11_fsm_10);
    sensitive << ( ap_sig_123 );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_217 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_48 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_278 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_259 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_227 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_76 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_237 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_7);
    sensitive << ( ap_sig_94 );

    SC_METHOD(thread_ap_sig_cseq_ST_st9_fsm_8);
    sensitive << ( ap_sig_60 );

    SC_METHOD(thread_ap_sig_ioackin_cipher_TREADY);
    sensitive << ( cipher_TREADY );
    sensitive << ( ap_reg_ioackin_cipher_TREADY );

    SC_METHOD(thread_cipher_TDATA);
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );
    sensitive << ( out_q0 );

    SC_METHOD(thread_cipher_TDATA_blk_n);
    sensitive << ( cipher_TREADY );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_cipher_TLAST);
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );
    sensitive << ( tmp_last_V_reg_393 );

    SC_METHOD(thread_cipher_TUSER);
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_cipher_TVALID);
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );
    sensitive << ( ap_reg_ioackin_cipher_TREADY );

    SC_METHOD(thread_cipher_nonce_address0);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( tmp_s_fu_277_p1 );
    sensitive << ( grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_address0 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_cipher_nonce_ce0);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_ce0 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_exitcond1_fu_243_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_66 );
    sensitive << ( i_reg_177 );

    SC_METHOD(thread_exitcond2_fu_265_p2);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( i_1_reg_188 );

    SC_METHOD(thread_exitcond_fu_290_p2);
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( i_2_reg_199 );

    SC_METHOD(thread_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start);
    sensitive << ( ap_reg_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start );

    SC_METHOD(thread_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start);
    sensitive << ( ap_reg_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start );

    SC_METHOD(thread_i_3_cast_fu_313_p1);
    sensitive << ( i_3_reg_210 );

    SC_METHOD(thread_i_4_fu_249_p2);
    sensitive << ( i_reg_177 );

    SC_METHOD(thread_i_5_fu_271_p2);
    sensitive << ( i_1_reg_188 );

    SC_METHOD(thread_i_6_fu_296_p2);
    sensitive << ( i_2_reg_199 );

    SC_METHOD(thread_i_7_fu_336_p2);
    sensitive << ( i_3_reg_210 );

    SC_METHOD(thread_i_plaintext_TDATA_blk_n);
    sensitive << ( i_plaintext_TVALID );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_243_p2 );

    SC_METHOD(thread_i_plaintext_TREADY);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_243_p2 );
    sensitive << ( ap_sig_66 );

    SC_METHOD(thread_nonce_address0);
    sensitive << ( tmp_3_reg_398 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );
    sensitive << ( nonce_addr_reg_402 );
    sensitive << ( ap_sig_cseq_ST_st11_fsm_10 );
    sensitive << ( tmp_6_fu_330_p2 );
    sensitive << ( grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_address0 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_5_fu_325_p1 );

    SC_METHOD(thread_nonce_ce0);
    sensitive << ( tmp_3_reg_398 );
    sensitive << ( ap_sig_cseq_ST_st10_fsm_9 );
    sensitive << ( ap_sig_cseq_ST_st11_fsm_10 );
    sensitive << ( tmp_6_fu_330_p2 );
    sensitive << ( grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_ce0 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_nonce_d0);
    sensitive << ( tmp_6_fu_330_p2 );
    sensitive << ( tmp_7_fu_342_p2 );
    sensitive << ( ap_sig_403 );

    SC_METHOD(thread_nonce_we0);
    sensitive << ( tmp_3_reg_398 );
    sensitive << ( ap_sig_cseq_ST_st11_fsm_10 );
    sensitive << ( tmp_6_fu_330_p2 );

    SC_METHOD(thread_out_address0);
    sensitive << ( tmp_s_reg_365 );
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( tmp_2_fu_302_p1 );

    SC_METHOD(thread_out_ce0);
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_out_d0);
    sensitive << ( plaintext_q0 );
    sensitive << ( cipher_nonce_q0 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_out_we0);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_plaintext_address0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( tmp_s_fu_277_p1 );
    sensitive << ( tmp_fu_260_p1 );

    SC_METHOD(thread_plaintext_ce0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_66 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_plaintext_we0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_fu_243_p2 );
    sensitive << ( ap_sig_66 );

    SC_METHOD(thread_tmp_2_fu_302_p1);
    sensitive << ( i_2_reg_199 );

    SC_METHOD(thread_tmp_3_fu_317_p3);
    sensitive << ( i_3_reg_210 );

    SC_METHOD(thread_tmp_5_fu_325_p1);
    sensitive << ( i_3_cast_fu_313_p1 );

    SC_METHOD(thread_tmp_6_fu_330_p2);
    sensitive << ( nonce_q0 );
    sensitive << ( tmp_3_reg_398 );
    sensitive << ( ap_sig_cseq_ST_st11_fsm_10 );

    SC_METHOD(thread_tmp_7_fu_342_p2);
    sensitive << ( nonce_q0 );

    SC_METHOD(thread_tmp_fu_260_p1);
    sensitive << ( i_reg_177 );

    SC_METHOD(thread_tmp_last_V_fu_307_p2);
    sensitive << ( ap_sig_cseq_ST_st8_fsm_7 );
    sensitive << ( exitcond_fu_290_p2 );
    sensitive << ( i_2_reg_199 );

    SC_METHOD(thread_tmp_s_fu_277_p1);
    sensitive << ( i_1_reg_188 );

    SC_METHOD(thread_w_address0);
    sensitive << ( grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address0 );
    sensitive << ( grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address0 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_w_address1);
    sensitive << ( grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address1 );
    sensitive << ( grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address1 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_w_ce0);
    sensitive << ( grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce0 );
    sensitive << ( grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce0 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_w_ce1);
    sensitive << ( grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce1 );
    sensitive << ( grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce1 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_243_p2 );
    sensitive << ( ap_sig_66 );
    sensitive << ( exitcond2_fu_265_p2 );
    sensitive << ( exitcond_fu_290_p2 );
    sensitive << ( tmp_3_reg_398 );
    sensitive << ( tmp_6_fu_330_p2 );
    sensitive << ( grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_done );
    sensitive << ( grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_done );
    sensitive << ( ap_sig_ioackin_cipher_TREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000001";
    ap_reg_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start = SC_LOGIC_0;
    ap_reg_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start = SC_LOGIC_0;
    ap_reg_ioackin_cipher_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "single_block_CTR_encrypt_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, i_plaintext_TDATA, "(port)i_plaintext_TDATA");
    sc_trace(mVcdFile, i_plaintext_TVALID, "(port)i_plaintext_TVALID");
    sc_trace(mVcdFile, i_plaintext_TREADY, "(port)i_plaintext_TREADY");
    sc_trace(mVcdFile, i_plaintext_TUSER, "(port)i_plaintext_TUSER");
    sc_trace(mVcdFile, i_plaintext_TLAST, "(port)i_plaintext_TLAST");
    sc_trace(mVcdFile, cipher_TDATA, "(port)cipher_TDATA");
    sc_trace(mVcdFile, cipher_TVALID, "(port)cipher_TVALID");
    sc_trace(mVcdFile, cipher_TREADY, "(port)cipher_TREADY");
    sc_trace(mVcdFile, cipher_TUSER, "(port)cipher_TUSER");
    sc_trace(mVcdFile, cipher_TLAST, "(port)cipher_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, nonce_address0, "nonce_address0");
    sc_trace(mVcdFile, nonce_ce0, "nonce_ce0");
    sc_trace(mVcdFile, nonce_we0, "nonce_we0");
    sc_trace(mVcdFile, nonce_d0, "nonce_d0");
    sc_trace(mVcdFile, nonce_q0, "nonce_q0");
    sc_trace(mVcdFile, i_plaintext_TDATA_blk_n, "i_plaintext_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_48, "ap_sig_48");
    sc_trace(mVcdFile, exitcond1_fu_243_p2, "exitcond1_fu_243_p2");
    sc_trace(mVcdFile, cipher_TDATA_blk_n, "cipher_TDATA_blk_n");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st9_fsm_8, "ap_sig_cseq_ST_st9_fsm_8");
    sc_trace(mVcdFile, ap_sig_60, "ap_sig_60");
    sc_trace(mVcdFile, i_4_fu_249_p2, "i_4_fu_249_p2");
    sc_trace(mVcdFile, ap_sig_66, "ap_sig_66");
    sc_trace(mVcdFile, i_5_fu_271_p2, "i_5_fu_271_p2");
    sc_trace(mVcdFile, i_5_reg_360, "i_5_reg_360");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_76, "ap_sig_76");
    sc_trace(mVcdFile, tmp_s_fu_277_p1, "tmp_s_fu_277_p1");
    sc_trace(mVcdFile, tmp_s_reg_365, "tmp_s_reg_365");
    sc_trace(mVcdFile, exitcond2_fu_265_p2, "exitcond2_fu_265_p2");
    sc_trace(mVcdFile, i_6_fu_296_p2, "i_6_fu_296_p2");
    sc_trace(mVcdFile, i_6_reg_383, "i_6_reg_383");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_7, "ap_sig_cseq_ST_st8_fsm_7");
    sc_trace(mVcdFile, ap_sig_94, "ap_sig_94");
    sc_trace(mVcdFile, exitcond_fu_290_p2, "exitcond_fu_290_p2");
    sc_trace(mVcdFile, tmp_last_V_fu_307_p2, "tmp_last_V_fu_307_p2");
    sc_trace(mVcdFile, tmp_last_V_reg_393, "tmp_last_V_reg_393");
    sc_trace(mVcdFile, tmp_3_fu_317_p3, "tmp_3_fu_317_p3");
    sc_trace(mVcdFile, tmp_3_reg_398, "tmp_3_reg_398");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st10_fsm_9, "ap_sig_cseq_ST_st10_fsm_9");
    sc_trace(mVcdFile, ap_sig_110, "ap_sig_110");
    sc_trace(mVcdFile, nonce_addr_reg_402, "nonce_addr_reg_402");
    sc_trace(mVcdFile, i_7_fu_336_p2, "i_7_fu_336_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st11_fsm_10, "ap_sig_cseq_ST_st11_fsm_10");
    sc_trace(mVcdFile, ap_sig_123, "ap_sig_123");
    sc_trace(mVcdFile, tmp_6_fu_330_p2, "tmp_6_fu_330_p2");
    sc_trace(mVcdFile, plaintext_address0, "plaintext_address0");
    sc_trace(mVcdFile, plaintext_ce0, "plaintext_ce0");
    sc_trace(mVcdFile, plaintext_we0, "plaintext_we0");
    sc_trace(mVcdFile, plaintext_q0, "plaintext_q0");
    sc_trace(mVcdFile, cipher_nonce_address0, "cipher_nonce_address0");
    sc_trace(mVcdFile, cipher_nonce_ce0, "cipher_nonce_ce0");
    sc_trace(mVcdFile, cipher_nonce_q0, "cipher_nonce_q0");
    sc_trace(mVcdFile, out_address0, "out_address0");
    sc_trace(mVcdFile, out_ce0, "out_ce0");
    sc_trace(mVcdFile, out_we0, "out_we0");
    sc_trace(mVcdFile, out_d0, "out_d0");
    sc_trace(mVcdFile, out_q0, "out_q0");
    sc_trace(mVcdFile, w_address0, "w_address0");
    sc_trace(mVcdFile, w_ce0, "w_ce0");
    sc_trace(mVcdFile, w_q0, "w_q0");
    sc_trace(mVcdFile, w_address1, "w_address1");
    sc_trace(mVcdFile, w_ce1, "w_ce1");
    sc_trace(mVcdFile, w_q1, "w_q1");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start, "grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_done, "grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_done");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_idle, "grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_idle");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_ready, "grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_ready");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_address0, "grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_address0");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_ce0, "grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_ce0");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_address0, "grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_address0");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_ce0, "grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_ce0");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_we0, "grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_we0");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_d0, "grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_d0");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address0, "grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address0");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce0, "grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce0");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address1, "grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address1");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce1, "grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce1");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start, "grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_done, "grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_done");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_idle, "grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_idle");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_ready, "grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_ready");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address0, "grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address0");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce0, "grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce0");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_we0, "grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_we0");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_d0, "grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_d0");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address1, "grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address1");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce1, "grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce1");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_we1, "grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_we1");
    sc_trace(mVcdFile, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_d1, "grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_d1");
    sc_trace(mVcdFile, i_reg_177, "i_reg_177");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_217, "ap_sig_217");
    sc_trace(mVcdFile, i_1_reg_188, "i_1_reg_188");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_227, "ap_sig_227");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_237, "ap_sig_237");
    sc_trace(mVcdFile, i_2_reg_199, "i_2_reg_199");
    sc_trace(mVcdFile, ap_sig_ioackin_cipher_TREADY, "ap_sig_ioackin_cipher_TREADY");
    sc_trace(mVcdFile, i_3_reg_210, "i_3_reg_210");
    sc_trace(mVcdFile, ap_reg_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start, "ap_reg_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_259, "ap_sig_259");
    sc_trace(mVcdFile, ap_reg_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start, "ap_reg_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_278, "ap_sig_278");
    sc_trace(mVcdFile, tmp_fu_260_p1, "tmp_fu_260_p1");
    sc_trace(mVcdFile, tmp_2_fu_302_p1, "tmp_2_fu_302_p1");
    sc_trace(mVcdFile, tmp_5_fu_325_p1, "tmp_5_fu_325_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_cipher_TREADY, "ap_reg_ioackin_cipher_TREADY");
    sc_trace(mVcdFile, tmp_7_fu_342_p2, "tmp_7_fu_342_p2");
    sc_trace(mVcdFile, i_3_cast_fu_313_p1, "i_3_cast_fu_313_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_403, "ap_sig_403");
#endif

    }
    mHdltvinHandle.open("single_block_CTR_encrypt.hdltvin.dat");
    mHdltvoutHandle.open("single_block_CTR_encrypt.hdltvout.dat");
}

single_block_CTR_encrypt::~single_block_CTR_encrypt() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete nonce_U;
    delete plaintext_U;
    delete cipher_nonce_U;
    delete out_U;
    delete w_U;
    delete grp_single_block_CTR_encrypt_aes_cipher_fu_222;
    delete grp_single_block_CTR_encrypt_aes_key_expansion_fu_232;
}

void single_block_CTR_encrypt::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
            ap_reg_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_ready.read())) {
            ap_reg_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
             !ap_sig_66.read() && 
             !esl_seteq<1,1,1>(exitcond1_fu_243_p2.read(), ap_const_lv1_0))) {
            ap_reg_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_ready.read())) {
            ap_reg_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_cipher_TREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read()) && 
              !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_cipher_TREADY.read())))) {
            ap_reg_ioackin_cipher_TREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, cipher_TREADY.read())))) {
            ap_reg_ioackin_cipher_TREADY = ap_const_logic_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        i_1_reg_188 = i_5_reg_360.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
                !esl_seteq<1,1,1>(ap_const_logic_0, grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_done.read()))) {
        i_1_reg_188 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_265_p2.read()))) {
        i_2_reg_199 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read()) && 
                !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_cipher_TREADY.read()))) {
        i_2_reg_199 = i_6_reg_383.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_290_p2.read()))) {
        i_3_reg_210 = ap_const_lv5_F;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_10.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_reg_398.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_330_p2.read()))) {
        i_3_reg_210 = i_7_fu_336_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_243_p2.read(), ap_const_lv1_0) && 
         !ap_sig_66.read())) {
        i_reg_177 = i_4_fu_249_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        i_reg_177 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        i_5_reg_360 = i_5_fu_271_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read())) {
        i_6_reg_383 = i_6_fu_296_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_317_p3.read()))) {
        nonce_addr_reg_402 =  (sc_lv<4>) (tmp_5_fu_325_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read())) {
        tmp_3_reg_398 = i_3_reg_210.read().range(4, 4);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_290_p2.read()))) {
        tmp_last_V_reg_393 = tmp_last_V_fu_307_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_265_p2.read()))) {
        tmp_s_reg_365 = tmp_s_fu_277_p1.read();
    }
}

void single_block_CTR_encrypt::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void single_block_CTR_encrypt::thread_ap_sig_110() {
    ap_sig_110 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(9, 9));
}

void single_block_CTR_encrypt::thread_ap_sig_123() {
    ap_sig_123 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(10, 10));
}

void single_block_CTR_encrypt::thread_ap_sig_217() {
    ap_sig_217 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(0, 0));
}

void single_block_CTR_encrypt::thread_ap_sig_227() {
    ap_sig_227 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void single_block_CTR_encrypt::thread_ap_sig_237() {
    ap_sig_237 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void single_block_CTR_encrypt::thread_ap_sig_259() {
    ap_sig_259 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void single_block_CTR_encrypt::thread_ap_sig_278() {
    ap_sig_278 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void single_block_CTR_encrypt::thread_ap_sig_403() {
    ap_sig_403 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_10.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_reg_398.read()));
}

void single_block_CTR_encrypt::thread_ap_sig_48() {
    ap_sig_48 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(1, 1), ap_const_lv1_1);
}

void single_block_CTR_encrypt::thread_ap_sig_60() {
    ap_sig_60 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void single_block_CTR_encrypt::thread_ap_sig_66() {
    ap_sig_66 = (esl_seteq<1,1,1>(exitcond1_fu_243_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(i_plaintext_TVALID.read(), ap_const_logic_0));
}

void single_block_CTR_encrypt::thread_ap_sig_76() {
    ap_sig_76 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void single_block_CTR_encrypt::thread_ap_sig_94() {
    ap_sig_94 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void single_block_CTR_encrypt::thread_ap_sig_cseq_ST_st10_fsm_9() {
    if (ap_sig_110.read()) {
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_ap_sig_cseq_ST_st11_fsm_10() {
    if (ap_sig_123.read()) {
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_217.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_48.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_278.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_259.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_227.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_76.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_237.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_ap_sig_cseq_ST_st8_fsm_7() {
    if (ap_sig_94.read()) {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_ap_sig_cseq_ST_st9_fsm_8() {
    if (ap_sig_60.read()) {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_ap_sig_ioackin_cipher_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_cipher_TREADY.read())) {
        ap_sig_ioackin_cipher_TREADY = cipher_TREADY.read();
    } else {
        ap_sig_ioackin_cipher_TREADY = ap_const_logic_1;
    }
}

void single_block_CTR_encrypt::thread_cipher_TDATA() {
    cipher_TDATA = out_q0.read();
}

void single_block_CTR_encrypt::thread_cipher_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        cipher_TDATA_blk_n = cipher_TREADY.read();
    } else {
        cipher_TDATA_blk_n = ap_const_logic_1;
    }
}

void single_block_CTR_encrypt::thread_cipher_TLAST() {
    cipher_TLAST = tmp_last_V_reg_393.read();
}

void single_block_CTR_encrypt::thread_cipher_TUSER() {
    cipher_TUSER = ap_const_lv1_1;
}

void single_block_CTR_encrypt::thread_cipher_TVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_cipher_TREADY.read())))) {
        cipher_TVALID = ap_const_logic_1;
    } else {
        cipher_TVALID = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_cipher_nonce_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        cipher_nonce_address0 =  (sc_lv<4>) (tmp_s_fu_277_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        cipher_nonce_address0 = grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_address0.read();
    } else {
        cipher_nonce_address0 = "XXXX";
    }
}

void single_block_CTR_encrypt::thread_cipher_nonce_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        cipher_nonce_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        cipher_nonce_ce0 = grp_single_block_CTR_encrypt_aes_cipher_fu_222_out_r_ce0.read();
    } else {
        cipher_nonce_ce0 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_exitcond1_fu_243_p2() {
    exitcond1_fu_243_p2 = (!i_reg_177.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_177.read() == ap_const_lv5_10);
}

void single_block_CTR_encrypt::thread_exitcond2_fu_265_p2() {
    exitcond2_fu_265_p2 = (!i_1_reg_188.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_188.read() == ap_const_lv5_10);
}

void single_block_CTR_encrypt::thread_exitcond_fu_290_p2() {
    exitcond_fu_290_p2 = (!i_2_reg_199.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_2_reg_199.read() == ap_const_lv5_10);
}

void single_block_CTR_encrypt::thread_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start() {
    grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start = ap_reg_grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_start.read();
}

void single_block_CTR_encrypt::thread_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start() {
    grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start = ap_reg_grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_start.read();
}

void single_block_CTR_encrypt::thread_i_3_cast_fu_313_p1() {
    i_3_cast_fu_313_p1 = esl_sext<32,5>(i_3_reg_210.read());
}

void single_block_CTR_encrypt::thread_i_4_fu_249_p2() {
    i_4_fu_249_p2 = (!i_reg_177.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_reg_177.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void single_block_CTR_encrypt::thread_i_5_fu_271_p2() {
    i_5_fu_271_p2 = (!i_1_reg_188.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_1_reg_188.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void single_block_CTR_encrypt::thread_i_6_fu_296_p2() {
    i_6_fu_296_p2 = (!i_2_reg_199.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_2_reg_199.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void single_block_CTR_encrypt::thread_i_7_fu_336_p2() {
    i_7_fu_336_p2 = (!i_3_reg_210.read().is_01() || !ap_const_lv5_1F.is_01())? sc_lv<5>(): (sc_biguint<5>(i_3_reg_210.read()) + sc_bigint<5>(ap_const_lv5_1F));
}

void single_block_CTR_encrypt::thread_i_plaintext_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_243_p2.read(), ap_const_lv1_0))) {
        i_plaintext_TDATA_blk_n = i_plaintext_TVALID.read();
    } else {
        i_plaintext_TDATA_blk_n = ap_const_logic_1;
    }
}

void single_block_CTR_encrypt::thread_i_plaintext_TREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          esl_seteq<1,1,1>(exitcond1_fu_243_p2.read(), ap_const_lv1_0) && 
          !ap_sig_66.read()))) {
        i_plaintext_TREADY = ap_const_logic_1;
    } else {
        i_plaintext_TREADY = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_nonce_address0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_10.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_reg_398.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_330_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_10.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_reg_398.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_330_p2.read())))) {
        nonce_address0 = nonce_addr_reg_402.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read())) {
        nonce_address0 =  (sc_lv<4>) (tmp_5_fu_325_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        nonce_address0 = grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_address0.read();
    } else {
        nonce_address0 = "XXXX";
    }
}

void single_block_CTR_encrypt::thread_nonce_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st10_fsm_9.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_10.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_reg_398.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_330_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_10.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_reg_398.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_330_p2.read())))) {
        nonce_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        nonce_ce0 = grp_single_block_CTR_encrypt_aes_cipher_fu_222_in_r_ce0.read();
    } else {
        nonce_ce0 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_nonce_d0() {
    if (ap_sig_403.read()) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_330_p2.read())) {
            nonce_d0 = tmp_7_fu_342_p2.read();
        } else if (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_330_p2.read())) {
            nonce_d0 = ap_const_lv8_0;
        } else {
            nonce_d0 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        nonce_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void single_block_CTR_encrypt::thread_nonce_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_10.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_reg_398.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_330_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st11_fsm_10.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_reg_398.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_330_p2.read())))) {
        nonce_we0 = ap_const_logic_1;
    } else {
        nonce_we0 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_out_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        out_address0 =  (sc_lv<4>) (tmp_s_reg_365.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read())) {
        out_address0 =  (sc_lv<4>) (tmp_2_fu_302_p1.read());
    } else {
        out_address0 = "XXXX";
    }
}

void single_block_CTR_encrypt::thread_out_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()))) {
        out_ce0 = ap_const_logic_1;
    } else {
        out_ce0 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_out_d0() {
    out_d0 = (cipher_nonce_q0.read() ^ plaintext_q0.read());
}

void single_block_CTR_encrypt::thread_out_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()))) {
        out_we0 = ap_const_logic_1;
    } else {
        out_we0 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_plaintext_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        plaintext_address0 =  (sc_lv<4>) (tmp_fu_260_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        plaintext_address0 =  (sc_lv<4>) (tmp_s_fu_277_p1.read());
    } else {
        plaintext_address0 = "XXXX";
    }
}

void single_block_CTR_encrypt::thread_plaintext_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !ap_sig_66.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()))) {
        plaintext_ce0 = ap_const_logic_1;
    } else {
        plaintext_ce0 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_plaintext_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          esl_seteq<1,1,1>(exitcond1_fu_243_p2.read(), ap_const_lv1_0) && 
          !ap_sig_66.read()))) {
        plaintext_we0 = ap_const_logic_1;
    } else {
        plaintext_we0 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_tmp_2_fu_302_p1() {
    tmp_2_fu_302_p1 = esl_zext<64,5>(i_2_reg_199.read());
}

void single_block_CTR_encrypt::thread_tmp_3_fu_317_p3() {
    tmp_3_fu_317_p3 = i_3_reg_210.read().range(4, 4);
}

void single_block_CTR_encrypt::thread_tmp_5_fu_325_p1() {
    tmp_5_fu_325_p1 = esl_zext<64,32>(i_3_cast_fu_313_p1.read());
}

void single_block_CTR_encrypt::thread_tmp_6_fu_330_p2() {
    tmp_6_fu_330_p2 = (!nonce_q0.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(nonce_q0.read() == ap_const_lv8_FF);
}

void single_block_CTR_encrypt::thread_tmp_7_fu_342_p2() {
    tmp_7_fu_342_p2 = (!nonce_q0.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(nonce_q0.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void single_block_CTR_encrypt::thread_tmp_fu_260_p1() {
    tmp_fu_260_p1 = esl_zext<64,5>(i_reg_177.read());
}

void single_block_CTR_encrypt::thread_tmp_last_V_fu_307_p2() {
    tmp_last_V_fu_307_p2 = (!i_2_reg_199.read().is_01() || !ap_const_lv5_F.is_01())? sc_lv<1>(): sc_lv<1>(i_2_reg_199.read() == ap_const_lv5_F);
}

void single_block_CTR_encrypt::thread_tmp_s_fu_277_p1() {
    tmp_s_fu_277_p1 = esl_zext<64,5>(i_1_reg_188.read());
}

void single_block_CTR_encrypt::thread_w_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        w_address0 = grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        w_address0 = grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address0.read();
    } else {
        w_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void single_block_CTR_encrypt::thread_w_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        w_address1 = grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        w_address1 = grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_address1.read();
    } else {
        w_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void single_block_CTR_encrypt::thread_w_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        w_ce0 = grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        w_ce0 = grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce0.read();
    } else {
        w_ce0 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_w_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        w_ce1 = grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_w_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        w_ce1 = grp_single_block_CTR_encrypt_aes_cipher_fu_222_w_ce1.read();
    } else {
        w_ce1 = ap_const_logic_0;
    }
}

void single_block_CTR_encrypt::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_243_p2.read(), ap_const_lv1_0) && !ap_sig_66.read())) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else if ((!ap_sig_66.read() && !esl_seteq<1,1,1>(exitcond1_fu_243_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_single_block_CTR_encrypt_aes_key_expansion_fu_232_ap_done.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_single_block_CTR_encrypt_aes_cipher_fu_222_ap_done.read())) {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 32 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_265_p2.read())) {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 128 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_290_p2.read())) {
                ap_NS_fsm = ap_ST_st10_fsm_9;
            } else {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            }
            break;
        case 256 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_cipher_TREADY.read())) {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_fu_330_p2.read()) || !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_reg_398.read()))) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st10_fsm_9;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<11>) ("XXXXXXXXXXX");
            break;
    }
}

void single_block_CTR_encrypt::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_plaintext_TDATA\" :  \"" << i_plaintext_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_plaintext_TVALID\" :  \"" << i_plaintext_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"i_plaintext_TREADY\" :  \"" << i_plaintext_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_plaintext_TUSER\" :  \"" << i_plaintext_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_plaintext_TLAST\" :  \"" << i_plaintext_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"cipher_TDATA\" :  \"" << cipher_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"cipher_TVALID\" :  \"" << cipher_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cipher_TREADY\" :  \"" << cipher_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"cipher_TUSER\" :  \"" << cipher_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"cipher_TLAST\" :  \"" << cipher_TLAST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

