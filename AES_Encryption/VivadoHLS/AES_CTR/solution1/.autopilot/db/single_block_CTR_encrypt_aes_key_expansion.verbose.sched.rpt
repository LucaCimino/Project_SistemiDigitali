

================================================================
== Vivado HLS Report for 'single_block_CTR_encrypt_aes_key_expansion'
================================================================
* Date:           Tue Feb 06 09:16:23 2024

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        AES_CTR
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      5.33|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------+-----+-----+----------+-----------+-----------+------+----------+
        |                 |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        |    Loop Name    | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +-----------------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1         |   12|   12|         3|          -|          -|     4|    no    |
        |- Loop 2         |    ?|    ?|         ?|          -|          -|    40|    no    |
        | + Loop 2.1      |    3|    3|         1|          -|          -|     3|    no    |
        | + Loop 2.2      |    8|    8|         2|          -|          -|     4|    no    |
        | + Loop 2.3      |    ?|    ?|        10|          -|          -|     ?|    no    |
        |  ++ Loop 2.3.1  |    8|    8|         1|          -|          -|     8|    no    |
        +-----------------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 18
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (!exitcond1)
	5  / (exitcond1)
3 --> 
	4  / true
4 --> 
	2  / true
5 --> 
	6  / (!exitcond)
6 --> 
	7  / true
7 --> 
	8  / (tmp_17)
	15  / (!tmp_17)
8 --> 
	8  / (!exitcond_i2)
	9  / (exitcond_i2)
9 --> 
	10  / (!exitcond_i)
	11  / (exitcond_i & !tmp_18)
	13  / (exitcond_i & tmp_18)
10 --> 
	9  / true
11 --> 
	12  / (!icmp & !icmp1)
	13  / (icmp) | (icmp1)
12 --> 
	11  / (exitcond_i1)
	12  / (!exitcond_i1)
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	5  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: stg_19 [1/1] 1.57ns
:0  br label %1


 <State 2>: 3.19ns
ST_2: i [1/1] 0.00ns
:0  %i = phi i3 [ 0, %0 ], [ %i_11, %2 ]

ST_2: exitcond1 [1/1] 1.62ns
:1  %exitcond1 = icmp eq i3 %i, -4

ST_2: empty [1/1] 0.00ns
:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)

ST_2: i_11 [1/1] 0.80ns
:3  %i_11 = add i3 %i, 1

ST_2: stg_24 [1/1] 1.57ns
:4  br i1 %exitcond1, label %.preheader, label %2

ST_2: tmp_19 [1/1] 0.00ns
:0  %tmp_19 = trunc i3 %i to i2

ST_2: tmp_s [1/1] 0.00ns
:1  %tmp_s = call i4 @_ssdm_op_BitConcatenate.i4.i2.i2(i2 %tmp_19, i2 0)

ST_2: tmp_1 [1/1] 0.00ns
:2  %tmp_1 = zext i4 %tmp_s to i64

ST_2: key_addr [1/1] 0.00ns
:3  %key_addr = getelementptr inbounds [16 x i8]* @key, i64 0, i64 %tmp_1

ST_2: key_load [2/2] 2.39ns
:4  %key_load = load i8* %key_addr, align 4

ST_2: tmp_2 [1/1] 0.00ns
:7  %tmp_2 = or i4 %tmp_s, 1

ST_2: tmp_3 [1/1] 0.00ns
:8  %tmp_3 = zext i4 %tmp_2 to i64

ST_2: key_addr_1 [1/1] 0.00ns
:9  %key_addr_1 = getelementptr inbounds [16 x i8]* @key, i64 0, i64 %tmp_3

ST_2: key_load_1 [2/2] 2.39ns
:10  %key_load_1 = load i8* %key_addr_1, align 1


 <State 3>: 5.10ns
ST_3: key_load [1/2] 2.39ns
:4  %key_load = load i8* %key_addr, align 4

ST_3: w_addr [1/1] 0.00ns
:5  %w_addr = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_1

ST_3: stg_36 [1/1] 2.71ns
:6  store i8 %key_load, i8* %w_addr, align 1

ST_3: key_load_1 [1/2] 2.39ns
:10  %key_load_1 = load i8* %key_addr_1, align 1

ST_3: w_addr_1 [1/1] 0.00ns
:11  %w_addr_1 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_3

ST_3: stg_39 [1/1] 2.71ns
:12  store i8 %key_load_1, i8* %w_addr_1, align 1

ST_3: tmp_4 [1/1] 0.00ns
:13  %tmp_4 = or i4 %tmp_s, 2

ST_3: tmp_5 [1/1] 0.00ns
:14  %tmp_5 = zext i4 %tmp_4 to i64

ST_3: key_addr_2 [1/1] 0.00ns
:15  %key_addr_2 = getelementptr inbounds [16 x i8]* @key, i64 0, i64 %tmp_5

ST_3: key_load_2 [2/2] 2.39ns
:16  %key_load_2 = load i8* %key_addr_2, align 2

ST_3: tmp_6 [1/1] 0.00ns
:19  %tmp_6 = or i4 %tmp_s, 3

ST_3: tmp_7 [1/1] 0.00ns
:20  %tmp_7 = zext i4 %tmp_6 to i64

ST_3: key_addr_3 [1/1] 0.00ns
:21  %key_addr_3 = getelementptr inbounds [16 x i8]* @key, i64 0, i64 %tmp_7

ST_3: key_load_3 [2/2] 2.39ns
:22  %key_load_3 = load i8* %key_addr_3, align 1


 <State 4>: 5.10ns
ST_4: key_load_2 [1/2] 2.39ns
:16  %key_load_2 = load i8* %key_addr_2, align 2

ST_4: w_addr_2 [1/1] 0.00ns
:17  %w_addr_2 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_5

ST_4: stg_50 [1/1] 2.71ns
:18  store i8 %key_load_2, i8* %w_addr_2, align 1

ST_4: key_load_3 [1/2] 2.39ns
:22  %key_load_3 = load i8* %key_addr_3, align 1

ST_4: w_addr_3 [1/1] 0.00ns
:23  %w_addr_3 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_7

ST_4: stg_53 [1/1] 2.71ns
:24  store i8 %key_load_3, i8* %w_addr_3, align 1

ST_4: stg_54 [1/1] 0.00ns
:25  br label %1


 <State 5>: 4.43ns
ST_5: i_1 [1/1] 0.00ns
.preheader:0  %i_1 = phi i6 [ %i_15, %._crit_edge ], [ 4, %1 ]

ST_5: exitcond [1/1] 1.94ns
.preheader:1  %exitcond = icmp eq i6 %i_1, -20

ST_5: empty_19 [1/1] 0.00ns
.preheader:2  %empty_19 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 40, i64 40, i64 40)

ST_5: stg_58 [1/1] 0.00ns
.preheader:3  br i1 %exitcond, label %8, label %3

ST_5: tmp_8 [1/1] 0.00ns
:0  %tmp_8 = call i8 @_ssdm_op_BitConcatenate.i8.i6.i2(i6 %i_1, i2 0)

ST_5: tmp_9 [1/1] 1.72ns
:1  %tmp_9 = add i8 -4, %tmp_8

ST_5: tmp_10 [1/1] 0.00ns
:2  %tmp_10 = zext i8 %tmp_9 to i64

ST_5: w_addr_4 [1/1] 0.00ns
:3  %w_addr_4 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_10

ST_5: tmp_48 [2/2] 2.71ns
:4  %tmp_48 = load i8* %w_addr_4, align 1

ST_5: tmp_11 [1/1] 1.72ns
:5  %tmp_11 = add i8 -3, %tmp_8

ST_5: tmp_12 [1/1] 0.00ns
:6  %tmp_12 = zext i8 %tmp_11 to i64

ST_5: w_addr_5 [1/1] 0.00ns
:7  %w_addr_5 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_12

ST_5: tmp_1_20 [2/2] 2.71ns
:8  %tmp_1_20 = load i8* %w_addr_5, align 1

ST_5: stg_68 [1/1] 0.00ns
:0  ret void


 <State 6>: 4.43ns
ST_6: tmp_48 [1/2] 2.71ns
:4  %tmp_48 = load i8* %w_addr_4, align 1

ST_6: tmp_1_20 [1/2] 2.71ns
:8  %tmp_1_20 = load i8* %w_addr_5, align 1

ST_6: tmp_13 [1/1] 1.72ns
:9  %tmp_13 = add i8 -2, %tmp_8

ST_6: tmp_14 [1/1] 0.00ns
:10  %tmp_14 = zext i8 %tmp_13 to i64

ST_6: w_addr_6 [1/1] 0.00ns
:11  %w_addr_6 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_14

ST_6: tmp_2_21 [2/2] 2.71ns
:12  %tmp_2_21 = load i8* %w_addr_6, align 1

ST_6: tmp_15 [1/1] 1.72ns
:13  %tmp_15 = add i8 -1, %tmp_8

ST_6: tmp_16 [1/1] 0.00ns
:14  %tmp_16 = zext i8 %tmp_15 to i64

ST_6: w_addr_7 [1/1] 0.00ns
:15  %w_addr_7 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_16

ST_6: tmp_3_1 [2/2] 2.71ns
:16  %tmp_3_1 = load i8* %w_addr_7, align 1


 <State 7>: 4.28ns
ST_7: tmp_2_21 [1/2] 2.71ns
:12  %tmp_2_21 = load i8* %w_addr_6, align 1

ST_7: tmp_3_1 [1/2] 2.71ns
:16  %tmp_3_1 = load i8* %w_addr_7, align 1

ST_7: tmp_40 [1/1] 0.00ns
:17  %tmp_40 = trunc i6 %i_1 to i2

ST_7: tmp_17 [1/1] 1.36ns
:18  %tmp_17 = icmp eq i2 %tmp_40, 0

ST_7: stg_83 [1/1] 1.57ns
:19  br i1 %tmp_17, label %.preheader50, label %._crit_edge


 <State 8>: 4.10ns
ST_8: write_flag_i [1/1] 0.00ns
.preheader50:0  %write_flag_i = phi i1 [ %write_flag_1_i, %_ifconv.i ], [ false, %3 ]

ST_8: w_3_read_assign_2 [1/1] 0.00ns
.preheader50:1  %w_3_read_assign_2 = phi i8 [ %w_3_read_assign_3, %_ifconv.i ], [ undef, %3 ]

ST_8: tmp_2_1 [1/1] 0.00ns
.preheader50:2  %tmp_2_1 = phi i8 [ %w_3_read_assign_5, %_ifconv.i ], [ %tmp_2_21, %3 ]

ST_8: tmp_1_1 [1/1] 0.00ns
.preheader50:3  %tmp_1_1 = phi i8 [ %w_3_read_assign_7, %_ifconv.i ], [ %tmp_1_20, %3 ]

ST_8: i_i2 [1/1] 0.00ns
.preheader50:4  %i_i2 = phi i2 [ %i_12, %_ifconv.i ], [ 0, %3 ]

ST_8: exitcond_i2 [1/1] 1.36ns
.preheader50:5  %exitcond_i2 = icmp eq i2 %i_i2, -1

ST_8: empty_22 [1/1] 0.00ns
.preheader50:6  %empty_22 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 3, i64 3, i64 3)

ST_8: i_12 [1/1] 0.80ns
.preheader50:7  %i_12 = add i2 %i_i2, 1

ST_8: stg_92 [1/1] 0.00ns
.preheader50:8  br i1 %exitcond_i2, label %rot_word.exit, label %_ifconv.i

ST_8: sel_tmp_i [1/1] 1.36ns
_ifconv.i:0  %sel_tmp_i = icmp eq i2 %i_i2, 1

ST_8: w_3_read_assign [1/1] 0.00ns (grouped into LUT with out node w_3_read_assign_1)
_ifconv.i:1  %w_3_read_assign = select i1 %sel_tmp_i, i8 %tmp_2_1, i8 %tmp_3_1

ST_8: sel_tmp2_i [1/1] 1.36ns
_ifconv.i:2  %sel_tmp2_i = icmp eq i2 %i_i2, 0

ST_8: w_3_read_assign_1 [1/1] 1.37ns (out node of the LUT)
_ifconv.i:3  %w_3_read_assign_1 = select i1 %sel_tmp2_i, i8 %tmp_1_1, i8 %w_3_read_assign

ST_8: write_flag_1_i [1/1] 1.37ns
_ifconv.i:4  %write_flag_1_i = or i1 %sel_tmp2_i, %write_flag_i

ST_8: w_3_read_assign_3 [1/1] 1.37ns
_ifconv.i:5  %w_3_read_assign_3 = select i1 %sel_tmp2_i, i8 %tmp_1_1, i8 %w_3_read_assign_2

ST_8: w_3_read_assign_4 [1/1] 0.00ns (grouped into LUT with out node w_3_read_assign_5)
_ifconv.i:6  %w_3_read_assign_4 = select i1 %sel_tmp_i, i8 %tmp_2_1, i8 %w_3_read_assign_1

ST_8: w_3_read_assign_5 [1/1] 1.37ns (out node of the LUT)
_ifconv.i:7  %w_3_read_assign_5 = select i1 %sel_tmp2_i, i8 %tmp_2_1, i8 %w_3_read_assign_4

ST_8: w_3_read_assign_6 [1/1] 0.00ns (grouped into LUT with out node w_3_read_assign_7)
_ifconv.i:8  %w_3_read_assign_6 = select i1 %sel_tmp_i, i8 %w_3_read_assign_1, i8 %tmp_1_1

ST_8: w_3_read_assign_7 [1/1] 1.37ns (out node of the LUT)
_ifconv.i:9  %w_3_read_assign_7 = select i1 %sel_tmp2_i, i8 %tmp_1_1, i8 %w_3_read_assign_6

ST_8: stg_103 [1/1] 0.00ns
_ifconv.i:10  br label %.preheader50

ST_8: tmp_0_1 [1/1] 1.37ns
rot_word.exit:0  %tmp_0_1 = select i1 %write_flag_i, i8 %w_3_read_assign_2, i8 %tmp_48

ST_8: stg_105 [1/1] 1.57ns
rot_word.exit:1  br label %4


 <State 9>: 3.96ns
ST_9: a_3_read_assign [1/1] 0.00ns
:0  %a_3_read_assign = phi i8 [ %tmp_48, %rot_word.exit ], [ %tmp_3_24, %_ifconv ]

ST_9: a_2_read_assign [1/1] 0.00ns
:1  %a_2_read_assign = phi i8 [ %tmp_2_1, %rot_word.exit ], [ %tmp_3_4, %_ifconv ]

ST_9: tmp_3_3 [1/1] 0.00ns
:2  %tmp_3_3 = phi i8 [ %tmp_1_1, %rot_word.exit ], [ %tmp_3_7, %_ifconv ]

ST_9: tmp_3_6 [1/1] 0.00ns
:3  %tmp_3_6 = phi i8 [ %tmp_0_1, %rot_word.exit ], [ %tmp_3_8, %_ifconv ]

ST_9: i_i [1/1] 0.00ns
:4  %i_i = phi i3 [ 0, %rot_word.exit ], [ %i_13, %_ifconv ]

ST_9: exitcond_i [1/1] 1.62ns
:5  %exitcond_i = icmp eq i3 %i_i, -4

ST_9: empty_23 [1/1] 0.00ns
:6  %empty_23 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)

ST_9: i_13 [1/1] 0.80ns
:7  %i_13 = add i3 %i_i, 1

ST_9: stg_114 [1/1] 0.00ns
:8  br i1 %exitcond_i, label %sub_word.exit, label %_ifconv

ST_9: tmp_41 [1/1] 0.00ns
_ifconv:0  %tmp_41 = trunc i3 %i_i to i2

ST_9: tmp [1/1] 1.57ns
_ifconv:1  %tmp = call i8 @_ssdm_op_Mux.ap_auto.4i8.i2(i8 %tmp_3_6, i8 %tmp_3_3, i8 %a_2_read_assign, i8 %a_3_read_assign, i2 %tmp_41)

ST_9: tmp_1_i [1/1] 0.00ns
_ifconv:2  %tmp_1_i = zext i8 %tmp to i64

ST_9: s_box_addr [1/1] 0.00ns
_ifconv:3  %s_box_addr = getelementptr inbounds [256 x i8]* @s_box, i64 0, i64 %tmp_1_i

ST_9: tmp_3_11 [2/2] 2.39ns
_ifconv:4  %tmp_3_11 = load i8* %s_box_addr, align 1

ST_9: i_assign [1/1] 0.00ns
sub_word.exit:0  %i_assign = call i4 @_ssdm_op_PartSelect.i4.i6.i32.i32(i6 %i_1, i32 2, i32 5)

ST_9: i_assign_cast1 [1/1] 0.00ns
sub_word.exit:1  %i_assign_cast1 = zext i4 %i_assign to i8

ST_9: tmp_18 [1/1] 1.88ns
sub_word.exit:2  %tmp_18 = icmp eq i4 %i_assign, 1

ST_9: stg_123 [1/1] 0.00ns
sub_word.exit:3  br i1 %tmp_18, label %5, label %6

ST_9: tmp_42 [1/1] 0.00ns
:0  %tmp_42 = call i3 @_ssdm_op_PartSelect.i3.i6.i32.i32(i6 %i_1, i32 3, i32 5)

ST_9: icmp [1/1] 1.62ns
:1  %icmp = icmp eq i3 %tmp_42, 0

ST_9: stg_126 [1/1] 1.57ns
:2  br i1 %icmp, label %.loopexit.i, label %.preheader.i

ST_9: stg_127 [1/1] 2.39ns
:0  store i8 1, i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 0), align 1

ST_9: stg_128 [1/1] 0.00ns
:1  br label %Rcon.exit


 <State 10>: 4.10ns
ST_10: tmp_3_11 [1/2] 2.39ns
_ifconv:4  %tmp_3_11 = load i8* %s_box_addr, align 1

ST_10: sel_tmp [1/1] 1.36ns
_ifconv:5  %sel_tmp = icmp eq i2 %tmp_41, -2

ST_10: sel_tmp8 [1/1] 1.36ns
_ifconv:6  %sel_tmp8 = icmp eq i2 %tmp_41, 1

ST_10: sel_tmp2 [1/1] 1.36ns
_ifconv:7  %sel_tmp2 = icmp eq i2 %tmp_41, 0

ST_10: or_cond [1/1] 1.37ns
_ifconv:8  %or_cond = or i1 %sel_tmp2, %sel_tmp8

ST_10: newSel [1/1] 0.00ns (grouped into LUT with out node tmp_3_24)
_ifconv:9  %newSel = select i1 %sel_tmp, i8 %a_3_read_assign, i8 %tmp_3_11

ST_10: tmp_3_24 [1/1] 1.37ns (out node of the LUT)
_ifconv:10  %tmp_3_24 = select i1 %or_cond, i8 %a_3_read_assign, i8 %newSel

ST_10: newSel5 [1/1] 0.00ns (grouped into LUT with out node tmp_3_4)
_ifconv:11  %newSel5 = select i1 %sel_tmp, i8 %tmp_3_11, i8 %a_2_read_assign

ST_10: tmp_3_4 [1/1] 1.37ns (out node of the LUT)
_ifconv:12  %tmp_3_4 = select i1 %or_cond, i8 %a_2_read_assign, i8 %newSel5

ST_10: tmp_3_5 [1/1] 0.00ns (grouped into LUT with out node tmp_3_7)
_ifconv:13  %tmp_3_5 = select i1 %sel_tmp8, i8 %tmp_3_11, i8 %tmp_3_3

ST_10: tmp_3_7 [1/1] 1.37ns (out node of the LUT)
_ifconv:14  %tmp_3_7 = select i1 %sel_tmp2, i8 %tmp_3_3, i8 %tmp_3_5

ST_10: tmp_3_8 [1/1] 1.37ns
_ifconv:15  %tmp_3_8 = select i1 %sel_tmp2, i8 %tmp_3_11, i8 %tmp_3_6

ST_10: stg_141 [1/1] 0.00ns
_ifconv:16  br label %4


 <State 11>: 5.26ns
ST_11: a_assign [1/1] 0.00ns
.preheader.i:0  %a_assign = phi i8 [ 2, %6 ], [ %p_i, %.preheader72 ]

ST_11: p_0_in_i [1/1] 0.00ns
.preheader.i:1  %p_0_in_i = phi i8 [ %i_assign_cast1, %6 ], [ %i_assign_1, %.preheader72 ]

ST_11: i_assign_1 [1/1] 1.72ns
.preheader.i:2  %i_assign_1 = add i8 %p_0_in_i, -1

ST_11: tmp_43 [1/1] 0.00ns
.preheader.i:3  %tmp_43 = call i7 @_ssdm_op_PartSelect.i7.i8.i32.i32(i8 %i_assign_1, i32 1, i32 7)

ST_11: icmp1 [1/1] 1.97ns
.preheader.i:4  %icmp1 = icmp eq i7 %tmp_43, 0

ST_11: stg_147 [1/1] 1.57ns
.preheader.i:5  br i1 %icmp1, label %.loopexit.i.loopexit, label %.preheader72

ST_11: stg_148 [1/1] 2.39ns
.loopexit.i.loopexit:0  store i8 %a_assign, i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 0), align 1

ST_11: stg_149 [1/1] 0.00ns
.loopexit.i.loopexit:1  br label %.loopexit.i

ST_11: stg_150 [1/1] 0.00ns
.loopexit.i:0  br label %Rcon.exit


 <State 12>: 1.88ns
ST_12: i_i1 [1/1] 0.00ns
.preheader72:0  %i_i1 = phi i4 [ %i_14, %7 ], [ 0, %.preheader.i ]

ST_12: p_i [1/1] 0.00ns
.preheader72:1  %p_i = phi i8 [ %p_0_i_27, %7 ], [ 0, %.preheader.i ]

ST_12: p_i_25 [1/1] 0.00ns
.preheader72:2  %p_i_25 = phi i5 [ %b_assign, %7 ], [ 2, %.preheader.i ]

ST_12: p_0_i [1/1] 0.00ns
.preheader72:3  %p_0_i = phi i8 [ %a_assign_5, %7 ], [ %a_assign, %.preheader.i ]

ST_12: exitcond_i1 [1/1] 1.88ns
.preheader72:4  %exitcond_i1 = icmp eq i4 %i_i1, -8

ST_12: empty_26 [1/1] 0.00ns
.preheader72:5  %empty_26 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 8, i64 8, i64 8) nounwind

ST_12: i_14 [1/1] 0.80ns
.preheader72:6  %i_14 = add i4 %i_i1, 1

ST_12: stg_158 [1/1] 0.00ns
.preheader72:7  br i1 %exitcond_i1, label %.preheader.i, label %7

ST_12: tmp_44 [1/1] 0.00ns (grouped into LUT with out node p_0_i_27)
:0  %tmp_44 = trunc i5 %p_i_25 to i1

ST_12: tmp_18_i [1/1] 0.00ns (grouped into LUT with out node p_0_i_27)
:1  %tmp_18_i = select i1 %tmp_44, i8 %p_0_i, i8 0

ST_12: p_0_i_27 [1/1] 1.37ns (out node of the LUT)
:2  %p_0_i_27 = xor i8 %tmp_18_i, %p_i

ST_12: tmp_45 [1/1] 0.00ns
:3  %tmp_45 = shl i8 %p_0_i, 1

ST_12: tmp_46 [1/1] 0.00ns (grouped into LUT with out node a_assign_5)
:4  %tmp_46 = call i1 @_ssdm_op_BitSelect.i1.i8.i32(i8 %p_0_i, i32 7)

ST_12: a_assign_4 [1/1] 0.00ns (grouped into LUT with out node a_assign_5)
:5  %a_assign_4 = xor i8 %tmp_45, 27

ST_12: a_assign_5 [1/1] 1.37ns (out node of the LUT)
:6  %a_assign_5 = select i1 %tmp_46, i8 %a_assign_4, i8 %tmp_45

ST_12: tmp_47 [1/1] 0.00ns
:7  %tmp_47 = call i4 @_ssdm_op_PartSelect.i4.i5.i32.i32(i5 %p_i_25, i32 1, i32 4)

ST_12: b_assign [1/1] 0.00ns
:8  %b_assign = zext i4 %tmp_47 to i5

ST_12: stg_168 [1/1] 0.00ns
:9  br label %.preheader72


 <State 13>: 2.39ns
ST_13: R_load_1 [2/2] 2.39ns
Rcon.exit:2  %R_load_1 = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 1), align 1

ST_13: R_load_2 [2/2] 2.39ns
Rcon.exit:4  %R_load_2 = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 2), align 1


 <State 14>: 3.76ns
ST_14: R_load [2/2] 2.39ns
Rcon.exit:0  %R_load = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 0), align 1

ST_14: R_load_1 [1/2] 2.39ns
Rcon.exit:2  %R_load_1 = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 1), align 1

ST_14: tmp_1_3 [1/1] 1.37ns
Rcon.exit:3  %tmp_1_3 = xor i8 %R_load_1, %tmp_3_3

ST_14: R_load_2 [1/2] 2.39ns
Rcon.exit:4  %R_load_2 = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 2), align 1

ST_14: tmp_2_3 [1/1] 1.37ns
Rcon.exit:5  %tmp_2_3 = xor i8 %R_load_2, %a_2_read_assign

ST_14: R_load_3 [2/2] 2.39ns
Rcon.exit:6  %R_load_3 = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 3), align 1


 <State 15>: 5.33ns
ST_15: R_load [1/2] 2.39ns
Rcon.exit:0  %R_load = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 0), align 1

ST_15: tmp_0 [1/1] 1.37ns
Rcon.exit:1  %tmp_0 = xor i8 %R_load, %tmp_3_6

ST_15: R_load_3 [1/2] 2.39ns
Rcon.exit:6  %R_load_3 = load i8* getelementptr inbounds ([4 x i8]* @R, i64 0, i64 3), align 1

ST_15: tmp_3_9 [1/1] 1.37ns
Rcon.exit:7  %tmp_3_9 = xor i8 %R_load_3, %a_3_read_assign

ST_15: stg_181 [1/1] 1.57ns
Rcon.exit:8  br label %._crit_edge

ST_15: tmp_20 [1/1] 1.72ns
._crit_edge:4  %tmp_20 = add i8 %tmp_8, -16

ST_15: tmp_21 [1/1] 0.00ns
._crit_edge:5  %tmp_21 = zext i8 %tmp_20 to i64

ST_15: w_addr_8 [1/1] 0.00ns
._crit_edge:6  %w_addr_8 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_21

ST_15: w_load [2/2] 2.71ns
._crit_edge:7  %w_load = load i8* %w_addr_8, align 1

ST_15: tmp_24 [1/1] 1.72ns
._crit_edge:12  %tmp_24 = add i8 %tmp_8, -15

ST_15: tmp_25 [1/1] 0.00ns
._crit_edge:13  %tmp_25 = zext i8 %tmp_24 to i64

ST_15: w_addr_10 [1/1] 0.00ns
._crit_edge:14  %w_addr_10 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_25

ST_15: w_load_1 [2/2] 2.71ns
._crit_edge:15  %w_load_1 = load i8* %w_addr_10, align 1

ST_15: i_15 [1/1] 1.72ns
._crit_edge:39  %i_15 = add i6 %i_1, 1


 <State 16>: 4.43ns
ST_16: tmp_1_s [1/1] 0.00ns (grouped into LUT with out node tmp_26)
._crit_edge:2  %tmp_1_s = phi i8 [ %tmp_1_3, %Rcon.exit ], [ %tmp_1_20, %3 ]

ST_16: tmp_0_s [1/1] 0.00ns (grouped into LUT with out node tmp_22)
._crit_edge:3  %tmp_0_s = phi i8 [ %tmp_0, %Rcon.exit ], [ %tmp_48, %3 ]

ST_16: w_load [1/2] 2.71ns
._crit_edge:7  %w_load = load i8* %w_addr_8, align 1

ST_16: tmp_22 [1/1] 1.37ns (out node of the LUT)
._crit_edge:8  %tmp_22 = xor i8 %w_load, %tmp_0_s

ST_16: w_load_1 [1/2] 2.71ns
._crit_edge:15  %w_load_1 = load i8* %w_addr_10, align 1

ST_16: tmp_26 [1/1] 1.37ns (out node of the LUT)
._crit_edge:16  %tmp_26 = xor i8 %w_load_1, %tmp_1_s

ST_16: tmp_29 [1/1] 1.72ns
._crit_edge:21  %tmp_29 = add i8 %tmp_8, -14

ST_16: tmp_30 [1/1] 0.00ns
._crit_edge:22  %tmp_30 = zext i8 %tmp_29 to i64

ST_16: w_addr_12 [1/1] 0.00ns
._crit_edge:23  %w_addr_12 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_30

ST_16: w_load_2 [2/2] 2.71ns
._crit_edge:24  %w_load_2 = load i8* %w_addr_12, align 1

ST_16: tmp_34 [1/1] 1.72ns
._crit_edge:30  %tmp_34 = add i8 %tmp_8, -13

ST_16: tmp_35 [1/1] 0.00ns
._crit_edge:31  %tmp_35 = zext i8 %tmp_34 to i64

ST_16: w_addr_14 [1/1] 0.00ns
._crit_edge:32  %w_addr_14 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_35

ST_16: w_load_3 [2/2] 2.71ns
._crit_edge:33  %w_load_3 = load i8* %w_addr_14, align 1


 <State 17>: 4.08ns
ST_17: tmp_3_s [1/1] 0.00ns (grouped into LUT with out node tmp_36)
._crit_edge:0  %tmp_3_s = phi i8 [ %tmp_3_9, %Rcon.exit ], [ %tmp_3_1, %3 ]

ST_17: tmp_2_3_2 [1/1] 0.00ns (grouped into LUT with out node tmp_31)
._crit_edge:1  %tmp_2_3_2 = phi i8 [ %tmp_2_3, %Rcon.exit ], [ %tmp_2_21, %3 ]

ST_17: tmp_23 [1/1] 0.00ns
._crit_edge:9  %tmp_23 = zext i8 %tmp_8 to i64

ST_17: w_addr_9 [1/1] 0.00ns
._crit_edge:10  %w_addr_9 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_23

ST_17: stg_209 [1/1] 2.71ns
._crit_edge:11  store i8 %tmp_22, i8* %w_addr_9, align 1

ST_17: tmp_27 [1/1] 0.00ns
._crit_edge:17  %tmp_27 = or i8 %tmp_8, 1

ST_17: tmp_28 [1/1] 0.00ns
._crit_edge:18  %tmp_28 = zext i8 %tmp_27 to i64

ST_17: w_addr_11 [1/1] 0.00ns
._crit_edge:19  %w_addr_11 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_28

ST_17: stg_213 [1/1] 2.71ns
._crit_edge:20  store i8 %tmp_26, i8* %w_addr_11, align 1

ST_17: w_load_2 [1/2] 2.71ns
._crit_edge:24  %w_load_2 = load i8* %w_addr_12, align 1

ST_17: tmp_31 [1/1] 1.37ns (out node of the LUT)
._crit_edge:25  %tmp_31 = xor i8 %w_load_2, %tmp_2_3_2

ST_17: w_load_3 [1/2] 2.71ns
._crit_edge:33  %w_load_3 = load i8* %w_addr_14, align 1

ST_17: tmp_36 [1/1] 1.37ns (out node of the LUT)
._crit_edge:34  %tmp_36 = xor i8 %w_load_3, %tmp_3_s


 <State 18>: 2.71ns
ST_18: tmp_32 [1/1] 0.00ns
._crit_edge:26  %tmp_32 = or i8 %tmp_8, 2

ST_18: tmp_33 [1/1] 0.00ns
._crit_edge:27  %tmp_33 = zext i8 %tmp_32 to i64

ST_18: w_addr_13 [1/1] 0.00ns
._crit_edge:28  %w_addr_13 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_33

ST_18: stg_221 [1/1] 2.71ns
._crit_edge:29  store i8 %tmp_31, i8* %w_addr_13, align 1

ST_18: tmp_37 [1/1] 0.00ns
._crit_edge:35  %tmp_37 = or i8 %tmp_8, 3

ST_18: tmp_38 [1/1] 0.00ns
._crit_edge:36  %tmp_38 = zext i8 %tmp_37 to i64

ST_18: w_addr_15 [1/1] 0.00ns
._crit_edge:37  %w_addr_15 = getelementptr [176 x i8]* %w, i64 0, i64 %tmp_38

ST_18: stg_225 [1/1] 2.71ns
._crit_edge:38  store i8 %tmp_36, i8* %w_addr_15, align 1

ST_18: stg_226 [1/1] 0.00ns
._crit_edge:40  br label %.preheader



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
