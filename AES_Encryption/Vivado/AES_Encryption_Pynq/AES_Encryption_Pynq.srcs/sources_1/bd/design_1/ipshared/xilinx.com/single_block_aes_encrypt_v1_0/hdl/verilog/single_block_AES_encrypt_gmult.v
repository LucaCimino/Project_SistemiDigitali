// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module single_block_AES_encrypt_gmult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        ap_return
);

parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv8_1B = 8'b11011;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] a;
input  [7:0] b;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_19;
wire   [7:0] a_cast_fu_84_p1;
wire   [3:0] i_6_fu_94_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_41;
wire   [7:0] p_0_s_fu_112_p2;
wire   [0:0] exitcond_fu_88_p2;
wire   [7:0] a_assign_2_fu_138_p3;
wire   [7:0] tmp_1_fu_156_p1;
reg   [3:0] i_reg_44;
reg   [7:0] p_reg_55;
reg   [7:0] p_s_reg_66;
reg   [7:0] p_0_reg_75;
wire   [0:0] tmp_fu_100_p1;
wire   [7:0] tmp_s_fu_104_p3;
wire   [7:0] tmp_12_fu_118_p2;
wire   [0:0] tmp_13_fu_124_p3;
wire   [7:0] a_assign_1_fu_132_p2;
wire   [6:0] b_assign_fu_146_p4;
reg   [7:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'b1;
#0 ap_return_preg = 8'b00000000;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv8_0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_88_p2 == 1'b0))) begin
            ap_return_preg <= p_reg_55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_88_p2 == 1'b0))) begin
        i_reg_44 <= i_6_fu_94_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_44 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_88_p2 == 1'b0))) begin
        p_0_reg_75 <= a_assign_2_fu_138_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        p_0_reg_75 <= a_cast_fu_84_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_88_p2 == 1'b0))) begin
        p_reg_55 <= p_0_s_fu_112_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        p_reg_55 <= ap_const_lv8_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_88_p2 == 1'b0))) begin
        p_s_reg_66 <= tmp_1_fu_156_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        p_s_reg_66 <= b;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_88_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_88_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_88_p2 == 1'b0))) begin
        ap_return = p_reg_55;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (ap_sig_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_41) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(exitcond_fu_88_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_1_fu_132_p2 = (tmp_12_fu_118_p2 ^ ap_const_lv8_1B);

assign a_assign_2_fu_138_p3 = ((tmp_13_fu_124_p3[0:0] === 1'b1) ? a_assign_1_fu_132_p2 : tmp_12_fu_118_p2);

assign a_cast_fu_84_p1 = a;

always @ (*) begin
    ap_sig_19 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_41 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign b_assign_fu_146_p4 = {{p_s_reg_66[ap_const_lv32_7 : ap_const_lv32_1]}};

assign exitcond_fu_88_p2 = ((i_reg_44 == ap_const_lv4_8) ? 1'b1 : 1'b0);

assign i_6_fu_94_p2 = (i_reg_44 + ap_const_lv4_1);

assign p_0_s_fu_112_p2 = (tmp_s_fu_104_p3 ^ p_reg_55);

assign tmp_12_fu_118_p2 = p_0_reg_75 << ap_const_lv8_1;

assign tmp_13_fu_124_p3 = p_0_reg_75[ap_const_lv32_7];

assign tmp_1_fu_156_p1 = b_assign_fu_146_p4;

assign tmp_fu_100_p1 = p_s_reg_66[0:0];

assign tmp_s_fu_104_p3 = ((tmp_fu_100_p1[0:0] === 1'b1) ? p_0_reg_75 : ap_const_lv8_0);

endmodule //single_block_AES_encrypt_gmult
